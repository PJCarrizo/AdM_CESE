
out/arquitecturaDeMicroprocesadores.elf:     file format elf32-littlearm
out/arquitecturaDeMicroprocesadores.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000c69

Program Header:
0x70000001 off    0x000111f8 vaddr 0x1a0011f8 paddr 0x1a0011f8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001200 memsz 0x00001200 flags r-x
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f8  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  10000000  10000000  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00011200  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00011200  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00011200  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00011200  2**2
                  CONTENTS
  6 .bss          0000000c  10000000  10000000  00010000  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00011200  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00011200  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00011200  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00011200  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0011f8  1a0011f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00011200  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00011200  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00011200  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00011200  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00011200  2**2
                  CONTENTS
 17 .noinit       00000000  1000000c  1000000c  00011200  2**2
                  CONTENTS
 18 .debug_info   0000a721  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00001d16  00000000  00000000  0001b921  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000033ac  00000000  00000000  0001d637  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000488  00000000  00000000  000209e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000440  00000000  00000000  00020e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000742c  00000000  00000000  000212b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00006842  00000000  00000000  000286dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001b4ce  00000000  00000000  0002ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  0004a3ec  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  0004a454  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00000a4c  00000000  00000000  0004a488  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000000 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0011f8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000000c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 suma_c.c
00000000 l    df *ABS*	00000000 main.c
1a000304 l     F .text	0000000c initHardware
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0010a8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000500 l     F .text	0000002c Chip_UART_GetIndex
1a0010f0 l     O .text	00000008 UART_BClock
1a0010f8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000660 l     F .text	000000a0 pll_calc_divs
1a000700 l     F .text	00000100 pll_get_frac
1a000800 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000a74 l     F .text	00000022 Chip_Clock_GetDivRate
10000000 l     O .bss	00000008 audio_usb_pll_freq
1a00110c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001178 l     O .text	0000000c InitClkStates
1a001184 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000ce4 l     F .text	00000044 Board_LED_Init
1a0011ec l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 out/app/src/suma.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
1a000898 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00018a  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000188  w    F .text	00000002 SysTick_Handler
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000300 g     F .text	00000004 CSum
1a000178  w    F .text	00000002 NMI_Handler
1a001200 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a001200 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a00018a  w    F .text	00000002 TIMER3_IRQHandler
1a000b16 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a000d94 g     F .text	00000000 .hidden __aeabi_uldivmod
1000000c g       .noinit	00000000 _noinit
10000008 g     O .bss	00000004 SystemCoreClock
1a00052c g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000b60 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a000bf0 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000dc4 g     F .text	000002d0 .hidden __udivmoddi4
1a0011e4 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a0011f8 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a000d64 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
1000000c g       .bss	00000000 _ebss
1a00018a  w    F .text	00000002 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a00084c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a00018a  w    F .text	00000002 TIMER1_IRQHandler
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a000a08 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a000af0 g     F .text	00000026 Chip_Clock_GetBaseClock
10000000 g       .bss	00000000 _bss
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a00065c g     F .text	00000002 Chip_GPIO_Init
1a0011e8 g     O .text	00000004 OscRateIn
1000000c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001094  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a0008b4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001098 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000310 g     F .text	0000002e main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000b24 g     F .text	0000003c Chip_Clock_EnableOpts
1a0008d0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000498 g     F .text	00000054 fpuInit
1a000988 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000bac g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000bb8 g     F .text	00000038 Board_SetupMuxing
1a000580 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000000c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a000d3c g     F .text	00000028 Board_Debug_Init
10000000 g       .data	00000000 _edata
1a000d8c g     F .text	00000000 asmSum
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000340 g     F .text	00000158 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a000c68 g     F .text	0000007c ResetISR
1a0004ec g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001094  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000d28 g     F .text	00000014 Board_UART_Init
1a000a98 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a000c5c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 0c 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 00 00 00 00     }...............
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	89 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00007c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a001200 	.word	0x1a001200
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000000 	.word	0x00000000
1a000120:	1a001200 	.word	0x1a001200
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001200 	.word	0x1a001200
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001200 	.word	0x1a001200
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001200 	.word	0x1a001200
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000000 	.word	0x10000000
1a000154:	0000000c 	.word	0x0000000c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>

1a000188 <SysTick_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <SysTick_Handler>

1a00018a <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <CSum>:
 */
#include <suma.h>
uint32_t CSum(uint32_t firstOperand, uint32_t secondOperand)
{
	return firstOperand+secondOperand;
}
1a000300:	4408      	add	r0, r1
1a000302:	4770      	bx	lr

1a000304 <initHardware>:
/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/

static void initHardware(void)
{
1a000304:	b508      	push	{r3, lr}
	Board_Init();
1a000306:	f000 fd2d 	bl	1a000d64 <Board_Init>
	SystemCoreClockUpdate();
1a00030a:	f000 f8ef 	bl	1a0004ec <SystemCoreClockUpdate>
	//SysTick_Config(SystemCoreClock / 1000);
}
1a00030e:	bd08      	pop	{r3, pc}

1a000310 <main>:

/*==================[external functions definition]==========================*/

int main(void)
{
1a000310:	b500      	push	{lr}
1a000312:	b087      	sub	sp, #28
	volatile  uint32_t aValue = 20,
1a000314:	2314      	movs	r3, #20
1a000316:	9305      	str	r3, [sp, #20]
			 otherValue = 30,
1a000318:	231e      	movs	r3, #30
1a00031a:	9304      	str	r3, [sp, #16]
			 sumResult_Asm,sumResult_C;

	initHardware();
1a00031c:	f7ff fff2 	bl	1a000304 <initHardware>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
1a000320:	f3ef 8314 	mrs	r3, CONTROL

	volatile  uint32_t x = __get_CONTROL ();
1a000324:	9301      	str	r3, [sp, #4]

	sumResult_C= CSum(aValue,otherValue);
1a000326:	9805      	ldr	r0, [sp, #20]
1a000328:	9904      	ldr	r1, [sp, #16]
1a00032a:	f7ff ffe9 	bl	1a000300 <CSum>
1a00032e:	9002      	str	r0, [sp, #8]

	sumResult_Asm = asmSum(aValue, otherValue);
1a000330:	9805      	ldr	r0, [sp, #20]
1a000332:	9904      	ldr	r1, [sp, #16]
1a000334:	f000 fd2a 	bl	1a000d8c <asmSum>
1a000338:	9003      	str	r0, [sp, #12]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a00033a:	bf30      	wfi
1a00033c:	e7fd      	b.n	1a00033a <main+0x2a>
1a00033e:	Address 0x1a00033e is out of bounds.


1a000340 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000340:	b570      	push	{r4, r5, r6, lr}
1a000342:	b092      	sub	sp, #72	; 0x48
1a000344:	4605      	mov	r5, r0
1a000346:	460e      	mov	r6, r1
1a000348:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a00034a:	f241 537c 	movw	r3, #5500	; 0x157c
1a00034e:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000350:	2806      	cmp	r0, #6
1a000352:	d044      	beq.n	1a0003de <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000354:	2300      	movs	r3, #0
1a000356:	2201      	movs	r2, #1
1a000358:	4629      	mov	r1, r5
1a00035a:	2004      	movs	r0, #4
1a00035c:	f000 fb9c 	bl	1a000a98 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000360:	4a4a      	ldr	r2, [pc, #296]	; (1a00048c <Chip_SetupCoreClock+0x14c>)
1a000362:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000364:	f043 0301 	orr.w	r3, r3, #1
1a000368:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a00036a:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00036e:	a909      	add	r1, sp, #36	; 0x24
1a000370:	4630      	mov	r0, r6
1a000372:	f000 fb09 	bl	1a000988 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000376:	4b46      	ldr	r3, [pc, #280]	; (1a000490 <Chip_SetupCoreClock+0x150>)
1a000378:	429e      	cmp	r6, r3
1a00037a:	d938      	bls.n	1a0003ee <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a00037c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00037e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000382:	d001      	beq.n	1a000388 <Chip_SetupCoreClock+0x48>
1a000384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000386:	b36a      	cbz	r2, 1a0003e4 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000388:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a00038c:	a901      	add	r1, sp, #4
1a00038e:	4840      	ldr	r0, [pc, #256]	; (1a000490 <Chip_SetupCoreClock+0x150>)
1a000390:	f000 fafa 	bl	1a000988 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000394:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000398:	9b01      	ldr	r3, [sp, #4]
1a00039a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00039e:	9a05      	ldr	r2, [sp, #20]
1a0003a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0003a4:	9a03      	ldr	r2, [sp, #12]
1a0003a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0003aa:	9a04      	ldr	r2, [sp, #16]
1a0003ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0003b0:	4a36      	ldr	r2, [pc, #216]	; (1a00048c <Chip_SetupCoreClock+0x14c>)
1a0003b2:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0003b4:	4b35      	ldr	r3, [pc, #212]	; (1a00048c <Chip_SetupCoreClock+0x14c>)
1a0003b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a0003b8:	f013 0f01 	tst.w	r3, #1
1a0003bc:	d0fa      	beq.n	1a0003b4 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0003be:	2300      	movs	r3, #0
1a0003c0:	2201      	movs	r2, #1
1a0003c2:	2109      	movs	r1, #9
1a0003c4:	2004      	movs	r0, #4
1a0003c6:	f000 fb67 	bl	1a000a98 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a0003ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0003cc:	1e5a      	subs	r2, r3, #1
1a0003ce:	9211      	str	r2, [sp, #68]	; 0x44
1a0003d0:	2b00      	cmp	r3, #0
1a0003d2:	d1fa      	bne.n	1a0003ca <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a0003d4:	f241 537c 	movw	r3, #5500	; 0x157c
1a0003d8:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a0003da:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a0003dc:	e008      	b.n	1a0003f0 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a0003de:	f000 fa35 	bl	1a00084c <Chip_Clock_EnableCrystal>
1a0003e2:	e7b7      	b.n	1a000354 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a0003e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0003e8:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a0003ea:	2501      	movs	r5, #1
1a0003ec:	e000      	b.n	1a0003f0 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a0003ee:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a0003f0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a0003f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0003f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0003fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0003fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000402:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000408:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00040c:	4a1f      	ldr	r2, [pc, #124]	; (1a00048c <Chip_SetupCoreClock+0x14c>)
1a00040e:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000410:	4b1e      	ldr	r3, [pc, #120]	; (1a00048c <Chip_SetupCoreClock+0x14c>)
1a000412:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000414:	f013 0f01 	tst.w	r3, #1
1a000418:	d0fa      	beq.n	1a000410 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00041a:	2300      	movs	r3, #0
1a00041c:	2201      	movs	r2, #1
1a00041e:	2109      	movs	r1, #9
1a000420:	2004      	movs	r0, #4
1a000422:	f000 fb39 	bl	1a000a98 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000426:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000428:	1e5a      	subs	r2, r3, #1
1a00042a:	9211      	str	r2, [sp, #68]	; 0x44
1a00042c:	2b00      	cmp	r3, #0
1a00042e:	d1fa      	bne.n	1a000426 <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a000430:	b1d5      	cbz	r5, 1a000468 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a000432:	f241 537c 	movw	r3, #5500	; 0x157c
1a000436:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000438:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00043a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00043e:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000440:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000444:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a00044a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00044e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000450:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000456:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00045a:	4a0c      	ldr	r2, [pc, #48]	; (1a00048c <Chip_SetupCoreClock+0x14c>)
1a00045c:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a00045e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000460:	1e5a      	subs	r2, r3, #1
1a000462:	9211      	str	r2, [sp, #68]	; 0x44
1a000464:	2b00      	cmp	r3, #0
1a000466:	d1fa      	bne.n	1a00045e <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a000468:	b90c      	cbnz	r4, 1a00046e <Chip_SetupCoreClock+0x12e>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a00046a:	b012      	add	sp, #72	; 0x48
1a00046c:	bd70      	pop	{r4, r5, r6, pc}
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00046e:	2400      	movs	r4, #0
1a000470:	2c11      	cmp	r4, #17
1a000472:	d8fa      	bhi.n	1a00046a <Chip_SetupCoreClock+0x12a>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000474:	4807      	ldr	r0, [pc, #28]	; (1a000494 <Chip_SetupCoreClock+0x154>)
1a000476:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00047a:	78cb      	ldrb	r3, [r1, #3]
1a00047c:	788a      	ldrb	r2, [r1, #2]
1a00047e:	7849      	ldrb	r1, [r1, #1]
1a000480:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000484:	f000 fb08 	bl	1a000a98 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000488:	3401      	adds	r4, #1
1a00048a:	e7f1      	b.n	1a000470 <Chip_SetupCoreClock+0x130>
1a00048c:	40050000 	.word	0x40050000
1a000490:	068e7780 	.word	0x068e7780
1a000494:	1a0010a8 	.word	0x1a0010a8

1a000498 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000498:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a00049a:	4b0f      	ldr	r3, [pc, #60]	; (1a0004d8 <fpuInit+0x40>)
1a00049c:	681b      	ldr	r3, [r3, #0]
1a00049e:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a0004a0:	4b0e      	ldr	r3, [pc, #56]	; (1a0004dc <fpuInit+0x44>)
1a0004a2:	681b      	ldr	r3, [r3, #0]
1a0004a4:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0004a6:	9a02      	ldr	r2, [sp, #8]
1a0004a8:	4b0d      	ldr	r3, [pc, #52]	; (1a0004e0 <fpuInit+0x48>)
1a0004aa:	429a      	cmp	r2, r3
1a0004ac:	d00c      	beq.n	1a0004c8 <fpuInit+0x30>
1a0004ae:	2300      	movs	r3, #0

   if (vfpPresent) {
1a0004b0:	b143      	cbz	r3, 1a0004c4 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a0004b2:	4a0c      	ldr	r2, [pc, #48]	; (1a0004e4 <fpuInit+0x4c>)
1a0004b4:	6813      	ldr	r3, [r2, #0]
1a0004b6:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a0004b8:	9b03      	ldr	r3, [sp, #12]
1a0004ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0004be:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a0004c0:	9b03      	ldr	r3, [sp, #12]
1a0004c2:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a0004c4:	b004      	add	sp, #16
1a0004c6:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0004c8:	9a01      	ldr	r2, [sp, #4]
1a0004ca:	4b07      	ldr	r3, [pc, #28]	; (1a0004e8 <fpuInit+0x50>)
1a0004cc:	429a      	cmp	r2, r3
1a0004ce:	d001      	beq.n	1a0004d4 <fpuInit+0x3c>
1a0004d0:	2300      	movs	r3, #0
1a0004d2:	e7ed      	b.n	1a0004b0 <fpuInit+0x18>
1a0004d4:	2301      	movs	r3, #1
1a0004d6:	e7eb      	b.n	1a0004b0 <fpuInit+0x18>
1a0004d8:	e000ef40 	.word	0xe000ef40
1a0004dc:	e000ef44 	.word	0xe000ef44
1a0004e0:	10110021 	.word	0x10110021
1a0004e4:	e000ed88 	.word	0xe000ed88
1a0004e8:	11000011 	.word	0x11000011

1a0004ec <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0004ec:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0004ee:	2069      	movs	r0, #105	; 0x69
1a0004f0:	f000 fb36 	bl	1a000b60 <Chip_Clock_GetRate>
1a0004f4:	4b01      	ldr	r3, [pc, #4]	; (1a0004fc <SystemCoreClockUpdate+0x10>)
1a0004f6:	6018      	str	r0, [r3, #0]
}
1a0004f8:	bd08      	pop	{r3, pc}
1a0004fa:	bf00      	nop
1a0004fc:	10000008 	.word	0x10000008

1a000500 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000500:	4b09      	ldr	r3, [pc, #36]	; (1a000528 <Chip_UART_GetIndex+0x28>)
1a000502:	4298      	cmp	r0, r3
1a000504:	d009      	beq.n	1a00051a <Chip_UART_GetIndex+0x1a>
1a000506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00050a:	4298      	cmp	r0, r3
1a00050c:	d007      	beq.n	1a00051e <Chip_UART_GetIndex+0x1e>
1a00050e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000512:	4298      	cmp	r0, r3
1a000514:	d005      	beq.n	1a000522 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000516:	2000      	movs	r0, #0
1a000518:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a00051a:	2002      	movs	r0, #2
1a00051c:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a00051e:	2003      	movs	r0, #3
1a000520:	4770      	bx	lr
           return 1;
1a000522:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000524:	4770      	bx	lr
1a000526:	bf00      	nop
1a000528:	400c1000 	.word	0x400c1000

1a00052c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00052c:	b530      	push	{r4, r5, lr}
1a00052e:	b083      	sub	sp, #12
1a000530:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000532:	f7ff ffe5 	bl	1a000500 <Chip_UART_GetIndex>
1a000536:	2301      	movs	r3, #1
1a000538:	461a      	mov	r2, r3
1a00053a:	4619      	mov	r1, r3
1a00053c:	4d0e      	ldr	r5, [pc, #56]	; (1a000578 <Chip_UART_Init+0x4c>)
1a00053e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000542:	f000 faef 	bl	1a000b24 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000546:	2307      	movs	r3, #7
1a000548:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00054a:	2300      	movs	r3, #0
1a00054c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a00054e:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000550:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000552:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000554:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000556:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000558:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00055a:	4b08      	ldr	r3, [pc, #32]	; (1a00057c <Chip_UART_Init+0x50>)
1a00055c:	429c      	cmp	r4, r3
1a00055e:	d005      	beq.n	1a00056c <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000560:	2303      	movs	r3, #3
1a000562:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000564:	2310      	movs	r3, #16
1a000566:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000568:	b003      	add	sp, #12
1a00056a:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a00056c:	2300      	movs	r3, #0
1a00056e:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a000570:	69a3      	ldr	r3, [r4, #24]
1a000572:	9301      	str	r3, [sp, #4]
1a000574:	e7f4      	b.n	1a000560 <Chip_UART_Init+0x34>
1a000576:	bf00      	nop
1a000578:	1a0010f8 	.word	0x1a0010f8
1a00057c:	40082000 	.word	0x40082000

1a000580 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000584:	b083      	sub	sp, #12
1a000586:	9001      	str	r0, [sp, #4]
1a000588:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00058a:	f7ff ffb9 	bl	1a000500 <Chip_UART_GetIndex>
1a00058e:	4b32      	ldr	r3, [pc, #200]	; (1a000658 <Chip_UART_SetBaudFDR+0xd8>)
1a000590:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000594:	f000 fae4 	bl	1a000b60 <Chip_Clock_GetRate>
1a000598:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a00059a:	f04f 37ff 	mov.w	r7, #4294967295

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a00059e:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a0005a0:	f04f 0b00 	mov.w	fp, #0
1a0005a4:	46a2      	mov	sl, r4
1a0005a6:	46d9      	mov	r9, fp
   for (m = 1; odiff && m < 16; m++) {
1a0005a8:	e02a      	b.n	1a000600 <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a0005aa:	4242      	negs	r2, r0
               div ++;
1a0005ac:	1c4b      	adds	r3, r1, #1
1a0005ae:	e017      	b.n	1a0005e0 <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a0005b0:	b30a      	cbz	r2, 1a0005f6 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a0005b2:	4617      	mov	r7, r2
           sd = d;
1a0005b4:	46ab      	mov	fp, r5
           sm = m;
1a0005b6:	46a2      	mov	sl, r4
           sdiv = div;
1a0005b8:	4699      	mov	r9, r3
       for (d = 0; d < m; d++) {
1a0005ba:	3501      	adds	r5, #1
1a0005bc:	42ac      	cmp	r4, r5
1a0005be:	d91e      	bls.n	1a0005fe <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0005c0:	0933      	lsrs	r3, r6, #4
1a0005c2:	0730      	lsls	r0, r6, #28
1a0005c4:	fba4 0100 	umull	r0, r1, r4, r0
1a0005c8:	fb04 1103 	mla	r1, r4, r3, r1
1a0005cc:	1962      	adds	r2, r4, r5
1a0005ce:	fb08 f202 	mul.w	r2, r8, r2
1a0005d2:	2300      	movs	r3, #0
1a0005d4:	f000 fbde 	bl	1a000d94 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a0005d8:	4602      	mov	r2, r0
           div = (uint32_t) (dval >> 32);
1a0005da:	460b      	mov	r3, r1
           if ((int)diff < 0) {
1a0005dc:	2800      	cmp	r0, #0
1a0005de:	dbe4      	blt.n	1a0005aa <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0005e0:	4297      	cmp	r7, r2
1a0005e2:	d3ea      	bcc.n	1a0005ba <Chip_UART_SetBaudFDR+0x3a>
1a0005e4:	2b00      	cmp	r3, #0
1a0005e6:	d0e8      	beq.n	1a0005ba <Chip_UART_SetBaudFDR+0x3a>
1a0005e8:	0c19      	lsrs	r1, r3, #16
1a0005ea:	d1e6      	bne.n	1a0005ba <Chip_UART_SetBaudFDR+0x3a>
1a0005ec:	2b02      	cmp	r3, #2
1a0005ee:	d8df      	bhi.n	1a0005b0 <Chip_UART_SetBaudFDR+0x30>
1a0005f0:	2d00      	cmp	r5, #0
1a0005f2:	d0dd      	beq.n	1a0005b0 <Chip_UART_SetBaudFDR+0x30>
1a0005f4:	e7e1      	b.n	1a0005ba <Chip_UART_SetBaudFDR+0x3a>
           odiff = diff;
1a0005f6:	4617      	mov	r7, r2
           sd = d;
1a0005f8:	46ab      	mov	fp, r5
           sm = m;
1a0005fa:	46a2      	mov	sl, r4
           sdiv = div;
1a0005fc:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a0005fe:	3401      	adds	r4, #1
1a000600:	b11f      	cbz	r7, 1a00060a <Chip_UART_SetBaudFDR+0x8a>
1a000602:	2c0f      	cmp	r4, #15
1a000604:	d801      	bhi.n	1a00060a <Chip_UART_SetBaudFDR+0x8a>
       for (d = 0; d < m; d++) {
1a000606:	2500      	movs	r5, #0
1a000608:	e7d8      	b.n	1a0005bc <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a00060a:	f1b9 0f00 	cmp.w	r9, #0
1a00060e:	d01e      	beq.n	1a00064e <Chip_UART_SetBaudFDR+0xce>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000610:	9a01      	ldr	r2, [sp, #4]
1a000612:	4611      	mov	r1, r2
1a000614:	68d3      	ldr	r3, [r2, #12]
1a000616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00061a:	60d3      	str	r3, [r2, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a00061c:	fa5f f389 	uxtb.w	r3, r9
1a000620:	6013      	str	r3, [r2, #0]
   pUART->DLM = (uint32_t) dlm;
1a000622:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000626:	6053      	str	r3, [r2, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000628:	68d3      	ldr	r3, [r2, #12]
1a00062a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00062e:	60d3      	str	r3, [r2, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000630:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000634:	b2db      	uxtb	r3, r3
1a000636:	f00b 020f 	and.w	r2, fp, #15
1a00063a:	4313      	orrs	r3, r2
1a00063c:	628b      	str	r3, [r1, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00063e:	0933      	lsrs	r3, r6, #4
1a000640:	fb0a f303 	mul.w	r3, sl, r3
1a000644:	44da      	add	sl, fp
1a000646:	fb09 f90a 	mul.w	r9, r9, sl
1a00064a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00064e:	4648      	mov	r0, r9
1a000650:	b003      	add	sp, #12
1a000652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000656:	bf00      	nop
1a000658:	1a0010f0 	.word	0x1a0010f0

1a00065c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00065c:	4770      	bx	lr
1a00065e:	Address 0x1a00065e is out of bounds.


1a000660 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000660:	b4f0      	push	{r4, r5, r6, r7}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000662:	680b      	ldr	r3, [r1, #0]
1a000664:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000668:	d002      	beq.n	1a000670 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a00066a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00066e:	600b      	str	r3, [r1, #0]
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a000670:	4607      	mov	r7, r0
1a000672:	2501      	movs	r5, #1
1a000674:	e03a      	b.n	1a0006ec <pll_calc_divs+0x8c>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a000676:	694b      	ldr	r3, [r1, #20]
1a000678:	fb03 f302 	mul.w	r3, r3, r2
1a00067c:	fbb3 f3f5 	udiv	r3, r3, r5
1a000680:	e01c      	b.n	1a0006bc <pll_calc_divs+0x5c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a000682:	461c      	mov	r4, r3
   if (val < 0)
1a000684:	ebb0 0c04 	subs.w	ip, r0, r4
1a000688:	d427      	bmi.n	1a0006da <pll_calc_divs+0x7a>
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a00068a:	4567      	cmp	r7, ip
1a00068c:	d906      	bls.n	1a00069c <pll_calc_divs+0x3c>
                   ppll->nsel = n;
1a00068e:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a000690:	1c77      	adds	r7, r6, #1
1a000692:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a000694:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a000696:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a000698:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a00069a:	4667      	mov	r7, ip
           for (m = 1; m <= 256; m++) {
1a00069c:	3201      	adds	r2, #1
1a00069e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0006a2:	dc1d      	bgt.n	1a0006e0 <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 6)) {
1a0006a4:	680c      	ldr	r4, [r1, #0]
1a0006a6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0006aa:	d0e4      	beq.n	1a000676 <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0006ac:	1c73      	adds	r3, r6, #1
1a0006ae:	fa02 fc03 	lsl.w	ip, r2, r3
1a0006b2:	694b      	ldr	r3, [r1, #20]
1a0006b4:	fb03 f30c 	mul.w	r3, r3, ip
1a0006b8:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0006bc:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0006f8 <pll_calc_divs+0x98>
1a0006c0:	4563      	cmp	r3, ip
1a0006c2:	d9eb      	bls.n	1a00069c <pll_calc_divs+0x3c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a0006c4:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0006fc <pll_calc_divs+0x9c>
1a0006c8:	4563      	cmp	r3, ip
1a0006ca:	d809      	bhi.n	1a0006e0 <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 7)) {
1a0006cc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0006d0:	d1d7      	bne.n	1a000682 <pll_calc_divs+0x22>
                   fout = fcco >> (p + 1);
1a0006d2:	1c74      	adds	r4, r6, #1
1a0006d4:	fa23 f404 	lsr.w	r4, r3, r4
1a0006d8:	e7d4      	b.n	1a000684 <pll_calc_divs+0x24>
       return -val;
1a0006da:	f1cc 0c00 	rsb	ip, ip, #0
1a0006de:	e7d4      	b.n	1a00068a <pll_calc_divs+0x2a>
       for (p = 0; p < 4; p ++) {
1a0006e0:	3601      	adds	r6, #1
1a0006e2:	2e03      	cmp	r6, #3
1a0006e4:	dc01      	bgt.n	1a0006ea <pll_calc_divs+0x8a>
           for (m = 1; m <= 256; m++) {
1a0006e6:	2201      	movs	r2, #1
1a0006e8:	e7d9      	b.n	1a00069e <pll_calc_divs+0x3e>
   for (n = 1; n <= 4; n++) {
1a0006ea:	3501      	adds	r5, #1
1a0006ec:	2d04      	cmp	r5, #4
1a0006ee:	dc01      	bgt.n	1a0006f4 <pll_calc_divs+0x94>
       for (p = 0; p < 4; p ++) {
1a0006f0:	2600      	movs	r6, #0
1a0006f2:	e7f6      	b.n	1a0006e2 <pll_calc_divs+0x82>
               }
           }
       }
   }
}
1a0006f4:	bcf0      	pop	{r4, r5, r6, r7}
1a0006f6:	4770      	bx	lr
1a0006f8:	094c5eff 	.word	0x094c5eff
1a0006fc:	1312d000 	.word	0x1312d000

1a000700 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000700:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000702:	b099      	sub	sp, #100	; 0x64
1a000704:	4605      	mov	r5, r0
1a000706:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000708:	225c      	movs	r2, #92	; 0x5c
1a00070a:	2100      	movs	r1, #0
1a00070c:	a801      	add	r0, sp, #4
1a00070e:	f000 fcc3 	bl	1a001098 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a000712:	2380      	movs	r3, #128	; 0x80
1a000714:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a000716:	6963      	ldr	r3, [r4, #20]
1a000718:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a00071a:	7923      	ldrb	r3, [r4, #4]
1a00071c:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a000720:	4669      	mov	r1, sp
1a000722:	4628      	mov	r0, r5
1a000724:	f7ff ff9c 	bl	1a000660 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000728:	9b06      	ldr	r3, [sp, #24]
1a00072a:	42ab      	cmp	r3, r5
1a00072c:	d02f      	beq.n	1a00078e <pll_get_frac+0x8e>
   if (val < 0)
1a00072e:	1aeb      	subs	r3, r5, r3
1a000730:	d436      	bmi.n	1a0007a0 <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a000732:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000734:	2340      	movs	r3, #64	; 0x40
1a000736:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000738:	6963      	ldr	r3, [r4, #20]
1a00073a:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a00073c:	7923      	ldrb	r3, [r4, #4]
1a00073e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a000742:	a910      	add	r1, sp, #64	; 0x40
1a000744:	4628      	mov	r0, r5
1a000746:	f7ff ff8b 	bl	1a000660 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a00074a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00074c:	42ab      	cmp	r3, r5
1a00074e:	d029      	beq.n	1a0007a4 <pll_get_frac+0xa4>
   if (val < 0)
1a000750:	1aeb      	subs	r3, r5, r3
1a000752:	d42f      	bmi.n	1a0007b4 <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000754:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a000756:	2340      	movs	r3, #64	; 0x40
1a000758:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a00075a:	6963      	ldr	r3, [r4, #20]
1a00075c:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a00075e:	7923      	ldrb	r3, [r4, #4]
1a000760:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a000764:	a908      	add	r1, sp, #32
1a000766:	4628      	mov	r0, r5
1a000768:	f7ff ff7a 	bl	1a000660 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a00076c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00076e:	42ab      	cmp	r3, r5
1a000770:	d022      	beq.n	1a0007b8 <pll_get_frac+0xb8>
   if (val < 0)
1a000772:	1aed      	subs	r5, r5, r3
1a000774:	d428      	bmi.n	1a0007c8 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a000776:	42ae      	cmp	r6, r5
1a000778:	dc30      	bgt.n	1a0007dc <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a00077a:	42be      	cmp	r6, r7
1a00077c:	dc26      	bgt.n	1a0007cc <pll_get_frac+0xcc>
           *ppll = pll[0];
1a00077e:	466d      	mov	r5, sp
1a000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00078c:	e006      	b.n	1a00079c <pll_get_frac+0x9c>
       *ppll = pll[0];
1a00078e:	466d      	mov	r5, sp
1a000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000794:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a00079c:	b019      	add	sp, #100	; 0x64
1a00079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a0007a0:	425b      	negs	r3, r3
1a0007a2:	e7c6      	b.n	1a000732 <pll_get_frac+0x32>
       *ppll = pll[2];
1a0007a4:	ad10      	add	r5, sp, #64	; 0x40
1a0007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0007b2:	e7f3      	b.n	1a00079c <pll_get_frac+0x9c>
       return -val;
1a0007b4:	425b      	negs	r3, r3
1a0007b6:	e7cd      	b.n	1a000754 <pll_get_frac+0x54>
       *ppll = pll[1];
1a0007b8:	ad08      	add	r5, sp, #32
1a0007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0007c6:	e7e9      	b.n	1a00079c <pll_get_frac+0x9c>
       return -val;
1a0007c8:	426d      	negs	r5, r5
1a0007ca:	e7d4      	b.n	1a000776 <pll_get_frac+0x76>
           *ppll = pll[2];
1a0007cc:	ad10      	add	r5, sp, #64	; 0x40
1a0007ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0007da:	e7df      	b.n	1a00079c <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a0007dc:	42af      	cmp	r7, r5
1a0007de:	db07      	blt.n	1a0007f0 <pll_get_frac+0xf0>
           *ppll = pll[1];
1a0007e0:	ad08      	add	r5, sp, #32
1a0007e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0007ee:	e7d5      	b.n	1a00079c <pll_get_frac+0x9c>
           *ppll = pll[2];
1a0007f0:	ad10      	add	r5, sp, #64	; 0x40
1a0007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0007fe:	e7cd      	b.n	1a00079c <pll_get_frac+0x9c>

1a000800 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000800:	b430      	push	{r4, r5}
1a000802:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a000804:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000806:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000808:	e000      	b.n	1a00080c <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a00080a:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00080c:	281c      	cmp	r0, #28
1a00080e:	d118      	bne.n	1a000842 <Chip_Clock_FindBaseClock+0x42>
1a000810:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000814:	0051      	lsls	r1, r2, #1
1a000816:	4a0c      	ldr	r2, [pc, #48]	; (1a000848 <Chip_Clock_FindBaseClock+0x48>)
1a000818:	440a      	add	r2, r1
1a00081a:	7914      	ldrb	r4, [r2, #4]
1a00081c:	4284      	cmp	r4, r0
1a00081e:	d010      	beq.n	1a000842 <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000820:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000824:	004a      	lsls	r2, r1, #1
1a000826:	4908      	ldr	r1, [pc, #32]	; (1a000848 <Chip_Clock_FindBaseClock+0x48>)
1a000828:	5a8a      	ldrh	r2, [r1, r2]
1a00082a:	42aa      	cmp	r2, r5
1a00082c:	d8ed      	bhi.n	1a00080a <Chip_Clock_FindBaseClock+0xa>
1a00082e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000832:	0051      	lsls	r1, r2, #1
1a000834:	4a04      	ldr	r2, [pc, #16]	; (1a000848 <Chip_Clock_FindBaseClock+0x48>)
1a000836:	440a      	add	r2, r1
1a000838:	8852      	ldrh	r2, [r2, #2]
1a00083a:	42aa      	cmp	r2, r5
1a00083c:	d3e5      	bcc.n	1a00080a <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a00083e:	4620      	mov	r0, r4
1a000840:	e7e4      	b.n	1a00080c <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a000842:	bc30      	pop	{r4, r5}
1a000844:	4770      	bx	lr
1a000846:	bf00      	nop
1a000848:	1a00110c 	.word	0x1a00110c

1a00084c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00084c:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a00084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000852:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000854:	4a0d      	ldr	r2, [pc, #52]	; (1a00088c <Chip_Clock_EnableCrystal+0x40>)
1a000856:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000858:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00085c:	6992      	ldr	r2, [r2, #24]
1a00085e:	428a      	cmp	r2, r1
1a000860:	d001      	beq.n	1a000866 <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000862:	4a0a      	ldr	r2, [pc, #40]	; (1a00088c <Chip_Clock_EnableCrystal+0x40>)
1a000864:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a000866:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a00086a:	4a09      	ldr	r2, [pc, #36]	; (1a000890 <Chip_Clock_EnableCrystal+0x44>)
1a00086c:	6811      	ldr	r1, [r2, #0]
1a00086e:	4a09      	ldr	r2, [pc, #36]	; (1a000894 <Chip_Clock_EnableCrystal+0x48>)
1a000870:	4291      	cmp	r1, r2
1a000872:	d901      	bls.n	1a000878 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000874:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000878:	4a04      	ldr	r2, [pc, #16]	; (1a00088c <Chip_Clock_EnableCrystal+0x40>)
1a00087a:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a00087c:	9b01      	ldr	r3, [sp, #4]
1a00087e:	1e5a      	subs	r2, r3, #1
1a000880:	9201      	str	r2, [sp, #4]
1a000882:	2b00      	cmp	r3, #0
1a000884:	d1fa      	bne.n	1a00087c <Chip_Clock_EnableCrystal+0x30>
}
1a000886:	b002      	add	sp, #8
1a000888:	4770      	bx	lr
1a00088a:	bf00      	nop
1a00088c:	40050000 	.word	0x40050000
1a000890:	1a0011e8 	.word	0x1a0011e8
1a000894:	01312cff 	.word	0x01312cff

1a000898 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000898:	3012      	adds	r0, #18
1a00089a:	4b05      	ldr	r3, [pc, #20]	; (1a0008b0 <Chip_Clock_GetDividerSource+0x18>)
1a00089c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0008a0:	f010 0f01 	tst.w	r0, #1
1a0008a4:	d102      	bne.n	1a0008ac <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0008a6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0008aa:	4770      	bx	lr
       return CLKINPUT_PD;
1a0008ac:	2011      	movs	r0, #17
}
1a0008ae:	4770      	bx	lr
1a0008b0:	40050000 	.word	0x40050000

1a0008b4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0008b4:	f100 0212 	add.w	r2, r0, #18
1a0008b8:	4b03      	ldr	r3, [pc, #12]	; (1a0008c8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0008ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0008be:	4b03      	ldr	r3, [pc, #12]	; (1a0008cc <Chip_Clock_GetDividerDivisor+0x18>)
1a0008c0:	5c18      	ldrb	r0, [r3, r0]
}
1a0008c2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0008c6:	4770      	bx	lr
1a0008c8:	40050000 	.word	0x40050000
1a0008cc:	1a001104 	.word	0x1a001104

1a0008d0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0008d0:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a0008d2:	2810      	cmp	r0, #16
1a0008d4:	d80a      	bhi.n	1a0008ec <Chip_Clock_GetClockInputHz+0x1c>
1a0008d6:	e8df f000 	tbb	[pc, r0]
1a0008da:	0b44      	.short	0x0b44
1a0008dc:	0921180d 	.word	0x0921180d
1a0008e0:	2d2a2724 	.word	0x2d2a2724
1a0008e4:	34300909 	.word	0x34300909
1a0008e8:	3c38      	.short	0x3c38
1a0008ea:	40          	.byte	0x40
1a0008eb:	00          	.byte	0x00
   uint32_t rate = 0;
1a0008ec:	2000      	movs	r0, #0
1a0008ee:	e03a      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a0008f0:	481e      	ldr	r0, [pc, #120]	; (1a00096c <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a0008f2:	e038      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0008f4:	4b1e      	ldr	r3, [pc, #120]	; (1a000970 <Chip_Clock_GetClockInputHz+0xa0>)
1a0008f6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0008fa:	f003 0307 	and.w	r3, r3, #7
1a0008fe:	2b04      	cmp	r3, #4
1a000900:	d001      	beq.n	1a000906 <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a000902:	481c      	ldr	r0, [pc, #112]	; (1a000974 <Chip_Clock_GetClockInputHz+0xa4>)
1a000904:	e02f      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>
   uint32_t rate = 0;
1a000906:	2000      	movs	r0, #0
1a000908:	e02d      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00090a:	4b19      	ldr	r3, [pc, #100]	; (1a000970 <Chip_Clock_GetClockInputHz+0xa0>)
1a00090c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000910:	f003 0307 	and.w	r3, r3, #7
1a000914:	2b04      	cmp	r3, #4
1a000916:	d027      	beq.n	1a000968 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000918:	4816      	ldr	r0, [pc, #88]	; (1a000974 <Chip_Clock_GetClockInputHz+0xa4>)
1a00091a:	e024      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a00091c:	4b16      	ldr	r3, [pc, #88]	; (1a000978 <Chip_Clock_GetClockInputHz+0xa8>)
1a00091e:	6818      	ldr	r0, [r3, #0]
       break;
1a000920:	e021      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a000922:	4b16      	ldr	r3, [pc, #88]	; (1a00097c <Chip_Clock_GetClockInputHz+0xac>)
1a000924:	6818      	ldr	r0, [r3, #0]
       break;
1a000926:	e01e      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000928:	4b15      	ldr	r3, [pc, #84]	; (1a000980 <Chip_Clock_GetClockInputHz+0xb0>)
1a00092a:	6818      	ldr	r0, [r3, #0]
       break;
1a00092c:	e01b      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00092e:	4b14      	ldr	r3, [pc, #80]	; (1a000980 <Chip_Clock_GetClockInputHz+0xb0>)
1a000930:	6858      	ldr	r0, [r3, #4]
       break;
1a000932:	e018      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000934:	f000 f868 	bl	1a000a08 <Chip_Clock_GetMainPLLHz>
       break;
1a000938:	e015      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00093a:	2100      	movs	r1, #0
1a00093c:	f000 f89a 	bl	1a000a74 <Chip_Clock_GetDivRate>
       break;
1a000940:	e011      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000942:	2101      	movs	r1, #1
1a000944:	f000 f896 	bl	1a000a74 <Chip_Clock_GetDivRate>
       break;
1a000948:	e00d      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00094a:	2102      	movs	r1, #2
1a00094c:	f000 f892 	bl	1a000a74 <Chip_Clock_GetDivRate>
       break;
1a000950:	e009      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000952:	2103      	movs	r1, #3
1a000954:	f000 f88e 	bl	1a000a74 <Chip_Clock_GetDivRate>
       break;
1a000958:	e005      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00095a:	2104      	movs	r1, #4
1a00095c:	f000 f88a 	bl	1a000a74 <Chip_Clock_GetDivRate>
       break;
1a000960:	e001      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>
       rate = CRYSTAL_32K_FREQ_IN;
1a000962:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   default:
       break;
   }

   return rate;
}
1a000966:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a000968:	4806      	ldr	r0, [pc, #24]	; (1a000984 <Chip_Clock_GetClockInputHz+0xb4>)
   return rate;
1a00096a:	e7fc      	b.n	1a000966 <Chip_Clock_GetClockInputHz+0x96>
1a00096c:	00b71b00 	.word	0x00b71b00
1a000970:	40043000 	.word	0x40043000
1a000974:	017d7840 	.word	0x017d7840
1a000978:	1a0011e4 	.word	0x1a0011e4
1a00097c:	1a0011e8 	.word	0x1a0011e8
1a000980:	10000000 	.word	0x10000000
1a000984:	02faf080 	.word	0x02faf080

1a000988 <Chip_Clock_CalcMainPLLValue>:
{
1a000988:	b538      	push	{r3, r4, r5, lr}
1a00098a:	4605      	mov	r5, r0
1a00098c:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00098e:	7908      	ldrb	r0, [r1, #4]
1a000990:	f7ff ff9e 	bl	1a0008d0 <Chip_Clock_GetClockInputHz>
1a000994:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000996:	4b19      	ldr	r3, [pc, #100]	; (1a0009fc <Chip_Clock_CalcMainPLLValue+0x74>)
1a000998:	442b      	add	r3, r5
1a00099a:	4a19      	ldr	r2, [pc, #100]	; (1a000a00 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00099c:	4293      	cmp	r3, r2
1a00099e:	d821      	bhi.n	1a0009e4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0009a0:	b318      	cbz	r0, 1a0009ea <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0009a2:	2380      	movs	r3, #128	; 0x80
1a0009a4:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0009a6:	2300      	movs	r3, #0
1a0009a8:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0009aa:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0009ac:	fbb5 f3f0 	udiv	r3, r5, r0
1a0009b0:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0009b2:	4a14      	ldr	r2, [pc, #80]	; (1a000a04 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0009b4:	4295      	cmp	r5, r2
1a0009b6:	d903      	bls.n	1a0009c0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0009b8:	fb03 f000 	mul.w	r0, r3, r0
1a0009bc:	42a8      	cmp	r0, r5
1a0009be:	d007      	beq.n	1a0009d0 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a0009c0:	4621      	mov	r1, r4
1a0009c2:	4628      	mov	r0, r5
1a0009c4:	f7ff fe9c 	bl	1a000700 <pll_get_frac>
       if (!ppll->nsel) {
1a0009c8:	68a3      	ldr	r3, [r4, #8]
1a0009ca:	b18b      	cbz	r3, 1a0009f0 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a0009cc:	3b01      	subs	r3, #1
1a0009ce:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a0009d0:	6923      	ldr	r3, [r4, #16]
1a0009d2:	b183      	cbz	r3, 1a0009f6 <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a0009d4:	68e2      	ldr	r2, [r4, #12]
1a0009d6:	b10a      	cbz	r2, 1a0009dc <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a0009d8:	3a01      	subs	r2, #1
1a0009da:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a0009dc:	3b01      	subs	r3, #1
1a0009de:	6123      	str	r3, [r4, #16]
   return 0;
1a0009e0:	2000      	movs	r0, #0
}
1a0009e2:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a0009e4:	f04f 30ff 	mov.w	r0, #4294967295
1a0009e8:	e7fb      	b.n	1a0009e2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0009ea:	f04f 30ff 	mov.w	r0, #4294967295
1a0009ee:	e7f8      	b.n	1a0009e2 <Chip_Clock_CalcMainPLLValue+0x5a>
           return -1;
1a0009f0:	f04f 30ff 	mov.w	r0, #4294967295
1a0009f4:	e7f5      	b.n	1a0009e2 <Chip_Clock_CalcMainPLLValue+0x5a>
       return - 1;
1a0009f6:	f04f 30ff 	mov.w	r0, #4294967295
1a0009fa:	e7f2      	b.n	1a0009e2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0009fc:	ff6b3a10 	.word	0xff6b3a10
1a000a00:	0b940510 	.word	0x0b940510
1a000a04:	094c5eff 	.word	0x094c5eff

1a000a08 <Chip_Clock_GetMainPLLHz>:
{
1a000a08:	b530      	push	{r4, r5, lr}
1a000a0a:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000a0c:	4d17      	ldr	r5, [pc, #92]	; (1a000a6c <Chip_Clock_GetMainPLLHz+0x64>)
1a000a0e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000a10:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000a14:	f7ff ff5c 	bl	1a0008d0 <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000a18:	4b15      	ldr	r3, [pc, #84]	; (1a000a70 <Chip_Clock_GetMainPLLHz+0x68>)
1a000a1a:	681b      	ldr	r3, [r3, #0]
1a000a1c:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000a1e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000a20:	f013 0f01 	tst.w	r3, #1
1a000a24:	d020      	beq.n	1a000a68 <Chip_Clock_GetMainPLLHz+0x60>
   msel = (PLLReg >> 16) & 0xFF;
1a000a26:	f3c4 4307 	ubfx	r3, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000a2a:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000a2e:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a000a32:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000a36:	3301      	adds	r3, #1
   n = nsel + 1;
1a000a38:	3201      	adds	r2, #1
   p = ptab[psel];
1a000a3a:	f10d 0c08 	add.w	ip, sp, #8
1a000a3e:	4461      	add	r1, ip
1a000a40:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000a44:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000a48:	d108      	bne.n	1a000a5c <Chip_Clock_GetMainPLLHz+0x54>
1a000a4a:	b93d      	cbnz	r5, 1a000a5c <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000a4c:	0049      	lsls	r1, r1, #1
1a000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
1a000a52:	fbb0 f0f2 	udiv	r0, r0, r2
1a000a56:	fb00 f003 	mul.w	r0, r0, r3
1a000a5a:	e003      	b.n	1a000a64 <Chip_Clock_GetMainPLLHz+0x5c>
       return m * (freq / n);
1a000a5c:	fbb0 f0f2 	udiv	r0, r0, r2
1a000a60:	fb03 f000 	mul.w	r0, r3, r0
}
1a000a64:	b003      	add	sp, #12
1a000a66:	bd30      	pop	{r4, r5, pc}
       return 0;
1a000a68:	2000      	movs	r0, #0
1a000a6a:	e7fb      	b.n	1a000a64 <Chip_Clock_GetMainPLLHz+0x5c>
1a000a6c:	40050000 	.word	0x40050000
1a000a70:	1a001100 	.word	0x1a001100

1a000a74 <Chip_Clock_GetDivRate>:
{
1a000a74:	b538      	push	{r3, r4, r5, lr}
1a000a76:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a000a78:	4608      	mov	r0, r1
1a000a7a:	f7ff ff0d 	bl	1a000898 <Chip_Clock_GetDividerSource>
1a000a7e:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000a80:	4620      	mov	r0, r4
1a000a82:	f7ff ff17 	bl	1a0008b4 <Chip_Clock_GetDividerDivisor>
1a000a86:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000a88:	4628      	mov	r0, r5
1a000a8a:	f7ff ff21 	bl	1a0008d0 <Chip_Clock_GetClockInputHz>
1a000a8e:	3401      	adds	r4, #1
}
1a000a90:	fbb0 f0f4 	udiv	r0, r0, r4
1a000a94:	bd38      	pop	{r3, r4, r5, pc}
1a000a96:	Address 0x1a000a96 is out of bounds.


1a000a98 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000a98:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000a9a:	f100 0416 	add.w	r4, r0, #22
1a000a9e:	00a4      	lsls	r4, r4, #2
1a000aa0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000aa4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000aa8:	6864      	ldr	r4, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a000aaa:	281b      	cmp	r0, #27
1a000aac:	d813      	bhi.n	1a000ad6 <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a000aae:	2911      	cmp	r1, #17
1a000ab0:	d01a      	beq.n	1a000ae8 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000ab2:	4d0e      	ldr	r5, [pc, #56]	; (1a000aec <Chip_Clock_SetBaseClock+0x54>)
1a000ab4:	4025      	ands	r5, r4

           if (autoblocken) {
1a000ab6:	b10a      	cbz	r2, 1a000abc <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000ab8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
           }
           if (powerdn) {
1a000abc:	b10b      	cbz	r3, 1a000ac2 <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000abe:	f045 0501 	orr.w	r5, r5, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000ac2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000ac6:	3016      	adds	r0, #22
1a000ac8:	0080      	lsls	r0, r0, #2
1a000aca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ace:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ad2:	6045      	str	r5, [r0, #4]
1a000ad4:	e008      	b.n	1a000ae8 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000ad6:	f044 0401 	orr.w	r4, r4, #1
1a000ada:	3016      	adds	r0, #22
1a000adc:	0080      	lsls	r0, r0, #2
1a000ade:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ae2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ae6:	6044      	str	r4, [r0, #4]
   }
}
1a000ae8:	bc30      	pop	{r4, r5}
1a000aea:	4770      	bx	lr
1a000aec:	e0fff7fe 	.word	0xe0fff7fe

1a000af0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000af0:	281b      	cmp	r0, #27
1a000af2:	d80c      	bhi.n	1a000b0e <Chip_Clock_GetBaseClock+0x1e>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000af4:	3016      	adds	r0, #22
1a000af6:	0080      	lsls	r0, r0, #2
1a000af8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000afc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000b00:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000b02:	f010 0f01 	tst.w	r0, #1
1a000b06:	d104      	bne.n	1a000b12 <Chip_Clock_GetBaseClock+0x22>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000b08:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000b0c:	4770      	bx	lr
       return CLKINPUT_PD;
1a000b0e:	2011      	movs	r0, #17
1a000b10:	4770      	bx	lr
       return CLKINPUT_PD;
1a000b12:	2011      	movs	r0, #17
}
1a000b14:	4770      	bx	lr

1a000b16 <Chip_Clock_GetBaseClocktHz>:
{
1a000b16:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000b18:	f7ff ffea 	bl	1a000af0 <Chip_Clock_GetBaseClock>
1a000b1c:	f7ff fed8 	bl	1a0008d0 <Chip_Clock_GetClockInputHz>
}
1a000b20:	bd08      	pop	{r3, pc}
1a000b22:	Address 0x1a000b22 is out of bounds.


1a000b24 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000b24:	b971      	cbnz	r1, 1a000b44 <Chip_Clock_EnableOpts+0x20>
   uint32_t reg = 1;
1a000b26:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000b28:	b10a      	cbz	r2, 1a000b2e <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000b2a:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000b2e:	2b02      	cmp	r3, #2
1a000b30:	d00a      	beq.n	1a000b48 <Chip_Clock_EnableOpts+0x24>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000b32:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000b36:	d30a      	bcc.n	1a000b4e <Chip_Clock_EnableOpts+0x2a>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000b38:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000b3c:	4b06      	ldr	r3, [pc, #24]	; (1a000b58 <Chip_Clock_EnableOpts+0x34>)
1a000b3e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000b42:	4770      	bx	lr
       reg |= (1 << 1);
1a000b44:	2103      	movs	r1, #3
1a000b46:	e7ef      	b.n	1a000b28 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000b48:	f041 0120 	orr.w	r1, r1, #32
1a000b4c:	e7f1      	b.n	1a000b32 <Chip_Clock_EnableOpts+0xe>
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000b4e:	3020      	adds	r0, #32
1a000b50:	4b02      	ldr	r3, [pc, #8]	; (1a000b5c <Chip_Clock_EnableOpts+0x38>)
1a000b52:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
   }
}
1a000b56:	4770      	bx	lr
1a000b58:	40052000 	.word	0x40052000
1a000b5c:	40051000 	.word	0x40051000

1a000b60 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000b60:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000b62:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000b66:	d309      	bcc.n	1a000b7c <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000b68:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000b6c:	4a0d      	ldr	r2, [pc, #52]	; (1a000ba4 <Chip_Clock_GetRate+0x44>)
1a000b6e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000b72:	f014 0f01 	tst.w	r4, #1
1a000b76:	d107      	bne.n	1a000b88 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000b78:	2000      	movs	r0, #0
   }

   return rate;
}
1a000b7a:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000b7c:	f100 0320 	add.w	r3, r0, #32
1a000b80:	4a09      	ldr	r2, [pc, #36]	; (1a000ba8 <Chip_Clock_GetRate+0x48>)
1a000b82:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000b86:	e7f4      	b.n	1a000b72 <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000b88:	f7ff fe3a 	bl	1a000800 <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000b8c:	f7ff ffc3 	bl	1a000b16 <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000b90:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000b94:	d103      	bne.n	1a000b9e <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000b96:	2301      	movs	r3, #1
       rate = rate / div;
1a000b98:	fbb0 f0f3 	udiv	r0, r0, r3
1a000b9c:	e7ed      	b.n	1a000b7a <Chip_Clock_GetRate+0x1a>
           div = 2;/* No other dividers supported */
1a000b9e:	2302      	movs	r3, #2
1a000ba0:	e7fa      	b.n	1a000b98 <Chip_Clock_GetRate+0x38>
1a000ba2:	bf00      	nop
1a000ba4:	40052000 	.word	0x40052000
1a000ba8:	40051000 	.word	0x40051000

1a000bac <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000bac:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000bae:	f7ff fc73 	bl	1a000498 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000bb2:	f000 f853 	bl	1a000c5c <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a000bb6:	bd08      	pop	{r3, pc}

1a000bb8 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000bb8:	2300      	movs	r3, #0
1a000bba:	2b17      	cmp	r3, #23
1a000bbc:	d812      	bhi.n	1a000be4 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000bbe:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000bc0:	4a09      	ldr	r2, [pc, #36]	; (1a000be8 <Board_SetupMuxing+0x30>)
1a000bc2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000bc6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000bca:	784a      	ldrb	r2, [r1, #1]
1a000bcc:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000bce:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000bd2:	4906      	ldr	r1, [pc, #24]	; (1a000bec <Board_SetupMuxing+0x34>)
1a000bd4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000bd8:	3301      	adds	r3, #1
1a000bda:	2b17      	cmp	r3, #23
1a000bdc:	d9f0      	bls.n	1a000bc0 <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000bde:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000be2:	4770      	bx	lr
1a000be4:	4770      	bx	lr
1a000be6:	bf00      	nop
1a000be8:	1a001184 	.word	0x1a001184
1a000bec:	40086000 	.word	0x40086000

1a000bf0 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000bf0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000bf2:	4a17      	ldr	r2, [pc, #92]	; (1a000c50 <Board_SetupClocking+0x60>)
1a000bf4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000bfc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000c00:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000c04:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000c0c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000c10:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000c14:	2201      	movs	r2, #1
1a000c16:	490f      	ldr	r1, [pc, #60]	; (1a000c54 <Board_SetupClocking+0x64>)
1a000c18:	2006      	movs	r0, #6
1a000c1a:	f7ff fb91 	bl	1a000340 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000c1e:	2400      	movs	r4, #0
1a000c20:	2c02      	cmp	r4, #2
1a000c22:	d80b      	bhi.n	1a000c3c <Board_SetupClocking+0x4c>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000c24:	480c      	ldr	r0, [pc, #48]	; (1a000c58 <Board_SetupClocking+0x68>)
1a000c26:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000c2a:	78cb      	ldrb	r3, [r1, #3]
1a000c2c:	788a      	ldrb	r2, [r1, #2]
1a000c2e:	7849      	ldrb	r1, [r1, #1]
1a000c30:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000c34:	f7ff ff30 	bl	1a000a98 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000c38:	3401      	adds	r4, #1
1a000c3a:	e7f1      	b.n	1a000c20 <Board_SetupClocking+0x30>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000c3c:	4b04      	ldr	r3, [pc, #16]	; (1a000c50 <Board_SetupClocking+0x60>)
1a000c3e:	685a      	ldr	r2, [r3, #4]
1a000c40:	f022 020c 	bic.w	r2, r2, #12
1a000c44:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000c46:	685a      	ldr	r2, [r3, #4]
1a000c48:	f042 0203 	orr.w	r2, r2, #3
1a000c4c:	605a      	str	r2, [r3, #4]
}
1a000c4e:	bd10      	pop	{r4, pc}
1a000c50:	40043000 	.word	0x40043000
1a000c54:	0c28cb00 	.word	0x0c28cb00
1a000c58:	1a001178 	.word	0x1a001178

1a000c5c <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000c5c:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000c5e:	f7ff ffab 	bl	1a000bb8 <Board_SetupMuxing>
   Board_SetupClocking();
1a000c62:	f7ff ffc5 	bl	1a000bf0 <Board_SetupClocking>
}
1a000c66:	bd08      	pop	{r3, pc}

1a000c68 <ResetISR>:
void ResetISR(void) {
1a000c68:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a000c6a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000c6c:	4b16      	ldr	r3, [pc, #88]	; (1a000cc8 <ResetISR+0x60>)
1a000c6e:	4a17      	ldr	r2, [pc, #92]	; (1a000ccc <ResetISR+0x64>)
1a000c70:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000c72:	3304      	adds	r3, #4
1a000c74:	4a16      	ldr	r2, [pc, #88]	; (1a000cd0 <ResetISR+0x68>)
1a000c76:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c78:	2300      	movs	r3, #0
1a000c7a:	e005      	b.n	1a000c88 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000c7c:	4a15      	ldr	r2, [pc, #84]	; (1a000cd4 <ResetISR+0x6c>)
1a000c7e:	f04f 31ff 	mov.w	r1, #4294967295
1a000c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c86:	3301      	adds	r3, #1
1a000c88:	2b07      	cmp	r3, #7
1a000c8a:	d9f7      	bls.n	1a000c7c <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a000c8c:	b662      	cpsie	i
    SystemInit();
1a000c8e:	f7ff ff8d 	bl	1a000bac <SystemInit>
    SectionTableAddr = &__data_section_table;
1a000c92:	4b11      	ldr	r3, [pc, #68]	; (1a000cd8 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000c94:	e007      	b.n	1a000ca6 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a000c96:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000c9a:	689a      	ldr	r2, [r3, #8]
1a000c9c:	6859      	ldr	r1, [r3, #4]
1a000c9e:	6818      	ldr	r0, [r3, #0]
1a000ca0:	f7ff fa74 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a000ca4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000ca6:	4a0d      	ldr	r2, [pc, #52]	; (1a000cdc <ResetISR+0x74>)
1a000ca8:	4293      	cmp	r3, r2
1a000caa:	d3f4      	bcc.n	1a000c96 <ResetISR+0x2e>
1a000cac:	e006      	b.n	1a000cbc <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a000cae:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000cb0:	6859      	ldr	r1, [r3, #4]
1a000cb2:	f854 0b08 	ldr.w	r0, [r4], #8
1a000cb6:	f7ff fa78 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a000cba:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000cbc:	4a08      	ldr	r2, [pc, #32]	; (1a000ce0 <ResetISR+0x78>)
1a000cbe:	4293      	cmp	r3, r2
1a000cc0:	d3f5      	bcc.n	1a000cae <ResetISR+0x46>
    main();
1a000cc2:	f7ff fb25 	bl	1a000310 <main>
        ;
1a000cc6:	e7fe      	b.n	1a000cc6 <ResetISR+0x5e>
1a000cc8:	40053100 	.word	0x40053100
1a000ccc:	10df1000 	.word	0x10df1000
1a000cd0:	01dff7ff 	.word	0x01dff7ff
1a000cd4:	e000e280 	.word	0xe000e280
1a000cd8:	1a000114 	.word	0x1a000114
1a000cdc:	1a000150 	.word	0x1a000150
1a000ce0:	1a000178 	.word	0x1a000178

1a000ce4 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000ce4:	2200      	movs	r2, #0
1a000ce6:	2a05      	cmp	r2, #5
1a000ce8:	d819      	bhi.n	1a000d1e <Board_LED_Init+0x3a>
{
1a000cea:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000cec:	490c      	ldr	r1, [pc, #48]	; (1a000d20 <Board_LED_Init+0x3c>)
1a000cee:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000cf2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000cf6:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000cf8:	4b0a      	ldr	r3, [pc, #40]	; (1a000d24 <Board_LED_Init+0x40>)
1a000cfa:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000cfe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000d02:	2001      	movs	r0, #1
1a000d04:	40a0      	lsls	r0, r4
1a000d06:	4301      	orrs	r1, r0
1a000d08:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a000d0c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000d10:	2100      	movs	r1, #0
1a000d12:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000d14:	3201      	adds	r2, #1
1a000d16:	2a05      	cmp	r2, #5
1a000d18:	d9e8      	bls.n	1a000cec <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000d1a:	bc70      	pop	{r4, r5, r6}
1a000d1c:	4770      	bx	lr
1a000d1e:	4770      	bx	lr
1a000d20:	1a0011ec 	.word	0x1a0011ec
1a000d24:	400f4000 	.word	0x400f4000

1a000d28 <Board_UART_Init>:
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d28:	4b03      	ldr	r3, [pc, #12]	; (1a000d38 <Board_UART_Init+0x10>)
1a000d2a:	2212      	movs	r2, #18
1a000d2c:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000d30:	22d1      	movs	r2, #209	; 0xd1
1a000d32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
1a000d36:	4770      	bx	lr
1a000d38:	40086000 	.word	0x40086000

1a000d3c <Board_Debug_Init>:
{
1a000d3c:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a000d3e:	4c08      	ldr	r4, [pc, #32]	; (1a000d60 <Board_Debug_Init+0x24>)
1a000d40:	4620      	mov	r0, r4
1a000d42:	f7ff fff1 	bl	1a000d28 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a000d46:	4620      	mov	r0, r4
1a000d48:	f7ff fbf0 	bl	1a00052c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000d4c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000d50:	4620      	mov	r0, r4
1a000d52:	f7ff fc15 	bl	1a000580 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a000d56:	2303      	movs	r3, #3
1a000d58:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000d5a:	2301      	movs	r3, #1
1a000d5c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
1a000d5e:	bd10      	pop	{r4, pc}
1a000d60:	400c1000 	.word	0x400c1000

1a000d64 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a000d64:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a000d66:	f7ff ffe9 	bl	1a000d3c <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000d6a:	4806      	ldr	r0, [pc, #24]	; (1a000d84 <Board_Init+0x20>)
1a000d6c:	f7ff fc76 	bl	1a00065c <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a000d70:	f7ff ffb8 	bl	1a000ce4 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a000d74:	4a04      	ldr	r2, [pc, #16]	; (1a000d88 <Board_Init+0x24>)
1a000d76:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000d7a:	f043 0304 	orr.w	r3, r3, #4
1a000d7e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a000d82:	bd08      	pop	{r3, pc}
1a000d84:	400f4000 	.word	0x400f4000
1a000d88:	40043000 	.word	0x40043000

1a000d8c <asmSum>:
 *	En r0 se cargara firstOperand y en r1 se carga secondOperand. Luego el valor devuelto estara en r0 (si son 32 bits).
 *	Si el resultado que retorna es en 64 bits, usa r0 y r1.
*/

asmSum:
    push {lr}  /* guardamos la direccion de retorno en la pila */
1a000d8c:	b500      	push	{lr}
	add op1, op2 /* r0 = r0 + r1 */
1a000d8e:	4408      	add	r0, r1
	pop {pc}   /* retorno */
1a000d90:	bd00      	pop	{pc}
1a000d92:	Address 0x1a000d92 is out of bounds.


1a000d94 <__aeabi_uldivmod>:
1a000d94:	b953      	cbnz	r3, 1a000dac <__aeabi_uldivmod+0x18>
1a000d96:	b94a      	cbnz	r2, 1a000dac <__aeabi_uldivmod+0x18>
1a000d98:	2900      	cmp	r1, #0
1a000d9a:	bf08      	it	eq
1a000d9c:	2800      	cmpeq	r0, #0
1a000d9e:	bf1c      	itt	ne
1a000da0:	f04f 31ff 	movne.w	r1, #4294967295
1a000da4:	f04f 30ff 	movne.w	r0, #4294967295
1a000da8:	f000 b974 	b.w	1a001094 <__aeabi_idiv0>
1a000dac:	f1ad 0c08 	sub.w	ip, sp, #8
1a000db0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a000db4:	f000 f806 	bl	1a000dc4 <__udivmoddi4>
1a000db8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a000dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000dc0:	b004      	add	sp, #16
1a000dc2:	4770      	bx	lr

1a000dc4 <__udivmoddi4>:
1a000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000dc8:	9e08      	ldr	r6, [sp, #32]
1a000dca:	4604      	mov	r4, r0
1a000dcc:	4688      	mov	r8, r1
1a000dce:	2b00      	cmp	r3, #0
1a000dd0:	f040 8085 	bne.w	1a000ede <__udivmoddi4+0x11a>
1a000dd4:	428a      	cmp	r2, r1
1a000dd6:	4615      	mov	r5, r2
1a000dd8:	d948      	bls.n	1a000e6c <__udivmoddi4+0xa8>
1a000dda:	fab2 f282 	clz	r2, r2
1a000dde:	b14a      	cbz	r2, 1a000df4 <__udivmoddi4+0x30>
1a000de0:	f1c2 0720 	rsb	r7, r2, #32
1a000de4:	fa01 f302 	lsl.w	r3, r1, r2
1a000de8:	fa20 f707 	lsr.w	r7, r0, r7
1a000dec:	4095      	lsls	r5, r2
1a000dee:	ea47 0803 	orr.w	r8, r7, r3
1a000df2:	4094      	lsls	r4, r2
1a000df4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a000df8:	0c23      	lsrs	r3, r4, #16
1a000dfa:	fbb8 f7fe 	udiv	r7, r8, lr
1a000dfe:	fa1f fc85 	uxth.w	ip, r5
1a000e02:	fb0e 8817 	mls	r8, lr, r7, r8
1a000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a000e0a:	fb07 f10c 	mul.w	r1, r7, ip
1a000e0e:	4299      	cmp	r1, r3
1a000e10:	d909      	bls.n	1a000e26 <__udivmoddi4+0x62>
1a000e12:	18eb      	adds	r3, r5, r3
1a000e14:	f107 30ff 	add.w	r0, r7, #4294967295
1a000e18:	f080 80e3 	bcs.w	1a000fe2 <__udivmoddi4+0x21e>
1a000e1c:	4299      	cmp	r1, r3
1a000e1e:	f240 80e0 	bls.w	1a000fe2 <__udivmoddi4+0x21e>
1a000e22:	3f02      	subs	r7, #2
1a000e24:	442b      	add	r3, r5
1a000e26:	1a5b      	subs	r3, r3, r1
1a000e28:	b2a4      	uxth	r4, r4
1a000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
1a000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
1a000e32:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a000e36:	fb00 fc0c 	mul.w	ip, r0, ip
1a000e3a:	45a4      	cmp	ip, r4
1a000e3c:	d909      	bls.n	1a000e52 <__udivmoddi4+0x8e>
1a000e3e:	192c      	adds	r4, r5, r4
1a000e40:	f100 33ff 	add.w	r3, r0, #4294967295
1a000e44:	f080 80cb 	bcs.w	1a000fde <__udivmoddi4+0x21a>
1a000e48:	45a4      	cmp	ip, r4
1a000e4a:	f240 80c8 	bls.w	1a000fde <__udivmoddi4+0x21a>
1a000e4e:	3802      	subs	r0, #2
1a000e50:	442c      	add	r4, r5
1a000e52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a000e56:	eba4 040c 	sub.w	r4, r4, ip
1a000e5a:	2700      	movs	r7, #0
1a000e5c:	b11e      	cbz	r6, 1a000e66 <__udivmoddi4+0xa2>
1a000e5e:	40d4      	lsrs	r4, r2
1a000e60:	2300      	movs	r3, #0
1a000e62:	e9c6 4300 	strd	r4, r3, [r6]
1a000e66:	4639      	mov	r1, r7
1a000e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000e6c:	2a00      	cmp	r2, #0
1a000e6e:	d053      	beq.n	1a000f18 <__udivmoddi4+0x154>
1a000e70:	fab2 f282 	clz	r2, r2
1a000e74:	2a00      	cmp	r2, #0
1a000e76:	f040 80b6 	bne.w	1a000fe6 <__udivmoddi4+0x222>
1a000e7a:	1b49      	subs	r1, r1, r5
1a000e7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a000e80:	fa1f f885 	uxth.w	r8, r5
1a000e84:	2701      	movs	r7, #1
1a000e86:	fbb1 fcfe 	udiv	ip, r1, lr
1a000e8a:	0c23      	lsrs	r3, r4, #16
1a000e8c:	fb0e 111c 	mls	r1, lr, ip, r1
1a000e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000e94:	fb08 f10c 	mul.w	r1, r8, ip
1a000e98:	4299      	cmp	r1, r3
1a000e9a:	d907      	bls.n	1a000eac <__udivmoddi4+0xe8>
1a000e9c:	18eb      	adds	r3, r5, r3
1a000e9e:	f10c 30ff 	add.w	r0, ip, #4294967295
1a000ea2:	d202      	bcs.n	1a000eaa <__udivmoddi4+0xe6>
1a000ea4:	4299      	cmp	r1, r3
1a000ea6:	f200 80ec 	bhi.w	1a001082 <__udivmoddi4+0x2be>
1a000eaa:	4684      	mov	ip, r0
1a000eac:	1a59      	subs	r1, r3, r1
1a000eae:	b2a3      	uxth	r3, r4
1a000eb0:	fbb1 f0fe 	udiv	r0, r1, lr
1a000eb4:	fb0e 1410 	mls	r4, lr, r0, r1
1a000eb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a000ebc:	fb08 f800 	mul.w	r8, r8, r0
1a000ec0:	45a0      	cmp	r8, r4
1a000ec2:	d907      	bls.n	1a000ed4 <__udivmoddi4+0x110>
1a000ec4:	192c      	adds	r4, r5, r4
1a000ec6:	f100 33ff 	add.w	r3, r0, #4294967295
1a000eca:	d202      	bcs.n	1a000ed2 <__udivmoddi4+0x10e>
1a000ecc:	45a0      	cmp	r8, r4
1a000ece:	f200 80dc 	bhi.w	1a00108a <__udivmoddi4+0x2c6>
1a000ed2:	4618      	mov	r0, r3
1a000ed4:	eba4 0408 	sub.w	r4, r4, r8
1a000ed8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a000edc:	e7be      	b.n	1a000e5c <__udivmoddi4+0x98>
1a000ede:	428b      	cmp	r3, r1
1a000ee0:	d908      	bls.n	1a000ef4 <__udivmoddi4+0x130>
1a000ee2:	2e00      	cmp	r6, #0
1a000ee4:	d078      	beq.n	1a000fd8 <__udivmoddi4+0x214>
1a000ee6:	2700      	movs	r7, #0
1a000ee8:	e9c6 0100 	strd	r0, r1, [r6]
1a000eec:	4638      	mov	r0, r7
1a000eee:	4639      	mov	r1, r7
1a000ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000ef4:	fab3 f783 	clz	r7, r3
1a000ef8:	b97f      	cbnz	r7, 1a000f1a <__udivmoddi4+0x156>
1a000efa:	428b      	cmp	r3, r1
1a000efc:	d302      	bcc.n	1a000f04 <__udivmoddi4+0x140>
1a000efe:	4282      	cmp	r2, r0
1a000f00:	f200 80bd 	bhi.w	1a00107e <__udivmoddi4+0x2ba>
1a000f04:	1a84      	subs	r4, r0, r2
1a000f06:	eb61 0303 	sbc.w	r3, r1, r3
1a000f0a:	2001      	movs	r0, #1
1a000f0c:	4698      	mov	r8, r3
1a000f0e:	2e00      	cmp	r6, #0
1a000f10:	d0a9      	beq.n	1a000e66 <__udivmoddi4+0xa2>
1a000f12:	e9c6 4800 	strd	r4, r8, [r6]
1a000f16:	e7a6      	b.n	1a000e66 <__udivmoddi4+0xa2>
1a000f18:	deff      	udf	#255	; 0xff
1a000f1a:	f1c7 0520 	rsb	r5, r7, #32
1a000f1e:	40bb      	lsls	r3, r7
1a000f20:	fa22 fc05 	lsr.w	ip, r2, r5
1a000f24:	ea4c 0c03 	orr.w	ip, ip, r3
1a000f28:	fa01 f407 	lsl.w	r4, r1, r7
1a000f2c:	fa20 f805 	lsr.w	r8, r0, r5
1a000f30:	fa21 f305 	lsr.w	r3, r1, r5
1a000f34:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a000f38:	ea48 0404 	orr.w	r4, r8, r4
1a000f3c:	fbb3 f9fe 	udiv	r9, r3, lr
1a000f40:	0c21      	lsrs	r1, r4, #16
1a000f42:	fb0e 3319 	mls	r3, lr, r9, r3
1a000f46:	fa1f f88c 	uxth.w	r8, ip
1a000f4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a000f4e:	fb09 fa08 	mul.w	sl, r9, r8
1a000f52:	459a      	cmp	sl, r3
1a000f54:	fa02 f207 	lsl.w	r2, r2, r7
1a000f58:	fa00 f107 	lsl.w	r1, r0, r7
1a000f5c:	d90b      	bls.n	1a000f76 <__udivmoddi4+0x1b2>
1a000f5e:	eb1c 0303 	adds.w	r3, ip, r3
1a000f62:	f109 30ff 	add.w	r0, r9, #4294967295
1a000f66:	f080 8088 	bcs.w	1a00107a <__udivmoddi4+0x2b6>
1a000f6a:	459a      	cmp	sl, r3
1a000f6c:	f240 8085 	bls.w	1a00107a <__udivmoddi4+0x2b6>
1a000f70:	f1a9 0902 	sub.w	r9, r9, #2
1a000f74:	4463      	add	r3, ip
1a000f76:	eba3 030a 	sub.w	r3, r3, sl
1a000f7a:	b2a4      	uxth	r4, r4
1a000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
1a000f80:	fb0e 3310 	mls	r3, lr, r0, r3
1a000f84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a000f88:	fb00 f808 	mul.w	r8, r0, r8
1a000f8c:	45a0      	cmp	r8, r4
1a000f8e:	d908      	bls.n	1a000fa2 <__udivmoddi4+0x1de>
1a000f90:	eb1c 0404 	adds.w	r4, ip, r4
1a000f94:	f100 33ff 	add.w	r3, r0, #4294967295
1a000f98:	d26b      	bcs.n	1a001072 <__udivmoddi4+0x2ae>
1a000f9a:	45a0      	cmp	r8, r4
1a000f9c:	d969      	bls.n	1a001072 <__udivmoddi4+0x2ae>
1a000f9e:	3802      	subs	r0, #2
1a000fa0:	4464      	add	r4, ip
1a000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a000fa6:	eba4 0408 	sub.w	r4, r4, r8
1a000faa:	fba0 8902 	umull	r8, r9, r0, r2
1a000fae:	454c      	cmp	r4, r9
1a000fb0:	46c6      	mov	lr, r8
1a000fb2:	464b      	mov	r3, r9
1a000fb4:	d354      	bcc.n	1a001060 <__udivmoddi4+0x29c>
1a000fb6:	d051      	beq.n	1a00105c <__udivmoddi4+0x298>
1a000fb8:	2e00      	cmp	r6, #0
1a000fba:	d069      	beq.n	1a001090 <__udivmoddi4+0x2cc>
1a000fbc:	ebb1 020e 	subs.w	r2, r1, lr
1a000fc0:	eb64 0403 	sbc.w	r4, r4, r3
1a000fc4:	fa04 f505 	lsl.w	r5, r4, r5
1a000fc8:	fa22 f307 	lsr.w	r3, r2, r7
1a000fcc:	40fc      	lsrs	r4, r7
1a000fce:	431d      	orrs	r5, r3
1a000fd0:	e9c6 5400 	strd	r5, r4, [r6]
1a000fd4:	2700      	movs	r7, #0
1a000fd6:	e746      	b.n	1a000e66 <__udivmoddi4+0xa2>
1a000fd8:	4637      	mov	r7, r6
1a000fda:	4630      	mov	r0, r6
1a000fdc:	e743      	b.n	1a000e66 <__udivmoddi4+0xa2>
1a000fde:	4618      	mov	r0, r3
1a000fe0:	e737      	b.n	1a000e52 <__udivmoddi4+0x8e>
1a000fe2:	4607      	mov	r7, r0
1a000fe4:	e71f      	b.n	1a000e26 <__udivmoddi4+0x62>
1a000fe6:	f1c2 0320 	rsb	r3, r2, #32
1a000fea:	fa20 f703 	lsr.w	r7, r0, r3
1a000fee:	4095      	lsls	r5, r2
1a000ff0:	fa01 f002 	lsl.w	r0, r1, r2
1a000ff4:	fa21 f303 	lsr.w	r3, r1, r3
1a000ff8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a000ffc:	4338      	orrs	r0, r7
1a000ffe:	0c01      	lsrs	r1, r0, #16
1a001000:	fbb3 f7fe 	udiv	r7, r3, lr
1a001004:	fa1f f885 	uxth.w	r8, r5
1a001008:	fb0e 3317 	mls	r3, lr, r7, r3
1a00100c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001010:	fb07 f308 	mul.w	r3, r7, r8
1a001014:	428b      	cmp	r3, r1
1a001016:	fa04 f402 	lsl.w	r4, r4, r2
1a00101a:	d907      	bls.n	1a00102c <__udivmoddi4+0x268>
1a00101c:	1869      	adds	r1, r5, r1
1a00101e:	f107 3cff 	add.w	ip, r7, #4294967295
1a001022:	d228      	bcs.n	1a001076 <__udivmoddi4+0x2b2>
1a001024:	428b      	cmp	r3, r1
1a001026:	d926      	bls.n	1a001076 <__udivmoddi4+0x2b2>
1a001028:	3f02      	subs	r7, #2
1a00102a:	4429      	add	r1, r5
1a00102c:	1acb      	subs	r3, r1, r3
1a00102e:	b281      	uxth	r1, r0
1a001030:	fbb3 f0fe 	udiv	r0, r3, lr
1a001034:	fb0e 3310 	mls	r3, lr, r0, r3
1a001038:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00103c:	fb00 f308 	mul.w	r3, r0, r8
1a001040:	428b      	cmp	r3, r1
1a001042:	d907      	bls.n	1a001054 <__udivmoddi4+0x290>
1a001044:	1869      	adds	r1, r5, r1
1a001046:	f100 3cff 	add.w	ip, r0, #4294967295
1a00104a:	d210      	bcs.n	1a00106e <__udivmoddi4+0x2aa>
1a00104c:	428b      	cmp	r3, r1
1a00104e:	d90e      	bls.n	1a00106e <__udivmoddi4+0x2aa>
1a001050:	3802      	subs	r0, #2
1a001052:	4429      	add	r1, r5
1a001054:	1ac9      	subs	r1, r1, r3
1a001056:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00105a:	e714      	b.n	1a000e86 <__udivmoddi4+0xc2>
1a00105c:	4541      	cmp	r1, r8
1a00105e:	d2ab      	bcs.n	1a000fb8 <__udivmoddi4+0x1f4>
1a001060:	ebb8 0e02 	subs.w	lr, r8, r2
1a001064:	eb69 020c 	sbc.w	r2, r9, ip
1a001068:	3801      	subs	r0, #1
1a00106a:	4613      	mov	r3, r2
1a00106c:	e7a4      	b.n	1a000fb8 <__udivmoddi4+0x1f4>
1a00106e:	4660      	mov	r0, ip
1a001070:	e7f0      	b.n	1a001054 <__udivmoddi4+0x290>
1a001072:	4618      	mov	r0, r3
1a001074:	e795      	b.n	1a000fa2 <__udivmoddi4+0x1de>
1a001076:	4667      	mov	r7, ip
1a001078:	e7d8      	b.n	1a00102c <__udivmoddi4+0x268>
1a00107a:	4681      	mov	r9, r0
1a00107c:	e77b      	b.n	1a000f76 <__udivmoddi4+0x1b2>
1a00107e:	4638      	mov	r0, r7
1a001080:	e745      	b.n	1a000f0e <__udivmoddi4+0x14a>
1a001082:	f1ac 0c02 	sub.w	ip, ip, #2
1a001086:	442b      	add	r3, r5
1a001088:	e710      	b.n	1a000eac <__udivmoddi4+0xe8>
1a00108a:	3802      	subs	r0, #2
1a00108c:	442c      	add	r4, r5
1a00108e:	e721      	b.n	1a000ed4 <__udivmoddi4+0x110>
1a001090:	4637      	mov	r7, r6
1a001092:	e6e8      	b.n	1a000e66 <__udivmoddi4+0xa2>

1a001094 <__aeabi_idiv0>:
1a001094:	4770      	bx	lr
1a001096:	bf00      	nop

1a001098 <memset>:
1a001098:	4402      	add	r2, r0
1a00109a:	4603      	mov	r3, r0
1a00109c:	4293      	cmp	r3, r2
1a00109e:	d100      	bne.n	1a0010a2 <memset+0xa>
1a0010a0:	4770      	bx	lr
1a0010a2:	f803 1b01 	strb.w	r1, [r3], #1
1a0010a6:	e7f9      	b.n	1a00109c <memset+0x4>

1a0010a8 <InitClkStates>:
1a0010a8:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0010b8:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0010c8:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0010d8:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0010e8:	111a 0001 111b 0001                         ........

1a0010f0 <UART_BClock>:
1a0010f0:	01c2 01a2 0182 0162                         ......b.

1a0010f8 <UART_PClock>:
1a0010f8:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a001108:	00ff 0000                                   ....

1a00110c <periph_to_base>:
1a00110c:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a00111c:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a00112c:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a00113c:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a00114c:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a00115c:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a00116c:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001178 <InitClkStates>:
1a001178:	0308 0001 0307 0001 0f01 0101               ............

1a001184 <pinmuxing>:
1a001184:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a001194:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a0011a4:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a0011b4:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a0011c4:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a0011d4:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a0011e4 <ExtRateIn>:
1a0011e4:	0000 0000                                   ....

1a0011e8 <OscRateIn>:
1a0011e8:	1b00 00b7                                   ....

1a0011ec <gpioLEDBits>:
1a0011ec:	0e00 0b01 0c01 0005 0105 0205               ............
