
out/arquitecturaDeMicroprocesadores.elf:     file format elf32-littlearm
out/arquitecturaDeMicroprocesadores.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0015c5

Program Header:
0x70000001 off    0x00011db0 vaddr 0x1a001db0 paddr 0x1a001db0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010064 vaddr 0x10000064 paddr 0x10000064 align 2**16
         filesz 0x00000000 memsz 0x00000028 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001db8 memsz 0x00001db8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001db8 align 2**16
         filesz 0x00000064 memsz 0x00000064 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001db0  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  10000000  1a001db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020064  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020064  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020064  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
  6 .bss          00000028  10000064  10000064  00010064  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020064  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020064  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020064  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001db0  1a001db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020064  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020064  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020064  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020064  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
 17 .noinit       00000000  1000008c  1000008c  00020064  2**2
                  CONTENTS
 18 .debug_info   0000a951  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00001c51  00000000  00000000  0002a9b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000006d0  00000000  00000000  0002c608  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 000005f8  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00007dd3  00000000  00000000  0002d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00006ce1  00000000  00000000  000350a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0001c336  00000000  00000000  0003bd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000068  00000000  00000000  000580ba  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000032  00000000  00000000  00058122  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00001b04  00000000  00000000  00058154  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000064 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001db0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000008c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
1a000300 l     F .text	00000054 NVIC_SetPriority
1a000354 l     F .text	00000044 SysTick_Config
10000064 l     O .bss	00000004 s_ticks
1a000398 l     F .text	0000002c Inicio
1a0003e0 l     F .text	0000002c Suma
1a00040c l     F .text	0000001a LlamandoAMalloc
1a000426 l     F .text	00000064 PrivilegiosSVC
00000000 l    df *ABS*	00000000 c_func.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0004f4 l     F .text	00000020 Chip_Clock_DisableMainPLL
1a000514 l     F .text	00000044 Chip_Clock_SetupMainPLL
1a000558 l     F .text	00000024 Chip_Clock_MainPLLLocked
1a001c60 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000764 l     F .text	0000001a Chip_UART_TXDisable
1a00077e l     F .text	0000001c Chip_UART_SetupFIFOS
1a00079a l     F .text	0000001c Chip_UART_ConfigData
1a0007b6 l     F .text	00000020 Chip_UART_EnableDivisorAccess
1a0007d6 l     F .text	00000020 Chip_UART_DisableDivisorAccess
1a0007f6 l     F .text	00000028 Chip_UART_SetDivisorLatches
1a001ca8 l     O .text	00000008 UART_PClock
1a001cb0 l     O .text	00000008 UART_BClock
1a000820 l     F .text	00000068 Chip_UART_GetIndex
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001cb8 l     O .text	0000006c periph_to_base
10000068 l     O .bss	00000008 audio_usb_pll_freq
1a000a8c l     F .text	00000022 ABS
1a000ab0 l     F .text	00000124 pll_calc_divs
1a000bd4 l     F .text	00000176 pll_get_frac
1a000d4a l     F .text	00000040 Chip_Clock_GetDivRate
1a000d8c l     F .text	00000090 Chip_Clock_FindBaseClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 system.c
10000070 l     O .bss	00000004 heap_end.11990
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00144c l     F .text	00000034 Chip_SCU_PinMuxSet
1a001480 l     F .text	0000004a Chip_SCU_SetPinMuxing
1a0014cc l     F .text	00000054 Chip_CREG_SetFlashAcceleration
1a001d30 l     O .text	0000000c InitClkStates
1a001d3c l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a001688 l     F .text	00000034 Chip_SCU_PinMuxSet
1a0016bc l     F .text	00000028 Chip_ENET_RMIIEnable
1a0016e4 l     F .text	00000038 Chip_GPIO_SetPinState
1a00171c l     F .text	0000003e Chip_GPIO_SetPinDIROutput
1a00175a l     F .text	0000001a Chip_UART_TXEnable
1a001774 l     F .text	0000001c Chip_UART_ConfigData
1a001da4 l     O .text	0000000c gpioLEDBits
1a0017e4 l     F .text	0000005c Board_LED_Init
00000000 l    df *ABS*	00000000 out/app/src/asm_func.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 impure.c
10000004 l     O .data	00000060 impure_data
1a001024 g     F .text	00000040 Chip_Clock_GetDividerSource
1a00022a  w    F .text	00000006 TIMER2_IRQHandler
1a000218  w    F .text	00000006 DebugMon_Handler
1a00022a  w    F .text	00000006 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00022a  w    F .text	00000006 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00022a  w    F .text	00000006 FLASH_EEPROM_IRQHandler
1a00022a  w    F .text	00000006 I2C0_IRQHandler
10000080 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0001fa  w    F .text	00000006 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a001c50 g     F .text	0000000c __malloc_unlock
1a0003c4 g     F .text	0000001c SysTick_Handler
10000081 g     O .bss	00000001 __lock___arc4random_mutex
1a00022a  w    F .text	00000006 SDIO_IRQHandler
1a00022a  w    F .text	00000006 ATIMER_IRQHandler
1a00021e  w    F .text	00000006 PendSV_Handler
1a0001f4  w    F .text	00000006 NMI_Handler
1a001db8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00022a  w    F .text	00000006 I2C1_IRQHandler
1a00022a  w    F .text	00000006 UART1_IRQHandler
1a00022a  w    F .text	00000006 GPIO5_IRQHandler
1a00022a  w    F .text	00000006 CAN1_IRQHandler
1a001db8 g       .ARM.exidx	00000000 _etext
1a00022a  w    F .text	00000006 USB1_IRQHandler
1a00022a  w    F .text	00000006 I2S0_IRQHandler
1a00022a  w    F .text	00000006 TIMER3_IRQHandler
1a0011dc g     F .text	00000024 Chip_Clock_GetBaseClocktHz
1a00022a  w    F .text	00000006 UART0_IRQHandler
1a0001bc g     F .text	00000038 bss_init
1a00022a  w    F .text	00000006 SGPIO_IRQHandler
1a00186c g     F .text	00000000 .hidden __aeabi_uldivmod
1000008c g       .noinit	00000000 _noinit
1000007c g     O .bss	00000004 SystemCoreClock
1a000888 g     F .text	00000084 Chip_UART_Init
1a00022a  w    F .text	00000006 ADC0_IRQHandler
1a001b70 g     F .text	00000010 malloc
1a00020c  w    F .text	00000006 UsageFault_Handler
1a001364 g     F .text	00000088 Chip_Clock_GetRate
1a00022a  w    F .text	00000006 GPIO6_IRQHandler
1a001534 g     F .text	00000080 Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00189c g     F .text	000002d0 .hidden __udivmoddi4
1a00140c g     F .text	00000040 _sbrk_r
1a001d9c g     O .text	00000004 ExtRateIn
1a00022a  w    F .text	00000006 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00022a  w    F .text	00000006 GPIO1_IRQHandler
1a00022a  w    F .text	00000006 SSP0_IRQHandler
1a001db0 g       .text	00000000 __exidx_start
10000082 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10000083 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00022a  w    F .text	00000006 ADC1_IRQHandler
1a001840 g     F .text	00000024 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00022a  w    F .text	00000006 RTC_IRQHandler
1000008c g       .bss	00000000 _ebss
1a00022a  w    F .text	00000006 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00022a  w    F .text	00000006 SPI_IRQHandler
1a00022a  w    F .text	00000006 LCD_IRQHandler
1a000e1c g     F .text	00000070 Chip_Clock_EnableCrystal
10000084 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000178 g     F .text	00000044 data_init
1a00022a  w    F .text	00000006 TIMER1_IRQHandler
1a001c5e g     F .text	00000002 __retarget_lock_release_recursive
1a00022a  w    F .text	00000006 UART2_IRQHandler
1a000f64 g     F .text	000000c0 Chip_Clock_GetMainPLLHz
1a00022a  w    F .text	00000006 GPIO2_IRQHandler
1a00129c g     F .text	0000004c Chip_Clock_GetBaseClock
10000064 g       .bss	00000000 _bss
1a00022a  w    F .text	00000006 I2S1_IRQHandler
1a000a78 g     F .text	00000014 Chip_GPIO_Init
1a001da0 g     O .text	00000004 OscRateIn
1000008c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00022a  w    F .text	00000006 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001b6c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0004b8 g     F .text	00000008 LoopInfinito
1a00022a  w    F .text	00000006 USB0_IRQHandler
1a00022a  w    F .text	00000006 GPIO3_IRQHandler
1a001c44 g     F .text	0000000c __malloc_lock
1a00022a  w    F .text	00000006 SCT_IRQHandler
1a001064 g     F .text	00000038 Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001c5c g     F .text	00000002 __retarget_lock_acquire_recursive
1a001b80 g     F .text	00000010 memset
1a000200  w    F .text	00000006 MemManage_Handler
1a0004c0 g     F .text	00000018 main
1a00022a  w    F .text	00000006 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00048a g     F .text	0000002e SVC_Handler
1a001b90 g     F .text	000000b4 _malloc_r
1a00022a  w    F .text	00000006 GPIO7_IRQHandler
1a0012e8 g     F .text	0000007c Chip_Clock_EnableOpts
1a00109c g     F .text	00000140 Chip_Clock_GetClockInputHz
1a0006d8 g     F .text	00000074 fpuInit
1a000e8c g     F .text	000000d8 Chip_Clock_CalcMainPLLValue
1a0013ec g     F .text	00000020 SystemInit
1a00022a  w    F .text	00000006 SPIFI_IRQHandler
1a00022a  w    F .text	00000006 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001520 g     F .text	00000014 Board_SetupMuxing
1a00090c g     F .text	0000016c Chip_UART_SetBaudFDR
1a00022a  w    F .text	00000006 ETH_IRQHandler
10000000 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0004d8 g     F .text	0000001c c_sum
1a00022a  w    F .text	00000006 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000008c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00022a  w    F .text	00000006 GINT0_IRQHandler
1a00022a  w    F .text	00000006 DAC_IRQHandler
1a0017b4 g     F .text	00000030 Board_Debug_Init
1a001864 g     F .text	00000000 asm_sum
10000064 g       .data	00000000 _edata
1a00022a  w    F .text	00000006 M0SUB_IRQHandler
10000085 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00057c g     F .text	0000015c Chip_SetupCoreClock
1a00022a  w    F .text	00000006 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0015c4 g     F .text	000000c4 ResetISR
1a001868 g     F .text	00000000 asm_svc
1a00074c g     F .text	00000018 SystemCoreClockUpdate
1a00022a  w    F .text	00000006 DMA_IRQHandler
1a00022a  w    F .text	00000006 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001b6c  w    F .text	00000002 .hidden __aeabi_idiv0
1a000206  w    F .text	00000006 BusFault_Handler
10000086 g     O .bss	00000001 __lock___dd_hash_mutex
10000087 g     O .bss	00000001 __lock___tz_mutex
1a00022a  w    F .text	00000006 UART3_IRQHandler
10000078 g     O .bss	00000004 __malloc_sbrk_start
1a00022a  w    F .text	00000006 MCPWM_IRQHandler
1a00022a  w    F .text	00000006 M0APP_IRQHandler
10000074 g     O .bss	00000004 __malloc_free_list
1a00022a  w    F .text	00000006 GINT1_IRQHandler
1a001790 g     F .text	00000024 Board_UART_Init
1a001200 g     F .text	0000009c Chip_Clock_SetBaseClock
1a00022a  w    F .text	00000006 GPIO4_IRQHandler
10000088 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0015b4 g     F .text	00000010 Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c5 15 00 1a f5 01 00 1a fb 01 00 1a     ................
1a000010:	01 02 00 1a 07 02 00 1a 0d 02 00 1a 00 00 00 00     ................
	...
1a00002c:	8b 04 00 1a 19 02 00 1a 00 00 00 00 1f 02 00 1a     ................
1a00003c:	c5 03 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     ....+...+...+...
1a00004c:	00 00 00 00 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     ....+...+...+...
1a00005c:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a00006c:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a00007c:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a00008c:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a00009c:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000ac:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000bc:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000cc:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000dc:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000ec:	2b 02 00 1a 00 00 00 00 2b 02 00 1a 2b 02 00 1a     +.......+...+...
1a0000fc:	2b 02 00 1a 00 00 00 00 2b 02 00 1a 2b 02 00 1a     +.......+...+...
1a00010c:	2b 02 00 1a 2b 02 00 1a                             +...+...

1a000114 <__data_section_table>:
1a000114:	1a001db8 	.word	0x1a001db8
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000064 	.word	0x00000064
1a000120:	1a001db8 	.word	0x1a001db8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001db8 	.word	0x1a001db8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001db8 	.word	0x1a001db8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001db8 	.word	0x1a001db8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000064 	.word	0x10000064
1a000154:	00000028 	.word	0x00000028
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000178:	b480      	push	{r7}
1a00017a:	b089      	sub	sp, #36	; 0x24
1a00017c:	af00      	add	r7, sp, #0
1a00017e:	60f8      	str	r0, [r7, #12]
1a000180:	60b9      	str	r1, [r7, #8]
1a000182:	607a      	str	r2, [r7, #4]
    unsigned int *pulDest = (unsigned int*) start;
1a000184:	68bb      	ldr	r3, [r7, #8]
1a000186:	61fb      	str	r3, [r7, #28]
    unsigned int *pulSrc = (unsigned int*) romstart;
1a000188:	68fb      	ldr	r3, [r7, #12]
1a00018a:	61bb      	str	r3, [r7, #24]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	617b      	str	r3, [r7, #20]
1a000190:	e00a      	b.n	1a0001a8 <data_init+0x30>
        *pulDest++ = *pulSrc++;
1a000192:	69ba      	ldr	r2, [r7, #24]
1a000194:	1d13      	adds	r3, r2, #4
1a000196:	61bb      	str	r3, [r7, #24]
1a000198:	69fb      	ldr	r3, [r7, #28]
1a00019a:	1d19      	adds	r1, r3, #4
1a00019c:	61f9      	str	r1, [r7, #28]
1a00019e:	6812      	ldr	r2, [r2, #0]
1a0001a0:	601a      	str	r2, [r3, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	697b      	ldr	r3, [r7, #20]
1a0001a4:	3304      	adds	r3, #4
1a0001a6:	617b      	str	r3, [r7, #20]
1a0001a8:	697a      	ldr	r2, [r7, #20]
1a0001aa:	687b      	ldr	r3, [r7, #4]
1a0001ac:	429a      	cmp	r2, r3
1a0001ae:	d3f0      	bcc.n	1a000192 <data_init+0x1a>
}
1a0001b0:	bf00      	nop
1a0001b2:	3724      	adds	r7, #36	; 0x24
1a0001b4:	46bd      	mov	sp, r7
1a0001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0001ba:	4770      	bx	lr

1a0001bc <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
1a0001bc:	b480      	push	{r7}
1a0001be:	b085      	sub	sp, #20
1a0001c0:	af00      	add	r7, sp, #0
1a0001c2:	6078      	str	r0, [r7, #4]
1a0001c4:	6039      	str	r1, [r7, #0]
    unsigned int *pulDest = (unsigned int*) start;
1a0001c6:	687b      	ldr	r3, [r7, #4]
1a0001c8:	60fb      	str	r3, [r7, #12]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ca:	2300      	movs	r3, #0
1a0001cc:	60bb      	str	r3, [r7, #8]
1a0001ce:	e007      	b.n	1a0001e0 <bss_init+0x24>
        *pulDest++ = 0;
1a0001d0:	68fb      	ldr	r3, [r7, #12]
1a0001d2:	1d1a      	adds	r2, r3, #4
1a0001d4:	60fa      	str	r2, [r7, #12]
1a0001d6:	2200      	movs	r2, #0
1a0001d8:	601a      	str	r2, [r3, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001da:	68bb      	ldr	r3, [r7, #8]
1a0001dc:	3304      	adds	r3, #4
1a0001de:	60bb      	str	r3, [r7, #8]
1a0001e0:	68ba      	ldr	r2, [r7, #8]
1a0001e2:	683b      	ldr	r3, [r7, #0]
1a0001e4:	429a      	cmp	r2, r3
1a0001e6:	d3f3      	bcc.n	1a0001d0 <bss_init+0x14>
}
1a0001e8:	bf00      	nop
1a0001ea:	3714      	adds	r7, #20
1a0001ec:	46bd      	mov	sp, r7
1a0001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0001f2:	4770      	bx	lr

1a0001f4 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a0001f4:	b480      	push	{r7}
1a0001f6:	af00      	add	r7, sp, #0
    while (1) {
1a0001f8:	e7fe      	b.n	1a0001f8 <NMI_Handler+0x4>

1a0001fa <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a0001fa:	b480      	push	{r7}
1a0001fc:	af00      	add	r7, sp, #0
    while (1) {
1a0001fe:	e7fe      	b.n	1a0001fe <HardFault_Handler+0x4>

1a000200 <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000200:	b480      	push	{r7}
1a000202:	af00      	add	r7, sp, #0
    while (1) {
1a000204:	e7fe      	b.n	1a000204 <MemManage_Handler+0x4>

1a000206 <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a000206:	b480      	push	{r7}
1a000208:	af00      	add	r7, sp, #0
    while (1) {
1a00020a:	e7fe      	b.n	1a00020a <BusFault_Handler+0x4>

1a00020c <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a00020c:	b480      	push	{r7}
1a00020e:	af00      	add	r7, sp, #0
    while (1) {
1a000210:	e7fe      	b.n	1a000210 <UsageFault_Handler+0x4>
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000212:	b480      	push	{r7}
1a000214:	af00      	add	r7, sp, #0
    while (1) {
1a000216:	e7fe      	b.n	1a000216 <UsageFault_Handler+0xa>

1a000218 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000218:	b480      	push	{r7}
1a00021a:	af00      	add	r7, sp, #0
    while (1) {
1a00021c:	e7fe      	b.n	1a00021c <DebugMon_Handler+0x4>

1a00021e <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a00021e:	b480      	push	{r7}
1a000220:	af00      	add	r7, sp, #0
    while (1) {
1a000222:	e7fe      	b.n	1a000222 <PendSV_Handler+0x4>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000224:	b480      	push	{r7}
1a000226:	af00      	add	r7, sp, #0
    while (1) {
1a000228:	e7fe      	b.n	1a000228 <PendSV_Handler+0xa>

1a00022a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00022a:	b480      	push	{r7}
1a00022c:	af00      	add	r7, sp, #0
    while (1) {
1a00022e:	e7fe      	b.n	1a00022e <ADC0_IRQHandler+0x4>
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1a000300:	b480      	push	{r7}
1a000302:	b083      	sub	sp, #12
1a000304:	af00      	add	r7, sp, #0
1a000306:	4603      	mov	r3, r0
1a000308:	6039      	str	r1, [r7, #0]
1a00030a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
1a00030c:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a000310:	2b00      	cmp	r3, #0
1a000312:	da0b      	bge.n	1a00032c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000314:	683b      	ldr	r3, [r7, #0]
1a000316:	b2da      	uxtb	r2, r3
1a000318:	490c      	ldr	r1, [pc, #48]	; (1a00034c <NVIC_SetPriority+0x4c>)
1a00031a:	79fb      	ldrb	r3, [r7, #7]
1a00031c:	f003 030f 	and.w	r3, r3, #15
1a000320:	3b04      	subs	r3, #4
1a000322:	0152      	lsls	r2, r2, #5
1a000324:	b2d2      	uxtb	r2, r2
1a000326:	440b      	add	r3, r1
1a000328:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
1a00032a:	e009      	b.n	1a000340 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a00032c:	683b      	ldr	r3, [r7, #0]
1a00032e:	b2da      	uxtb	r2, r3
1a000330:	4907      	ldr	r1, [pc, #28]	; (1a000350 <NVIC_SetPriority+0x50>)
1a000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a000336:	0152      	lsls	r2, r2, #5
1a000338:	b2d2      	uxtb	r2, r2
1a00033a:	440b      	add	r3, r1
1a00033c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
1a000340:	bf00      	nop
1a000342:	370c      	adds	r7, #12
1a000344:	46bd      	mov	sp, r7
1a000346:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00034a:	4770      	bx	lr
1a00034c:	e000ed00 	.word	0xe000ed00
1a000350:	e000e100 	.word	0xe000e100

1a000354 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1a000354:	b580      	push	{r7, lr}
1a000356:	b082      	sub	sp, #8
1a000358:	af00      	add	r7, sp, #0
1a00035a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00035c:	687b      	ldr	r3, [r7, #4]
1a00035e:	3b01      	subs	r3, #1
1a000360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a000364:	d301      	bcc.n	1a00036a <SysTick_Config+0x16>
1a000366:	2301      	movs	r3, #1
1a000368:	e00f      	b.n	1a00038a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00036a:	4a0a      	ldr	r2, [pc, #40]	; (1a000394 <SysTick_Config+0x40>)
1a00036c:	687b      	ldr	r3, [r7, #4]
1a00036e:	3b01      	subs	r3, #1
1a000370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
1a000372:	2107      	movs	r1, #7
1a000374:	f04f 30ff 	mov.w	r0, #4294967295
1a000378:	f7ff ffc2 	bl	1a000300 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a00037c:	4b05      	ldr	r3, [pc, #20]	; (1a000394 <SysTick_Config+0x40>)
1a00037e:	2200      	movs	r2, #0
1a000380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000382:	4b04      	ldr	r3, [pc, #16]	; (1a000394 <SysTick_Config+0x40>)
1a000384:	2207      	movs	r2, #7
1a000386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
1a000388:	2300      	movs	r3, #0
}
1a00038a:	4618      	mov	r0, r3
1a00038c:	3708      	adds	r7, #8
1a00038e:	46bd      	mov	sp, r7
1a000390:	bd80      	pop	{r7, pc}
1a000392:	bf00      	nop
1a000394:	e000e010 	.word	0xe000e010

1a000398 <Inicio>:


// Inicia soporte de la placa y periodo de la interrupcion del SYSTICK
// cada 1 milisegundo.
static void Inicio (void)
{
1a000398:	b580      	push	{r7, lr}
1a00039a:	af00      	add	r7, sp, #0
    Board_Init ();
1a00039c:	f001 fa50 	bl	1a001840 <Board_Init>
    SystemCoreClockUpdate ();
1a0003a0:	f000 f9d4 	bl	1a00074c <SystemCoreClockUpdate>
    SysTick_Config (SystemCoreClock / 1000);
1a0003a4:	4b05      	ldr	r3, [pc, #20]	; (1a0003bc <Inicio+0x24>)
1a0003a6:	681b      	ldr	r3, [r3, #0]
1a0003a8:	4a05      	ldr	r2, [pc, #20]	; (1a0003c0 <Inicio+0x28>)
1a0003aa:	fba2 2303 	umull	r2, r3, r2, r3
1a0003ae:	099b      	lsrs	r3, r3, #6
1a0003b0:	4618      	mov	r0, r3
1a0003b2:	f7ff ffcf 	bl	1a000354 <SysTick_Config>
}
1a0003b6:	bf00      	nop
1a0003b8:	bd80      	pop	{r7, pc}
1a0003ba:	bf00      	nop
1a0003bc:	1000007c 	.word	0x1000007c
1a0003c0:	10624dd3 	.word	0x10624dd3

1a0003c4 <SysTick_Handler>:


// Segun la configuracion realizada en Inicio(), este handler de interrupcion
// se ejecutara cada 1 milisegundo.
void SysTick_Handler (void)
{
1a0003c4:	b480      	push	{r7}
1a0003c6:	af00      	add	r7, sp, #0
    ++ s_ticks;
1a0003c8:	4b04      	ldr	r3, [pc, #16]	; (1a0003dc <SysTick_Handler+0x18>)
1a0003ca:	681b      	ldr	r3, [r3, #0]
1a0003cc:	3301      	adds	r3, #1
1a0003ce:	4a03      	ldr	r2, [pc, #12]	; (1a0003dc <SysTick_Handler+0x18>)
1a0003d0:	6013      	str	r3, [r2, #0]
}
1a0003d2:	bf00      	nop
1a0003d4:	46bd      	mov	sp, r7
1a0003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0003da:	4770      	bx	lr
1a0003dc:	10000064 	.word	0x10000064

1a0003e0 <Suma>:


static void Suma (void)
{
1a0003e0:	b580      	push	{r7, lr}
1a0003e2:	b084      	sub	sp, #16
1a0003e4:	af00      	add	r7, sp, #0
    const uint32_t A = 20;
1a0003e6:	2314      	movs	r3, #20
1a0003e8:	60fb      	str	r3, [r7, #12]
    const uint32_t B = 30;
1a0003ea:	231e      	movs	r3, #30
1a0003ec:	60bb      	str	r3, [r7, #8]

    const uint32_t SumResult_C = c_sum (A, B);
1a0003ee:	68b9      	ldr	r1, [r7, #8]
1a0003f0:	68f8      	ldr	r0, [r7, #12]
1a0003f2:	f000 f871 	bl	1a0004d8 <c_sum>
1a0003f6:	6078      	str	r0, [r7, #4]
    const uint32_t SumResult_Asm = asm_sum (A, B);
1a0003f8:	68b9      	ldr	r1, [r7, #8]
1a0003fa:	68f8      	ldr	r0, [r7, #12]
1a0003fc:	f001 fa32 	bl	1a001864 <asm_sum>
1a000400:	6038      	str	r0, [r7, #0]

    // Actividad de debug: SumResult_C y SumResult_Asm deberian contener el
    // mismo valor.
    __BKPT (0);
1a000402:	be00      	bkpt	0x0000

    (void) SumResult_C;
    (void) SumResult_Asm;
}
1a000404:	bf00      	nop
1a000406:	3710      	adds	r7, #16
1a000408:	46bd      	mov	sp, r7
1a00040a:	bd80      	pop	{r7, pc}

1a00040c <LlamandoAMalloc>:


static void LlamandoAMalloc (void)
{
1a00040c:	b580      	push	{r7, lr}
1a00040e:	b082      	sub	sp, #8
1a000410:	af00      	add	r7, sp, #0
    // De donde saca memoria malloc?
    // (se vera en clase)
    void * ptr = malloc (2048);
1a000412:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a000416:	f001 fbab 	bl	1a001b70 <malloc>
1a00041a:	4603      	mov	r3, r0
1a00041c:	607b      	str	r3, [r7, #4]

    (void) ptr;
}
1a00041e:	bf00      	nop
1a000420:	3708      	adds	r7, #8
1a000422:	46bd      	mov	sp, r7
1a000424:	bd80      	pop	{r7, pc}

1a000426 <PrivilegiosSVC>:


static void PrivilegiosSVC (void)
{
1a000426:	b580      	push	{r7, lr}
1a000428:	b088      	sub	sp, #32
1a00042a:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
1a00042c:	f3ef 8314 	mrs	r3, CONTROL
1a000430:	607b      	str	r3, [r7, #4]
  return(result);
1a000432:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
1a000434:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    __BKPT (0);
1a000436:	be00      	bkpt	0x0000

    x |= 1;
1a000438:	69fb      	ldr	r3, [r7, #28]
1a00043a:	f043 0301 	orr.w	r3, r3, #1
1a00043e:	61fb      	str	r3, [r7, #28]
1a000440:	69fb      	ldr	r3, [r7, #28]
1a000442:	60bb      	str	r3, [r7, #8]

    \param [in]    control  Control Register value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
1a000444:	68bb      	ldr	r3, [r7, #8]
1a000446:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
1a00044a:	f3ef 8314 	mrs	r3, CONTROL
1a00044e:	60fb      	str	r3, [r7, #12]
  return(result);
1a000450:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
1a000452:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    __BKPT (0);
1a000454:	be00      	bkpt	0x0000

    x &= ~1u;
1a000456:	69fb      	ldr	r3, [r7, #28]
1a000458:	f023 0301 	bic.w	r3, r3, #1
1a00045c:	61fb      	str	r3, [r7, #28]
1a00045e:	69fb      	ldr	r3, [r7, #28]
1a000460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
1a000462:	693b      	ldr	r3, [r7, #16]
1a000464:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
1a000468:	f3ef 8314 	mrs	r3, CONTROL
1a00046c:	617b      	str	r3, [r7, #20]
  return(result);
1a00046e:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
1a000470:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    __BKPT (0);
1a000472:	be00      	bkpt	0x0000
    // opertivo de tiempo real.
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo suma.S.
    asm_svc ();
1a000474:	f001 f9f8 	bl	1a001868 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
1a000478:	f3ef 8314 	mrs	r3, CONTROL
1a00047c:	61bb      	str	r3, [r7, #24]
  return(result);
1a00047e:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
1a000480:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
1a000482:	bf00      	nop
1a000484:	3720      	adds	r7, #32
1a000486:	46bd      	mov	sp, r7
1a000488:	bd80      	pop	{r7, pc}

1a00048a <SVC_Handler>:


// Handler de la interrupcion "SVC" (Supervisor Call).
// Usado por el ejemplo "EjemploPrivilegiosSVC".
void SVC_Handler (void)
{
1a00048a:	b480      	push	{r7}
1a00048c:	b085      	sub	sp, #20
1a00048e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
1a000490:	f3ef 8314 	mrs	r3, CONTROL
1a000494:	607b      	str	r3, [r7, #4]
  return(result);
1a000496:	687b      	ldr	r3, [r7, #4]
    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
1a000498:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
1a00049a:	68fb      	ldr	r3, [r7, #12]
1a00049c:	f023 0301 	bic.w	r3, r3, #1
1a0004a0:	60fb      	str	r3, [r7, #12]
1a0004a2:	68fb      	ldr	r3, [r7, #12]
1a0004a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
1a0004a6:	68bb      	ldr	r3, [r7, #8]
1a0004a8:	f383 8814 	msr	CONTROL, r3

    // Asigna el nuevo valor al registro "control". Esta operacion deberia
    // ejecutarse ya que todo manejador de interrupciones se ejecuta en modo
    // "Handler" con total privilegio.
    __set_CONTROL (x);
}
1a0004ac:	bf00      	nop
1a0004ae:	3714      	adds	r7, #20
1a0004b0:	46bd      	mov	sp, r7
1a0004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004b6:	4770      	bx	lr

1a0004b8 <LoopInfinito>:


noreturn void LoopInfinito (void)
{
1a0004b8:	b480      	push	{r7}
1a0004ba:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a0004bc:	bf30      	wfi
    while (1)
    {
        // Procesador en modo espera hasta que ocurra una interrupcion
        // (Bajo consumo)
        __WFI();
1a0004be:	e7fd      	b.n	1a0004bc <LoopInfinito+0x4>

1a0004c0 <main>:
    }
}


int main (void)
{
1a0004c0:	b580      	push	{r7, lr}
1a0004c2:	af00      	add	r7, sp, #0
    Inicio ();
1a0004c4:	f7ff ff68 	bl	1a000398 <Inicio>

    Suma ();
1a0004c8:	f7ff ff8a 	bl	1a0003e0 <Suma>

    PrivilegiosSVC ();
1a0004cc:	f7ff ffab 	bl	1a000426 <PrivilegiosSVC>

    LlamandoAMalloc ();
1a0004d0:	f7ff ff9c 	bl	1a00040c <LlamandoAMalloc>

    LoopInfinito ();
1a0004d4:	f7ff fff0 	bl	1a0004b8 <LoopInfinito>

1a0004d8 <c_sum>:
#include "c_func.h"


uint32_t c_sum (uint32_t firstOperand, uint32_t secondOperand)
{
1a0004d8:	b480      	push	{r7}
1a0004da:	b083      	sub	sp, #12
1a0004dc:	af00      	add	r7, sp, #0
1a0004de:	6078      	str	r0, [r7, #4]
1a0004e0:	6039      	str	r1, [r7, #0]
    return (firstOperand + secondOperand);
1a0004e2:	687a      	ldr	r2, [r7, #4]
1a0004e4:	683b      	ldr	r3, [r7, #0]
1a0004e6:	4413      	add	r3, r2
}
1a0004e8:	4618      	mov	r0, r3
1a0004ea:	370c      	adds	r7, #12
1a0004ec:	46bd      	mov	sp, r7
1a0004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004f2:	4770      	bx	lr

1a0004f4 <Chip_Clock_DisableMainPLL>:
 * @return none
 * Make sure the main PLL is not needed to clock the part before disabling it.
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
1a0004f4:	b480      	push	{r7}
1a0004f6:	af00      	add	r7, sp, #0
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a0004f8:	4b05      	ldr	r3, [pc, #20]	; (1a000510 <Chip_Clock_DisableMainPLL+0x1c>)
1a0004fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a0004fc:	4a04      	ldr	r2, [pc, #16]	; (1a000510 <Chip_Clock_DisableMainPLL+0x1c>)
1a0004fe:	f043 0301 	orr.w	r3, r3, #1
1a000502:	6453      	str	r3, [r2, #68]	; 0x44
}
1a000504:	bf00      	nop
1a000506:	46bd      	mov	sp, r7
1a000508:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00050c:	4770      	bx	lr
1a00050e:	bf00      	nop
1a000510:	40050000 	.word	0x40050000

1a000514 <Chip_Clock_SetupMainPLL>:
 * @param  ppll    : Pointer to pll param structure #PLL_PARAM_T
 * @return none
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
1a000514:	b480      	push	{r7}
1a000516:	b083      	sub	sp, #12
1a000518:	af00      	add	r7, sp, #0
1a00051a:	6078      	str	r0, [r7, #4]
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a00051c:	687b      	ldr	r3, [r7, #4]
1a00051e:	681b      	ldr	r3, [r3, #0]
1a000520:	461a      	mov	r2, r3
1a000522:	687b      	ldr	r3, [r7, #4]
1a000524:	791b      	ldrb	r3, [r3, #4]
1a000526:	061b      	lsls	r3, r3, #24
1a000528:	4313      	orrs	r3, r2
1a00052a:	687a      	ldr	r2, [r7, #4]
1a00052c:	6912      	ldr	r2, [r2, #16]
1a00052e:	0412      	lsls	r2, r2, #16
1a000530:	4313      	orrs	r3, r2
1a000532:	687a      	ldr	r2, [r7, #4]
1a000534:	6892      	ldr	r2, [r2, #8]
1a000536:	0312      	lsls	r2, r2, #12
1a000538:	4313      	orrs	r3, r2
1a00053a:	687a      	ldr	r2, [r7, #4]
1a00053c:	68d2      	ldr	r2, [r2, #12]
1a00053e:	0212      	lsls	r2, r2, #8
1a000540:	4611      	mov	r1, r2
1a000542:	4a04      	ldr	r2, [pc, #16]	; (1a000554 <Chip_Clock_SetupMainPLL+0x40>)
1a000544:	430b      	orrs	r3, r1
1a000546:	6453      	str	r3, [r2, #68]	; 0x44
}
1a000548:	bf00      	nop
1a00054a:	370c      	adds	r7, #12
1a00054c:	46bd      	mov	sp, r7
1a00054e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000552:	4770      	bx	lr
1a000554:	40050000 	.word	0x40050000

1a000558 <Chip_Clock_MainPLLLocked>:
 * @brief  Wait for Main PLL to be locked
 * @return 1 - PLL is LOCKED; 0 - PLL is not locked
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
1a000558:	b480      	push	{r7}
1a00055a:	af00      	add	r7, sp, #0
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00055c:	4b06      	ldr	r3, [pc, #24]	; (1a000578 <Chip_Clock_MainPLLLocked+0x20>)
1a00055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a000560:	f003 0301 	and.w	r3, r3, #1
1a000564:	2b00      	cmp	r3, #0
1a000566:	bf14      	ite	ne
1a000568:	2301      	movne	r3, #1
1a00056a:	2300      	moveq	r3, #0
1a00056c:	b2db      	uxtb	r3, r3
}
1a00056e:	4618      	mov	r0, r3
1a000570:	46bd      	mov	sp, r7
1a000572:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000576:	4770      	bx	lr
1a000578:	40050000 	.word	0x40050000

1a00057c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00057c:	b590      	push	{r4, r7, lr}
1a00057e:	b097      	sub	sp, #92	; 0x5c
1a000580:	af00      	add	r7, sp, #0
1a000582:	4603      	mov	r3, r0
1a000584:	6039      	str	r1, [r7, #0]
1a000586:	71fb      	strb	r3, [r7, #7]
1a000588:	4613      	mov	r3, r2
1a00058a:	71bb      	strb	r3, [r7, #6]
   int i;
   volatile uint32_t delay = 5500;
1a00058c:	f241 537c 	movw	r3, #5500	; 0x157c
1a000590:	64fb      	str	r3, [r7, #76]	; 0x4c
   uint32_t direct = 0;
1a000592:	2300      	movs	r3, #0
1a000594:	653b      	str	r3, [r7, #80]	; 0x50
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000596:	79fb      	ldrb	r3, [r7, #7]
1a000598:	2b06      	cmp	r3, #6
1a00059a:	d101      	bne.n	1a0005a0 <Chip_SetupCoreClock+0x24>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
1a00059c:	f000 fc3e 	bl	1a000e1c <Chip_Clock_EnableCrystal>
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0005a0:	79f9      	ldrb	r1, [r7, #7]
1a0005a2:	2300      	movs	r3, #0
1a0005a4:	2201      	movs	r2, #1
1a0005a6:	2004      	movs	r0, #4
1a0005a8:	f000 fe2a 	bl	1a001200 <Chip_Clock_SetBaseClock>
   Chip_Clock_DisableMainPLL(); /* Disable PLL */
1a0005ac:	f7ff ffa2 	bl	1a0004f4 <Chip_Clock_DisableMainPLL>

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a0005b0:	79fb      	ldrb	r3, [r7, #7]
1a0005b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0005b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a0005ba:	4619      	mov	r1, r3
1a0005bc:	6838      	ldr	r0, [r7, #0]
1a0005be:	f000 fc65 	bl	1a000e8c <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a0005c2:	683b      	ldr	r3, [r7, #0]
1a0005c4:	4a42      	ldr	r2, [pc, #264]	; (1a0006d0 <Chip_SetupCoreClock+0x154>)
1a0005c6:	4293      	cmp	r3, r2
1a0005c8:	d930      	bls.n	1a00062c <Chip_SetupCoreClock+0xb0>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a0005ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0005cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a0005d0:	2b00      	cmp	r3, #0
1a0005d2:	d002      	beq.n	1a0005da <Chip_SetupCoreClock+0x5e>
1a0005d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0005d6:	2b00      	cmp	r3, #0
1a0005d8:	d022      	beq.n	1a000620 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a0005da:	79fb      	ldrb	r3, [r7, #7]
1a0005dc:	743b      	strb	r3, [r7, #16]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a0005de:	f107 030c 	add.w	r3, r7, #12
1a0005e2:	4619      	mov	r1, r3
1a0005e4:	483a      	ldr	r0, [pc, #232]	; (1a0006d0 <Chip_SetupCoreClock+0x154>)
1a0005e6:	f000 fc51 	bl	1a000e8c <Chip_Clock_CalcMainPLLValue>
           Chip_Clock_SetupMainPLL(&lpll);
1a0005ea:	f107 030c 	add.w	r3, r7, #12
1a0005ee:	4618      	mov	r0, r3
1a0005f0:	f7ff ff90 	bl	1a000514 <Chip_Clock_SetupMainPLL>
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a0005f4:	bf00      	nop
1a0005f6:	f7ff ffaf 	bl	1a000558 <Chip_Clock_MainPLLLocked>
1a0005fa:	4603      	mov	r3, r0
1a0005fc:	2b00      	cmp	r3, #0
1a0005fe:	d0fa      	beq.n	1a0005f6 <Chip_SetupCoreClock+0x7a>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000600:	2300      	movs	r3, #0
1a000602:	2201      	movs	r2, #1
1a000604:	2109      	movs	r1, #9
1a000606:	2004      	movs	r0, #4
1a000608:	f000 fdfa 	bl	1a001200 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a00060c:	bf00      	nop
1a00060e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a000610:	1e5a      	subs	r2, r3, #1
1a000612:	64fa      	str	r2, [r7, #76]	; 0x4c
1a000614:	2b00      	cmp	r3, #0
1a000616:	d1fa      	bne.n	1a00060e <Chip_SetupCoreClock+0x92>
           delay = 5500;
1a000618:	f241 537c 	movw	r3, #5500	; 0x157c
1a00061c:	64fb      	str	r3, [r7, #76]	; 0x4c
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a00061e:	e005      	b.n	1a00062c <Chip_SetupCoreClock+0xb0>
       } else {
           direct = 1;
1a000620:	2301      	movs	r3, #1
1a000622:	653b      	str	r3, [r7, #80]	; 0x50
           ppll.ctrl &= ~(1 << 7);
1a000624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00062a:	62fb      	str	r3, [r7, #44]	; 0x2c
       }
   }

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);
1a00062c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a000630:	4618      	mov	r0, r3
1a000632:	f7ff ff6f 	bl	1a000514 <Chip_Clock_SetupMainPLL>

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000636:	bf00      	nop
1a000638:	f7ff ff8e 	bl	1a000558 <Chip_Clock_MainPLLLocked>
1a00063c:	4603      	mov	r3, r0
1a00063e:	2b00      	cmp	r3, #0
1a000640:	d0fa      	beq.n	1a000638 <Chip_SetupCoreClock+0xbc>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000642:	2300      	movs	r3, #0
1a000644:	2201      	movs	r2, #1
1a000646:	2109      	movs	r1, #9
1a000648:	2004      	movs	r0, #4
1a00064a:	f000 fdd9 	bl	1a001200 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a00064e:	bf00      	nop
1a000650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a000652:	1e5a      	subs	r2, r3, #1
1a000654:	64fa      	str	r2, [r7, #76]	; 0x4c
1a000656:	2b00      	cmp	r3, #0
1a000658:	d1fa      	bne.n	1a000650 <Chip_SetupCoreClock+0xd4>
   if (direct) {
1a00065a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00065c:	2b00      	cmp	r3, #0
1a00065e:	d011      	beq.n	1a000684 <Chip_SetupCoreClock+0x108>
       delay = 5500;
1a000660:	f241 537c 	movw	r3, #5500	; 0x157c
1a000664:	64fb      	str	r3, [r7, #76]	; 0x4c
       ppll.ctrl |= 1 << 7;
1a000666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00066c:	62fb      	str	r3, [r7, #44]	; 0x2c
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
1a00066e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a000672:	4618      	mov	r0, r3
1a000674:	f7ff ff4e 	bl	1a000514 <Chip_Clock_SetupMainPLL>
       while(delay --){} /* Wait for approx 50 uSec */
1a000678:	bf00      	nop
1a00067a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00067c:	1e5a      	subs	r2, r3, #1
1a00067e:	64fa      	str	r2, [r7, #76]	; 0x4c
1a000680:	2b00      	cmp	r3, #0
1a000682:	d1fa      	bne.n	1a00067a <Chip_SetupCoreClock+0xfe>
   }

   if (setbase) {
1a000684:	79bb      	ldrb	r3, [r7, #6]
1a000686:	2b00      	cmp	r3, #0
1a000688:	d01e      	beq.n	1a0006c8 <Chip_SetupCoreClock+0x14c>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00068a:	2300      	movs	r3, #0
1a00068c:	657b      	str	r3, [r7, #84]	; 0x54
1a00068e:	e018      	b.n	1a0006c2 <Chip_SetupCoreClock+0x146>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000690:	4a10      	ldr	r2, [pc, #64]	; (1a0006d4 <Chip_SetupCoreClock+0x158>)
1a000692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a000694:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a000698:	4a0e      	ldr	r2, [pc, #56]	; (1a0006d4 <Chip_SetupCoreClock+0x158>)
1a00069a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a00069c:	009b      	lsls	r3, r3, #2
1a00069e:	4413      	add	r3, r2
1a0006a0:	7859      	ldrb	r1, [r3, #1]
1a0006a2:	4a0c      	ldr	r2, [pc, #48]	; (1a0006d4 <Chip_SetupCoreClock+0x158>)
1a0006a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a0006a6:	009b      	lsls	r3, r3, #2
1a0006a8:	4413      	add	r3, r2
1a0006aa:	789c      	ldrb	r4, [r3, #2]
1a0006ac:	4a09      	ldr	r2, [pc, #36]	; (1a0006d4 <Chip_SetupCoreClock+0x158>)
1a0006ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a0006b0:	009b      	lsls	r3, r3, #2
1a0006b2:	4413      	add	r3, r2
1a0006b4:	78db      	ldrb	r3, [r3, #3]
1a0006b6:	4622      	mov	r2, r4
1a0006b8:	f000 fda2 	bl	1a001200 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0006bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a0006be:	3301      	adds	r3, #1
1a0006c0:	657b      	str	r3, [r7, #84]	; 0x54
1a0006c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a0006c4:	2b11      	cmp	r3, #17
1a0006c6:	d9e3      	bls.n	1a000690 <Chip_SetupCoreClock+0x114>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a0006c8:	bf00      	nop
1a0006ca:	375c      	adds	r7, #92	; 0x5c
1a0006cc:	46bd      	mov	sp, r7
1a0006ce:	bd90      	pop	{r4, r7, pc}
1a0006d0:	068e7780 	.word	0x068e7780
1a0006d4:	1a001c60 	.word	0x1a001c60

1a0006d8 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0006d8:	b480      	push	{r7}
1a0006da:	b089      	sub	sp, #36	; 0x24
1a0006dc:	af00      	add	r7, sp, #0
   //                ; Set bits 20-23 to enable CP10 and CP11 coprocessors
   //                ORR R1, R1, #(0xF << 20)
   //                ; Write back the modified value to the CPACR
   //                STR R1, [R0]

   volatile uint32_t *regCpacr = (uint32_t *) LPC_CPACR;
1a0006de:	4b16      	ldr	r3, [pc, #88]	; (1a000738 <fpuInit+0x60>)
1a0006e0:	61fb      	str	r3, [r7, #28]
   volatile uint32_t *regMvfr0 = (uint32_t *) SCB_MVFR0;
1a0006e2:	4b16      	ldr	r3, [pc, #88]	; (1a00073c <fpuInit+0x64>)
1a0006e4:	61bb      	str	r3, [r7, #24]
   volatile uint32_t *regMvfr1 = (uint32_t *) SCB_MVFR1;
1a0006e6:	4b16      	ldr	r3, [pc, #88]	; (1a000740 <fpuInit+0x68>)
1a0006e8:	617b      	str	r3, [r7, #20]
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;
1a0006ea:	2300      	movs	r3, #0
1a0006ec:	74fb      	strb	r3, [r7, #19]

   Mvfr0 = *regMvfr0;
1a0006ee:	69bb      	ldr	r3, [r7, #24]
1a0006f0:	681b      	ldr	r3, [r3, #0]
1a0006f2:	60bb      	str	r3, [r7, #8]
   Mvfr1 = *regMvfr1;
1a0006f4:	697b      	ldr	r3, [r7, #20]
1a0006f6:	681b      	ldr	r3, [r3, #0]
1a0006f8:	607b      	str	r3, [r7, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0006fa:	68bb      	ldr	r3, [r7, #8]
1a0006fc:	4a11      	ldr	r2, [pc, #68]	; (1a000744 <fpuInit+0x6c>)
1a0006fe:	4293      	cmp	r3, r2
1a000700:	d105      	bne.n	1a00070e <fpuInit+0x36>
1a000702:	687b      	ldr	r3, [r7, #4]
1a000704:	4a10      	ldr	r2, [pc, #64]	; (1a000748 <fpuInit+0x70>)
1a000706:	4293      	cmp	r3, r2
1a000708:	d101      	bne.n	1a00070e <fpuInit+0x36>
1a00070a:	2301      	movs	r3, #1
1a00070c:	e000      	b.n	1a000710 <fpuInit+0x38>
1a00070e:	2300      	movs	r3, #0
1a000710:	74fb      	strb	r3, [r7, #19]

   if (vfpPresent) {
1a000712:	7cfb      	ldrb	r3, [r7, #19]
1a000714:	2b00      	cmp	r3, #0
1a000716:	d009      	beq.n	1a00072c <fpuInit+0x54>
       Cpacr = *regCpacr;
1a000718:	69fb      	ldr	r3, [r7, #28]
1a00071a:	681b      	ldr	r3, [r3, #0]
1a00071c:	60fb      	str	r3, [r7, #12]
       Cpacr |= (0xF << 20);
1a00071e:	68fb      	ldr	r3, [r7, #12]
1a000720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000724:	60fb      	str	r3, [r7, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000726:	68fa      	ldr	r2, [r7, #12]
1a000728:	69fb      	ldr	r3, [r7, #28]
1a00072a:	601a      	str	r2, [r3, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a00072c:	bf00      	nop
1a00072e:	3724      	adds	r7, #36	; 0x24
1a000730:	46bd      	mov	sp, r7
1a000732:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000736:	4770      	bx	lr
1a000738:	e000ed88 	.word	0xe000ed88
1a00073c:	e000ef40 	.word	0xe000ef40
1a000740:	e000ef44 	.word	0xe000ef44
1a000744:	10110021 	.word	0x10110021
1a000748:	11000011 	.word	0x11000011

1a00074c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00074c:	b580      	push	{r7, lr}
1a00074e:	af00      	add	r7, sp, #0
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000750:	2069      	movs	r0, #105	; 0x69
1a000752:	f000 fe07 	bl	1a001364 <Chip_Clock_GetRate>
1a000756:	4602      	mov	r2, r0
1a000758:	4b01      	ldr	r3, [pc, #4]	; (1a000760 <SystemCoreClockUpdate+0x14>)
1a00075a:	601a      	str	r2, [r3, #0]
}
1a00075c:	bf00      	nop
1a00075e:	bd80      	pop	{r7, pc}
1a000760:	1000007c 	.word	0x1000007c

1a000764 <Chip_UART_TXDisable>:
 * @brief  Disable transmission on UART TxD pin
 * @param  pUART   : Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
1a000764:	b480      	push	{r7}
1a000766:	b083      	sub	sp, #12
1a000768:	af00      	add	r7, sp, #0
1a00076a:	6078      	str	r0, [r7, #4]
    pUART->TER2 = 0;
1a00076c:	687b      	ldr	r3, [r7, #4]
1a00076e:	2200      	movs	r2, #0
1a000770:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a000772:	bf00      	nop
1a000774:	370c      	adds	r7, #12
1a000776:	46bd      	mov	sp, r7
1a000778:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00077c:	4770      	bx	lr

1a00077e <Chip_UART_SetupFIFOS>:
 *         to select specific options. For example, to enable the FIFOs
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
1a00077e:	b480      	push	{r7}
1a000780:	b083      	sub	sp, #12
1a000782:	af00      	add	r7, sp, #0
1a000784:	6078      	str	r0, [r7, #4]
1a000786:	6039      	str	r1, [r7, #0]
   pUART->FCR = fcr;
1a000788:	687b      	ldr	r3, [r7, #4]
1a00078a:	683a      	ldr	r2, [r7, #0]
1a00078c:	609a      	str	r2, [r3, #8]
}
1a00078e:	bf00      	nop
1a000790:	370c      	adds	r7, #12
1a000792:	46bd      	mov	sp, r7
1a000794:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000798:	4770      	bx	lr

1a00079a <Chip_UART_ConfigData>:
 *         definitions. For example, a configuration of 8 data bits, 1
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
1a00079a:	b480      	push	{r7}
1a00079c:	b083      	sub	sp, #12
1a00079e:	af00      	add	r7, sp, #0
1a0007a0:	6078      	str	r0, [r7, #4]
1a0007a2:	6039      	str	r1, [r7, #0]
   pUART->LCR = config;
1a0007a4:	687b      	ldr	r3, [r7, #4]
1a0007a6:	683a      	ldr	r2, [r7, #0]
1a0007a8:	60da      	str	r2, [r3, #12]
}
1a0007aa:	bf00      	nop
1a0007ac:	370c      	adds	r7, #12
1a0007ae:	46bd      	mov	sp, r7
1a0007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0007b4:	4770      	bx	lr

1a0007b6 <Chip_UART_EnableDivisorAccess>:
 * @brief  Enable access to Divisor Latches
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
1a0007b6:	b480      	push	{r7}
1a0007b8:	b083      	sub	sp, #12
1a0007ba:	af00      	add	r7, sp, #0
1a0007bc:	6078      	str	r0, [r7, #4]
   pUART->LCR |= UART_LCR_DLAB_EN;
1a0007be:	687b      	ldr	r3, [r7, #4]
1a0007c0:	68db      	ldr	r3, [r3, #12]
1a0007c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
1a0007c6:	687b      	ldr	r3, [r7, #4]
1a0007c8:	60da      	str	r2, [r3, #12]
}
1a0007ca:	bf00      	nop
1a0007cc:	370c      	adds	r7, #12
1a0007ce:	46bd      	mov	sp, r7
1a0007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0007d4:	4770      	bx	lr

1a0007d6 <Chip_UART_DisableDivisorAccess>:
 * @brief  Disable access to Divisor Latches
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
1a0007d6:	b480      	push	{r7}
1a0007d8:	b083      	sub	sp, #12
1a0007da:	af00      	add	r7, sp, #0
1a0007dc:	6078      	str	r0, [r7, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0007de:	687b      	ldr	r3, [r7, #4]
1a0007e0:	68db      	ldr	r3, [r3, #12]
1a0007e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1a0007e6:	687b      	ldr	r3, [r7, #4]
1a0007e8:	60da      	str	r2, [r3, #12]
}
1a0007ea:	bf00      	nop
1a0007ec:	370c      	adds	r7, #12
1a0007ee:	46bd      	mov	sp, r7
1a0007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0007f4:	4770      	bx	lr

1a0007f6 <Chip_UART_SetDivisorLatches>:
 * @note   The Divisor Latch Access Bit (DLAB) in LCR must be set in
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
1a0007f6:	b480      	push	{r7}
1a0007f8:	b083      	sub	sp, #12
1a0007fa:	af00      	add	r7, sp, #0
1a0007fc:	6078      	str	r0, [r7, #4]
1a0007fe:	460b      	mov	r3, r1
1a000800:	70fb      	strb	r3, [r7, #3]
1a000802:	4613      	mov	r3, r2
1a000804:	70bb      	strb	r3, [r7, #2]
   pUART->DLL = (uint32_t) dll;
1a000806:	78fa      	ldrb	r2, [r7, #3]
1a000808:	687b      	ldr	r3, [r7, #4]
1a00080a:	601a      	str	r2, [r3, #0]
   pUART->DLM = (uint32_t) dlm;
1a00080c:	78ba      	ldrb	r2, [r7, #2]
1a00080e:	687b      	ldr	r3, [r7, #4]
1a000810:	605a      	str	r2, [r3, #4]
}
1a000812:	bf00      	nop
1a000814:	370c      	adds	r7, #12
1a000816:	46bd      	mov	sp, r7
1a000818:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00081c:	4770      	bx	lr
1a00081e:	Address 0x1a00081e is out of bounds.


1a000820 <Chip_UART_GetIndex>:
/* UART Bus clocks */
static const CHIP_CCU_CLK_T UART_BClock[] = {CLK_APB0_UART0, CLK_APB0_UART1, CLK_APB2_UART2, CLK_APB2_UART3};

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
1a000820:	b480      	push	{r7}
1a000822:	b085      	sub	sp, #20
1a000824:	af00      	add	r7, sp, #0
1a000826:	6078      	str	r0, [r7, #4]
   uint32_t base = (uint32_t) pUART;
1a000828:	687b      	ldr	r3, [r7, #4]
1a00082a:	60fb      	str	r3, [r7, #12]
   switch(base) {
1a00082c:	68fb      	ldr	r3, [r7, #12]
1a00082e:	4a12      	ldr	r2, [pc, #72]	; (1a000878 <Chip_UART_GetIndex+0x58>)
1a000830:	4293      	cmp	r3, r2
1a000832:	d013      	beq.n	1a00085c <Chip_UART_GetIndex+0x3c>
1a000834:	68fb      	ldr	r3, [r7, #12]
1a000836:	4a10      	ldr	r2, [pc, #64]	; (1a000878 <Chip_UART_GetIndex+0x58>)
1a000838:	4293      	cmp	r3, r2
1a00083a:	d804      	bhi.n	1a000846 <Chip_UART_GetIndex+0x26>
1a00083c:	68fb      	ldr	r3, [r7, #12]
1a00083e:	4a0f      	ldr	r2, [pc, #60]	; (1a00087c <Chip_UART_GetIndex+0x5c>)
1a000840:	4293      	cmp	r3, r2
1a000842:	d009      	beq.n	1a000858 <Chip_UART_GetIndex+0x38>
1a000844:	e010      	b.n	1a000868 <Chip_UART_GetIndex+0x48>
1a000846:	68fb      	ldr	r3, [r7, #12]
1a000848:	4a0d      	ldr	r2, [pc, #52]	; (1a000880 <Chip_UART_GetIndex+0x60>)
1a00084a:	4293      	cmp	r3, r2
1a00084c:	d008      	beq.n	1a000860 <Chip_UART_GetIndex+0x40>
1a00084e:	68fb      	ldr	r3, [r7, #12]
1a000850:	4a0c      	ldr	r2, [pc, #48]	; (1a000884 <Chip_UART_GetIndex+0x64>)
1a000852:	4293      	cmp	r3, r2
1a000854:	d006      	beq.n	1a000864 <Chip_UART_GetIndex+0x44>
1a000856:	e007      	b.n	1a000868 <Chip_UART_GetIndex+0x48>
       case LPC_USART0_BASE:
           return 0;
1a000858:	2300      	movs	r3, #0
1a00085a:	e006      	b.n	1a00086a <Chip_UART_GetIndex+0x4a>
       case LPC_UART1_BASE:
           return 1;
1a00085c:	2301      	movs	r3, #1
1a00085e:	e004      	b.n	1a00086a <Chip_UART_GetIndex+0x4a>
       case LPC_USART2_BASE:
           return 2;
1a000860:	2302      	movs	r3, #2
1a000862:	e002      	b.n	1a00086a <Chip_UART_GetIndex+0x4a>
       case LPC_USART3_BASE:
           return 3;
1a000864:	2303      	movs	r3, #3
1a000866:	e000      	b.n	1a00086a <Chip_UART_GetIndex+0x4a>
       default:
           return 0; /* Should never come here */
1a000868:	2300      	movs	r3, #0
   }
}
1a00086a:	4618      	mov	r0, r3
1a00086c:	3714      	adds	r7, #20
1a00086e:	46bd      	mov	sp, r7
1a000870:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000874:	4770      	bx	lr
1a000876:	bf00      	nop
1a000878:	40082000 	.word	0x40082000
1a00087c:	40081000 	.word	0x40081000
1a000880:	400c1000 	.word	0x400c1000
1a000884:	400c2000 	.word	0x400c2000

1a000888 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000888:	b580      	push	{r7, lr}
1a00088a:	b084      	sub	sp, #16
1a00088c:	af00      	add	r7, sp, #0
1a00088e:	6078      	str	r0, [r7, #4]
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000890:	6878      	ldr	r0, [r7, #4]
1a000892:	f7ff ffc5 	bl	1a000820 <Chip_UART_GetIndex>
1a000896:	4602      	mov	r2, r0
1a000898:	4b1a      	ldr	r3, [pc, #104]	; (1a000904 <Chip_UART_Init+0x7c>)
1a00089a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
1a00089e:	2301      	movs	r3, #1
1a0008a0:	2201      	movs	r2, #1
1a0008a2:	2101      	movs	r1, #1
1a0008a4:	f000 fd20 	bl	1a0012e8 <Chip_Clock_EnableOpts>

   /* Enable FIFOs by default, reset them */
   Chip_UART_SetupFIFOS(pUART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS));
1a0008a8:	2107      	movs	r1, #7
1a0008aa:	6878      	ldr	r0, [r7, #4]
1a0008ac:	f7ff ff67 	bl	1a00077e <Chip_UART_SetupFIFOS>

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a0008b0:	6878      	ldr	r0, [r7, #4]
1a0008b2:	f7ff ff57 	bl	1a000764 <Chip_UART_TXDisable>

    /* Disable interrupts */
   pUART->IER = 0;
1a0008b6:	687b      	ldr	r3, [r7, #4]
1a0008b8:	2200      	movs	r2, #0
1a0008ba:	605a      	str	r2, [r3, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a0008bc:	687b      	ldr	r3, [r7, #4]
1a0008be:	2200      	movs	r2, #0
1a0008c0:	60da      	str	r2, [r3, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a0008c2:	687b      	ldr	r3, [r7, #4]
1a0008c4:	2200      	movs	r2, #0
1a0008c6:	621a      	str	r2, [r3, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a0008c8:	687b      	ldr	r3, [r7, #4]
1a0008ca:	2200      	movs	r2, #0
1a0008cc:	64da      	str	r2, [r3, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a0008ce:	687b      	ldr	r3, [r7, #4]
1a0008d0:	2200      	movs	r2, #0
1a0008d2:	655a      	str	r2, [r3, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a0008d4:	687b      	ldr	r3, [r7, #4]
1a0008d6:	2200      	movs	r2, #0
1a0008d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0008da:	687b      	ldr	r3, [r7, #4]
1a0008dc:	4a0a      	ldr	r2, [pc, #40]	; (1a000908 <Chip_UART_Init+0x80>)
1a0008de:	4293      	cmp	r3, r2
1a0008e0:	d105      	bne.n	1a0008ee <Chip_UART_Init+0x66>
       /* Set Modem Control to default state */
       pUART->MCR = 0;
1a0008e2:	687b      	ldr	r3, [r7, #4]
1a0008e4:	2200      	movs	r2, #0
1a0008e6:	611a      	str	r2, [r3, #16]
       /*Dummy Reading to Clear Status */
       tmp = pUART->MSR;
1a0008e8:	687b      	ldr	r3, [r7, #4]
1a0008ea:	699b      	ldr	r3, [r3, #24]
1a0008ec:	60fb      	str	r3, [r7, #12]
   }

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
1a0008ee:	2103      	movs	r1, #3
1a0008f0:	6878      	ldr	r0, [r7, #4]
1a0008f2:	f7ff ff52 	bl	1a00079a <Chip_UART_ConfigData>

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a0008f6:	687b      	ldr	r3, [r7, #4]
1a0008f8:	2210      	movs	r2, #16
1a0008fa:	629a      	str	r2, [r3, #40]	; 0x28
}
1a0008fc:	bf00      	nop
1a0008fe:	3710      	adds	r7, #16
1a000900:	46bd      	mov	sp, r7
1a000902:	bd80      	pop	{r7, pc}
1a000904:	1a001ca8 	.word	0x1a001ca8
1a000908:	40082000 	.word	0x40082000

1a00090c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00090c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00090e:	b08f      	sub	sp, #60	; 0x3c
1a000910:	af00      	add	r7, sp, #0
1a000912:	6078      	str	r0, [r7, #4]
1a000914:	6039      	str	r1, [r7, #0]
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000916:	2300      	movs	r3, #0
1a000918:	637b      	str	r3, [r7, #52]	; 0x34
1a00091a:	2301      	movs	r3, #1
1a00091c:	633b      	str	r3, [r7, #48]	; 0x30
1a00091e:	2300      	movs	r3, #0
1a000920:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */
1a000922:	f04f 33ff 	mov.w	r3, #4294967295
1a000926:	623b      	str	r3, [r7, #32]

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000928:	6878      	ldr	r0, [r7, #4]
1a00092a:	f7ff ff79 	bl	1a000820 <Chip_UART_GetIndex>
1a00092e:	4602      	mov	r2, r0
1a000930:	4b50      	ldr	r3, [pc, #320]	; (1a000a74 <Chip_UART_SetBaudFDR+0x168>)
1a000932:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
1a000936:	4618      	mov	r0, r3
1a000938:	f000 fd14 	bl	1a001364 <Chip_Clock_GetRate>
1a00093c:	6178      	str	r0, [r7, #20]

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a00093e:	2301      	movs	r3, #1
1a000940:	62bb      	str	r3, [r7, #40]	; 0x28
1a000942:	e063      	b.n	1a000a0c <Chip_UART_SetBaudFDR+0x100>
       for (d = 0; d < m; d++) {
1a000944:	2300      	movs	r3, #0
1a000946:	627b      	str	r3, [r7, #36]	; 0x24
1a000948:	e057      	b.n	1a0009fa <Chip_UART_SetBaudFDR+0xee>
           uint32_t diff, div;
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00094a:	697b      	ldr	r3, [r7, #20]
1a00094c:	461a      	mov	r2, r3
1a00094e:	f04f 0300 	mov.w	r3, #0
1a000952:	0915      	lsrs	r5, r2, #4
1a000954:	0714      	lsls	r4, r2, #28
1a000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000958:	461a      	mov	r2, r3
1a00095a:	f04f 0300 	mov.w	r3, #0
1a00095e:	fb02 f005 	mul.w	r0, r2, r5
1a000962:	fb04 f103 	mul.w	r1, r4, r3
1a000966:	1846      	adds	r6, r0, r1
1a000968:	fba4 0102 	umull	r0, r1, r4, r2
1a00096c:	1873      	adds	r3, r6, r1
1a00096e:	4619      	mov	r1, r3
1a000970:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000974:	4413      	add	r3, r2
1a000976:	683a      	ldr	r2, [r7, #0]
1a000978:	fb02 f303 	mul.w	r3, r2, r3
1a00097c:	461a      	mov	r2, r3
1a00097e:	f04f 0300 	mov.w	r3, #0
1a000982:	f000 ff73 	bl	1a00186c <__aeabi_uldivmod>
1a000986:	4602      	mov	r2, r0
1a000988:	460b      	mov	r3, r1
1a00098a:	e9c7 2302 	strd	r2, r3, [r7, #8]

           /* Lower 32-bit of dval has diff */
           diff = (uint32_t) dval;
1a00098e:	68bb      	ldr	r3, [r7, #8]
1a000990:	61fb      	str	r3, [r7, #28]
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);
1a000992:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1a000996:	f04f 0200 	mov.w	r2, #0
1a00099a:	f04f 0300 	mov.w	r3, #0
1a00099e:	000a      	movs	r2, r1
1a0009a0:	2300      	movs	r3, #0
1a0009a2:	4613      	mov	r3, r2
1a0009a4:	61bb      	str	r3, [r7, #24]

           /* Closer to next div */
           if ((int)diff < 0) {
1a0009a6:	69fb      	ldr	r3, [r7, #28]
1a0009a8:	2b00      	cmp	r3, #0
1a0009aa:	da05      	bge.n	1a0009b8 <Chip_UART_SetBaudFDR+0xac>
               diff = -diff;
1a0009ac:	69fb      	ldr	r3, [r7, #28]
1a0009ae:	425b      	negs	r3, r3
1a0009b0:	61fb      	str	r3, [r7, #28]
               div ++;
1a0009b2:	69bb      	ldr	r3, [r7, #24]
1a0009b4:	3301      	adds	r3, #1
1a0009b6:	61bb      	str	r3, [r7, #24]
           }

           /* Check if new value is worse than old or out of range */
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0009b8:	6a3a      	ldr	r2, [r7, #32]
1a0009ba:	69fb      	ldr	r3, [r7, #28]
1a0009bc:	429a      	cmp	r2, r3
1a0009be:	d318      	bcc.n	1a0009f2 <Chip_UART_SetBaudFDR+0xe6>
1a0009c0:	69bb      	ldr	r3, [r7, #24]
1a0009c2:	2b00      	cmp	r3, #0
1a0009c4:	d015      	beq.n	1a0009f2 <Chip_UART_SetBaudFDR+0xe6>
1a0009c6:	69bb      	ldr	r3, [r7, #24]
1a0009c8:	0c1b      	lsrs	r3, r3, #16
1a0009ca:	2b00      	cmp	r3, #0
1a0009cc:	d111      	bne.n	1a0009f2 <Chip_UART_SetBaudFDR+0xe6>
1a0009ce:	69bb      	ldr	r3, [r7, #24]
1a0009d0:	2b02      	cmp	r3, #2
1a0009d2:	d802      	bhi.n	1a0009da <Chip_UART_SetBaudFDR+0xce>
1a0009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0009d6:	2b00      	cmp	r3, #0
1a0009d8:	d10b      	bne.n	1a0009f2 <Chip_UART_SetBaudFDR+0xe6>
               continue;
           }

           /* Store the new better values */
           sdiv = div;
1a0009da:	69bb      	ldr	r3, [r7, #24]
1a0009dc:	637b      	str	r3, [r7, #52]	; 0x34
           sd = d;
1a0009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
           sm = m;
1a0009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0009e4:	633b      	str	r3, [r7, #48]	; 0x30
           odiff = diff;
1a0009e6:	69fb      	ldr	r3, [r7, #28]
1a0009e8:	623b      	str	r3, [r7, #32]

           /* On perfect match, break loop */
           if(!diff) {
1a0009ea:	69fb      	ldr	r3, [r7, #28]
1a0009ec:	2b00      	cmp	r3, #0
1a0009ee:	d009      	beq.n	1a000a04 <Chip_UART_SetBaudFDR+0xf8>
1a0009f0:	e000      	b.n	1a0009f4 <Chip_UART_SetBaudFDR+0xe8>
               continue;
1a0009f2:	bf00      	nop
       for (d = 0; d < m; d++) {
1a0009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0009f6:	3301      	adds	r3, #1
1a0009f8:	627b      	str	r3, [r7, #36]	; 0x24
1a0009fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a0009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0009fe:	429a      	cmp	r2, r3
1a000a00:	d3a3      	bcc.n	1a00094a <Chip_UART_SetBaudFDR+0x3e>
1a000a02:	e000      	b.n	1a000a06 <Chip_UART_SetBaudFDR+0xfa>
               break;
1a000a04:	bf00      	nop
   for (m = 1; odiff && m < 16; m++) {
1a000a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000a08:	3301      	adds	r3, #1
1a000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
1a000a0c:	6a3b      	ldr	r3, [r7, #32]
1a000a0e:	2b00      	cmp	r3, #0
1a000a10:	d002      	beq.n	1a000a18 <Chip_UART_SetBaudFDR+0x10c>
1a000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000a14:	2b0f      	cmp	r3, #15
1a000a16:	d995      	bls.n	1a000944 <Chip_UART_SetBaudFDR+0x38>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a000a1a:	2b00      	cmp	r3, #0
1a000a1c:	d101      	bne.n	1a000a22 <Chip_UART_SetBaudFDR+0x116>
       return 0;
1a000a1e:	2300      	movs	r3, #0
1a000a20:	e024      	b.n	1a000a6c <Chip_UART_SetBaudFDR+0x160>
   }

   /* Update UART registers */
   Chip_UART_EnableDivisorAccess(pUART);
1a000a22:	6878      	ldr	r0, [r7, #4]
1a000a24:	f7ff fec7 	bl	1a0007b6 <Chip_UART_EnableDivisorAccess>
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
1a000a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a000a2a:	b2d9      	uxtb	r1, r3
1a000a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a000a2e:	0a1b      	lsrs	r3, r3, #8
1a000a30:	b2db      	uxtb	r3, r3
1a000a32:	461a      	mov	r2, r3
1a000a34:	6878      	ldr	r0, [r7, #4]
1a000a36:	f7ff fede 	bl	1a0007f6 <Chip_UART_SetDivisorLatches>
   Chip_UART_DisableDivisorAccess(pUART);
1a000a3a:	6878      	ldr	r0, [r7, #4]
1a000a3c:	f7ff fecb 	bl	1a0007d6 <Chip_UART_DisableDivisorAccess>

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a000a42:	011b      	lsls	r3, r3, #4
1a000a44:	b2da      	uxtb	r2, r3
1a000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000a48:	f003 030f 	and.w	r3, r3, #15
1a000a4c:	431a      	orrs	r2, r3
1a000a4e:	687b      	ldr	r3, [r7, #4]
1a000a50:	629a      	str	r2, [r3, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000a52:	697b      	ldr	r3, [r7, #20]
1a000a54:	091b      	lsrs	r3, r3, #4
1a000a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a000a58:	fb02 f203 	mul.w	r2, r2, r3
1a000a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
1a000a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000a60:	440b      	add	r3, r1
1a000a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a000a64:	fb01 f303 	mul.w	r3, r1, r3
1a000a68:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a000a6c:	4618      	mov	r0, r3
1a000a6e:	373c      	adds	r7, #60	; 0x3c
1a000a70:	46bd      	mov	sp, r7
1a000a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000a74:	1a001cb0 	.word	0x1a001cb0

1a000a78 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000a78:	b480      	push	{r7}
1a000a7a:	b083      	sub	sp, #12
1a000a7c:	af00      	add	r7, sp, #0
1a000a7e:	6078      	str	r0, [r7, #4]
}
1a000a80:	bf00      	nop
1a000a82:	370c      	adds	r7, #12
1a000a84:	46bd      	mov	sp, r7
1a000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000a8a:	4770      	bx	lr

1a000a8c <ABS>:

/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
1a000a8c:	b480      	push	{r7}
1a000a8e:	b083      	sub	sp, #12
1a000a90:	af00      	add	r7, sp, #0
1a000a92:	6078      	str	r0, [r7, #4]
   if (val < 0)
1a000a94:	687b      	ldr	r3, [r7, #4]
1a000a96:	2b00      	cmp	r3, #0
1a000a98:	da02      	bge.n	1a000aa0 <ABS+0x14>
       return -val;
1a000a9a:	687b      	ldr	r3, [r7, #4]
1a000a9c:	425b      	negs	r3, r3
1a000a9e:	e000      	b.n	1a000aa2 <ABS+0x16>
   return val;
1a000aa0:	687b      	ldr	r3, [r7, #4]
}
1a000aa2:	4618      	mov	r0, r3
1a000aa4:	370c      	adds	r7, #12
1a000aa6:	46bd      	mov	sp, r7
1a000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000aac:	4770      	bx	lr
1a000aae:	Address 0x1a000aae is out of bounds.


1a000ab0 <pll_calc_divs>:

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ab0:	b580      	push	{r7, lr}
1a000ab2:	b088      	sub	sp, #32
1a000ab4:	af00      	add	r7, sp, #0
1a000ab6:	6078      	str	r0, [r7, #4]
1a000ab8:	6039      	str	r1, [r7, #0]

   uint32_t prev = freq;
1a000aba:	687b      	ldr	r3, [r7, #4]
1a000abc:	61fb      	str	r3, [r7, #28]
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000abe:	683b      	ldr	r3, [r7, #0]
1a000ac0:	681b      	ldr	r3, [r3, #0]
1a000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a000ac6:	2b00      	cmp	r3, #0
1a000ac8:	d005      	beq.n	1a000ad6 <pll_calc_divs+0x26>
       ppll->ctrl &= ~(1 << 6);
1a000aca:	683b      	ldr	r3, [r7, #0]
1a000acc:	681b      	ldr	r3, [r3, #0]
1a000ace:	f023 0240 	bic.w	r2, r3, #64	; 0x40
1a000ad2:	683b      	ldr	r3, [r7, #0]
1a000ad4:	601a      	str	r2, [r3, #0]
   }
   for (n = 1; n <= 4; n++) {
1a000ad6:	2301      	movs	r3, #1
1a000ad8:	61bb      	str	r3, [r7, #24]
1a000ada:	e06f      	b.n	1a000bbc <pll_calc_divs+0x10c>
       for (p = 0; p < 4; p ++) {
1a000adc:	2300      	movs	r3, #0
1a000ade:	613b      	str	r3, [r7, #16]
1a000ae0:	e066      	b.n	1a000bb0 <pll_calc_divs+0x100>
           for (m = 1; m <= 256; m++) {
1a000ae2:	2301      	movs	r3, #1
1a000ae4:	617b      	str	r3, [r7, #20]
1a000ae6:	e05a      	b.n	1a000b9e <pll_calc_divs+0xee>
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
1a000ae8:	683b      	ldr	r3, [r7, #0]
1a000aea:	681b      	ldr	r3, [r3, #0]
1a000aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a000af0:	2b00      	cmp	r3, #0
1a000af2:	d00e      	beq.n	1a000b12 <pll_calc_divs+0x62>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000af4:	693b      	ldr	r3, [r7, #16]
1a000af6:	3301      	adds	r3, #1
1a000af8:	697a      	ldr	r2, [r7, #20]
1a000afa:	fa02 f303 	lsl.w	r3, r2, r3
1a000afe:	461a      	mov	r2, r3
1a000b00:	683b      	ldr	r3, [r7, #0]
1a000b02:	695b      	ldr	r3, [r3, #20]
1a000b04:	fb03 f202 	mul.w	r2, r3, r2
1a000b08:	69bb      	ldr	r3, [r7, #24]
1a000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
1a000b0e:	60fb      	str	r3, [r7, #12]
1a000b10:	e008      	b.n	1a000b24 <pll_calc_divs+0x74>
               } else {
                   fcco = (m * ppll->fin) / n;
1a000b12:	683b      	ldr	r3, [r7, #0]
1a000b14:	695b      	ldr	r3, [r3, #20]
1a000b16:	697a      	ldr	r2, [r7, #20]
1a000b18:	fb02 f203 	mul.w	r2, r2, r3
1a000b1c:	69bb      	ldr	r3, [r7, #24]
1a000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
1a000b22:	60fb      	str	r3, [r7, #12]
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b24:	68fb      	ldr	r3, [r7, #12]
1a000b26:	4a29      	ldr	r2, [pc, #164]	; (1a000bcc <pll_calc_divs+0x11c>)
1a000b28:	4293      	cmp	r3, r2
1a000b2a:	d934      	bls.n	1a000b96 <pll_calc_divs+0xe6>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b2c:	68fb      	ldr	r3, [r7, #12]
1a000b2e:	4a28      	ldr	r2, [pc, #160]	; (1a000bd0 <pll_calc_divs+0x120>)
1a000b30:	4293      	cmp	r3, r2
1a000b32:	d839      	bhi.n	1a000ba8 <pll_calc_divs+0xf8>
               if (ppll->ctrl & (1 << 7)) {
1a000b34:	683b      	ldr	r3, [r7, #0]
1a000b36:	681b      	ldr	r3, [r3, #0]
1a000b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a000b3c:	2b00      	cmp	r3, #0
1a000b3e:	d002      	beq.n	1a000b46 <pll_calc_divs+0x96>
                   fout = fcco;
1a000b40:	68fb      	ldr	r3, [r7, #12]
1a000b42:	60bb      	str	r3, [r7, #8]
1a000b44:	e005      	b.n	1a000b52 <pll_calc_divs+0xa2>
               } else {
                   fout = fcco >> (p + 1);
1a000b46:	693b      	ldr	r3, [r7, #16]
1a000b48:	3301      	adds	r3, #1
1a000b4a:	68fa      	ldr	r2, [r7, #12]
1a000b4c:	fa22 f303 	lsr.w	r3, r2, r3
1a000b50:	60bb      	str	r3, [r7, #8]
               }

               if (ABS(freq - fout) < prev) {
1a000b52:	687a      	ldr	r2, [r7, #4]
1a000b54:	68bb      	ldr	r3, [r7, #8]
1a000b56:	1ad3      	subs	r3, r2, r3
1a000b58:	4618      	mov	r0, r3
1a000b5a:	f7ff ff97 	bl	1a000a8c <ABS>
1a000b5e:	4602      	mov	r2, r0
1a000b60:	69fb      	ldr	r3, [r7, #28]
1a000b62:	4293      	cmp	r3, r2
1a000b64:	d918      	bls.n	1a000b98 <pll_calc_divs+0xe8>
                   ppll->nsel = n;
1a000b66:	683b      	ldr	r3, [r7, #0]
1a000b68:	69ba      	ldr	r2, [r7, #24]
1a000b6a:	609a      	str	r2, [r3, #8]
                   ppll->psel = p + 1;
1a000b6c:	693b      	ldr	r3, [r7, #16]
1a000b6e:	1c5a      	adds	r2, r3, #1
1a000b70:	683b      	ldr	r3, [r7, #0]
1a000b72:	60da      	str	r2, [r3, #12]
                   ppll->msel = m;
1a000b74:	683b      	ldr	r3, [r7, #0]
1a000b76:	697a      	ldr	r2, [r7, #20]
1a000b78:	611a      	str	r2, [r3, #16]
                   ppll->fout = fout;
1a000b7a:	683b      	ldr	r3, [r7, #0]
1a000b7c:	68ba      	ldr	r2, [r7, #8]
1a000b7e:	619a      	str	r2, [r3, #24]
                   ppll->fcco = fcco;
1a000b80:	683b      	ldr	r3, [r7, #0]
1a000b82:	68fa      	ldr	r2, [r7, #12]
1a000b84:	61da      	str	r2, [r3, #28]
                   prev = ABS(freq - fout);
1a000b86:	687a      	ldr	r2, [r7, #4]
1a000b88:	68bb      	ldr	r3, [r7, #8]
1a000b8a:	1ad3      	subs	r3, r2, r3
1a000b8c:	4618      	mov	r0, r3
1a000b8e:	f7ff ff7d 	bl	1a000a8c <ABS>
1a000b92:	61f8      	str	r0, [r7, #28]
1a000b94:	e000      	b.n	1a000b98 <pll_calc_divs+0xe8>
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b96:	bf00      	nop
           for (m = 1; m <= 256; m++) {
1a000b98:	697b      	ldr	r3, [r7, #20]
1a000b9a:	3301      	adds	r3, #1
1a000b9c:	617b      	str	r3, [r7, #20]
1a000b9e:	697b      	ldr	r3, [r7, #20]
1a000ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1a000ba4:	dda0      	ble.n	1a000ae8 <pll_calc_divs+0x38>
1a000ba6:	e000      	b.n	1a000baa <pll_calc_divs+0xfa>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000ba8:	bf00      	nop
       for (p = 0; p < 4; p ++) {
1a000baa:	693b      	ldr	r3, [r7, #16]
1a000bac:	3301      	adds	r3, #1
1a000bae:	613b      	str	r3, [r7, #16]
1a000bb0:	693b      	ldr	r3, [r7, #16]
1a000bb2:	2b03      	cmp	r3, #3
1a000bb4:	dd95      	ble.n	1a000ae2 <pll_calc_divs+0x32>
   for (n = 1; n <= 4; n++) {
1a000bb6:	69bb      	ldr	r3, [r7, #24]
1a000bb8:	3301      	adds	r3, #1
1a000bba:	61bb      	str	r3, [r7, #24]
1a000bbc:	69bb      	ldr	r3, [r7, #24]
1a000bbe:	2b04      	cmp	r3, #4
1a000bc0:	dd8c      	ble.n	1a000adc <pll_calc_divs+0x2c>
               }
           }
       }
   }
}
1a000bc2:	bf00      	nop
1a000bc4:	3720      	adds	r7, #32
1a000bc6:	46bd      	mov	sp, r7
1a000bc8:	bd80      	pop	{r7, pc}
1a000bca:	bf00      	nop
1a000bcc:	094c5eff 	.word	0x094c5eff
1a000bd0:	1312d000 	.word	0x1312d000

1a000bd4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000bd4:	b5b0      	push	{r4, r5, r7, lr}
1a000bd6:	b09e      	sub	sp, #120	; 0x78
1a000bd8:	af00      	add	r7, sp, #0
1a000bda:	6078      	str	r0, [r7, #4]
1a000bdc:	6039      	str	r1, [r7, #0]
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000bde:	f107 030c 	add.w	r3, r7, #12
1a000be2:	2260      	movs	r2, #96	; 0x60
1a000be4:	2100      	movs	r1, #0
1a000be6:	4618      	mov	r0, r3
1a000be8:	f000 ffca 	bl	1a001b80 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a000bec:	68fb      	ldr	r3, [r7, #12]
1a000bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000bf2:	60fb      	str	r3, [r7, #12]
   pll[0].fin = ppll->fin;
1a000bf4:	683b      	ldr	r3, [r7, #0]
1a000bf6:	695b      	ldr	r3, [r3, #20]
1a000bf8:	623b      	str	r3, [r7, #32]
   pll[0].srcin = ppll->srcin;
1a000bfa:	683b      	ldr	r3, [r7, #0]
1a000bfc:	791b      	ldrb	r3, [r3, #4]
1a000bfe:	743b      	strb	r3, [r7, #16]
   pll_calc_divs(freq, &pll[0]);
1a000c00:	f107 030c 	add.w	r3, r7, #12
1a000c04:	4619      	mov	r1, r3
1a000c06:	6878      	ldr	r0, [r7, #4]
1a000c08:	f7ff ff52 	bl	1a000ab0 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000c0e:	687a      	ldr	r2, [r7, #4]
1a000c10:	429a      	cmp	r2, r3
1a000c12:	d10a      	bne.n	1a000c2a <pll_get_frac+0x56>
       *ppll = pll[0];
1a000c14:	683b      	ldr	r3, [r7, #0]
1a000c16:	461d      	mov	r5, r3
1a000c18:	f107 040c 	add.w	r4, r7, #12
1a000c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000c20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000c24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       return ;
1a000c28:	e08c      	b.n	1a000d44 <pll_get_frac+0x170>
   }
   diff[0] = ABS(freq - pll[0].fout);
1a000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000c2c:	687a      	ldr	r2, [r7, #4]
1a000c2e:	1ad3      	subs	r3, r2, r3
1a000c30:	4618      	mov	r0, r3
1a000c32:	f7ff ff2b 	bl	1a000a8c <ABS>
1a000c36:	4603      	mov	r3, r0
1a000c38:	66fb      	str	r3, [r7, #108]	; 0x6c

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000c3a:	2340      	movs	r3, #64	; 0x40
1a000c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   pll[2].fin = ppll->fin;
1a000c3e:	683b      	ldr	r3, [r7, #0]
1a000c40:	695b      	ldr	r3, [r3, #20]
1a000c42:	663b      	str	r3, [r7, #96]	; 0x60
   pll[2].srcin = ppll->srcin;
1a000c44:	683b      	ldr	r3, [r7, #0]
1a000c46:	791b      	ldrb	r3, [r3, #4]
1a000c48:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
   pll_calc_divs(freq, &pll[2]);
1a000c4c:	f107 030c 	add.w	r3, r7, #12
1a000c50:	3340      	adds	r3, #64	; 0x40
1a000c52:	4619      	mov	r1, r3
1a000c54:	6878      	ldr	r0, [r7, #4]
1a000c56:	f7ff ff2b 	bl	1a000ab0 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1a000c5c:	687a      	ldr	r2, [r7, #4]
1a000c5e:	429a      	cmp	r2, r3
1a000c60:	d10a      	bne.n	1a000c78 <pll_get_frac+0xa4>
       *ppll = pll[2];
1a000c62:	683b      	ldr	r3, [r7, #0]
1a000c64:	461d      	mov	r5, r3
1a000c66:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a000c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000c6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000c72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       return ;
1a000c76:	e065      	b.n	1a000d44 <pll_get_frac+0x170>
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1a000c7a:	687a      	ldr	r2, [r7, #4]
1a000c7c:	1ad3      	subs	r3, r2, r3
1a000c7e:	4618      	mov	r0, r3
1a000c80:	f7ff ff04 	bl	1a000a8c <ABS>
1a000c84:	4603      	mov	r3, r0
1a000c86:	677b      	str	r3, [r7, #116]	; 0x74
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a000c88:	2340      	movs	r3, #64	; 0x40
1a000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   pll[1].fin = ppll->fin;
1a000c8c:	683b      	ldr	r3, [r7, #0]
1a000c8e:	695b      	ldr	r3, [r3, #20]
1a000c90:	643b      	str	r3, [r7, #64]	; 0x40
   pll[1].srcin = ppll->srcin;
1a000c92:	683b      	ldr	r3, [r7, #0]
1a000c94:	791b      	ldrb	r3, [r3, #4]
1a000c96:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   pll_calc_divs(freq, &pll[1]);
1a000c9a:	f107 030c 	add.w	r3, r7, #12
1a000c9e:	3320      	adds	r3, #32
1a000ca0:	4619      	mov	r1, r3
1a000ca2:	6878      	ldr	r0, [r7, #4]
1a000ca4:	f7ff ff04 	bl	1a000ab0 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a000ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a000caa:	687a      	ldr	r2, [r7, #4]
1a000cac:	429a      	cmp	r2, r3
1a000cae:	d10a      	bne.n	1a000cc6 <pll_get_frac+0xf2>
       *ppll = pll[1];
1a000cb0:	683b      	ldr	r3, [r7, #0]
1a000cb2:	461d      	mov	r5, r3
1a000cb4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a000cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000cbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000cc0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       return ;
1a000cc4:	e03e      	b.n	1a000d44 <pll_get_frac+0x170>
   }
   diff[1] = ABS(freq - pll[1].fout);
1a000cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a000cc8:	687a      	ldr	r2, [r7, #4]
1a000cca:	1ad3      	subs	r3, r2, r3
1a000ccc:	4618      	mov	r0, r3
1a000cce:	f7ff fedd 	bl	1a000a8c <ABS>
1a000cd2:	4603      	mov	r3, r0
1a000cd4:	673b      	str	r3, [r7, #112]	; 0x70

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a000cd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a000cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1a000cda:	429a      	cmp	r2, r3
1a000cdc:	dc19      	bgt.n	1a000d12 <pll_get_frac+0x13e>
       if (diff[0] <= diff[2]) {
1a000cde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a000ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a000ce2:	429a      	cmp	r2, r3
1a000ce4:	dc0a      	bgt.n	1a000cfc <pll_get_frac+0x128>
           *ppll = pll[0];
1a000ce6:	683b      	ldr	r3, [r7, #0]
1a000ce8:	461d      	mov	r5, r3
1a000cea:	f107 040c 	add.w	r4, r7, #12
1a000cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000cf2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000cf6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a000cfa:	e023      	b.n	1a000d44 <pll_get_frac+0x170>
       } else {
           *ppll = pll[2];
1a000cfc:	683b      	ldr	r3, [r7, #0]
1a000cfe:	461d      	mov	r5, r3
1a000d00:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a000d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000d08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000d0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a000d10:	e018      	b.n	1a000d44 <pll_get_frac+0x170>
       }
   } else {
       if (diff[1] <= diff[2]) {
1a000d12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1a000d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a000d16:	429a      	cmp	r2, r3
1a000d18:	dc0a      	bgt.n	1a000d30 <pll_get_frac+0x15c>
           *ppll = pll[1];
1a000d1a:	683b      	ldr	r3, [r7, #0]
1a000d1c:	461d      	mov	r5, r3
1a000d1e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a000d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000d26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000d2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a000d2e:	e009      	b.n	1a000d44 <pll_get_frac+0x170>
       } else {
           *ppll = pll[2];
1a000d30:	683b      	ldr	r3, [r7, #0]
1a000d32:	461d      	mov	r5, r3
1a000d34:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a000d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000d3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000d40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       }
   }
}
1a000d44:	3778      	adds	r7, #120	; 0x78
1a000d46:	46bd      	mov	sp, r7
1a000d48:	bdb0      	pop	{r4, r5, r7, pc}

1a000d4a <Chip_Clock_GetDivRate>:
   return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a000d4a:	b580      	push	{r7, lr}
1a000d4c:	b084      	sub	sp, #16
1a000d4e:	af00      	add	r7, sp, #0
1a000d50:	4603      	mov	r3, r0
1a000d52:	460a      	mov	r2, r1
1a000d54:	71fb      	strb	r3, [r7, #7]
1a000d56:	4613      	mov	r3, r2
1a000d58:	71bb      	strb	r3, [r7, #6]
   CHIP_CGU_CLKIN_T input;
   uint32_t div;

   input = Chip_Clock_GetDividerSource(divider);
1a000d5a:	79bb      	ldrb	r3, [r7, #6]
1a000d5c:	4618      	mov	r0, r3
1a000d5e:	f000 f961 	bl	1a001024 <Chip_Clock_GetDividerSource>
1a000d62:	4603      	mov	r3, r0
1a000d64:	73fb      	strb	r3, [r7, #15]
   div = Chip_Clock_GetDividerDivisor(divider);
1a000d66:	79bb      	ldrb	r3, [r7, #6]
1a000d68:	4618      	mov	r0, r3
1a000d6a:	f000 f97b 	bl	1a001064 <Chip_Clock_GetDividerDivisor>
1a000d6e:	60b8      	str	r0, [r7, #8]
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000d70:	7bfb      	ldrb	r3, [r7, #15]
1a000d72:	4618      	mov	r0, r3
1a000d74:	f000 f992 	bl	1a00109c <Chip_Clock_GetClockInputHz>
1a000d78:	4602      	mov	r2, r0
1a000d7a:	68bb      	ldr	r3, [r7, #8]
1a000d7c:	3301      	adds	r3, #1
1a000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a000d82:	4618      	mov	r0, r3
1a000d84:	3710      	adds	r7, #16
1a000d86:	46bd      	mov	sp, r7
1a000d88:	bd80      	pop	{r7, pc}
1a000d8a:	Address 0x1a000d8a is out of bounds.


1a000d8c <Chip_Clock_FindBaseClock>:

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000d8c:	b480      	push	{r7}
1a000d8e:	b085      	sub	sp, #20
1a000d90:	af00      	add	r7, sp, #0
1a000d92:	4603      	mov	r3, r0
1a000d94:	80fb      	strh	r3, [r7, #6]
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000d96:	231c      	movs	r3, #28
1a000d98:	73fb      	strb	r3, [r7, #15]
   int i = 0;
1a000d9a:	2300      	movs	r3, #0
1a000d9c:	60bb      	str	r3, [r7, #8]

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000d9e:	e024      	b.n	1a000dea <Chip_Clock_FindBaseClock+0x5e>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000da0:	491d      	ldr	r1, [pc, #116]	; (1a000e18 <Chip_Clock_FindBaseClock+0x8c>)
1a000da2:	68ba      	ldr	r2, [r7, #8]
1a000da4:	4613      	mov	r3, r2
1a000da6:	005b      	lsls	r3, r3, #1
1a000da8:	4413      	add	r3, r2
1a000daa:	005b      	lsls	r3, r3, #1
1a000dac:	440b      	add	r3, r1
1a000dae:	881b      	ldrh	r3, [r3, #0]
1a000db0:	88fa      	ldrh	r2, [r7, #6]
1a000db2:	429a      	cmp	r2, r3
1a000db4:	d316      	bcc.n	1a000de4 <Chip_Clock_FindBaseClock+0x58>
1a000db6:	4918      	ldr	r1, [pc, #96]	; (1a000e18 <Chip_Clock_FindBaseClock+0x8c>)
1a000db8:	68ba      	ldr	r2, [r7, #8]
1a000dba:	4613      	mov	r3, r2
1a000dbc:	005b      	lsls	r3, r3, #1
1a000dbe:	4413      	add	r3, r2
1a000dc0:	005b      	lsls	r3, r3, #1
1a000dc2:	440b      	add	r3, r1
1a000dc4:	3302      	adds	r3, #2
1a000dc6:	881b      	ldrh	r3, [r3, #0]
1a000dc8:	88fa      	ldrh	r2, [r7, #6]
1a000dca:	429a      	cmp	r2, r3
1a000dcc:	d80a      	bhi.n	1a000de4 <Chip_Clock_FindBaseClock+0x58>
           baseclk = periph_to_base[i].clkbase;
1a000dce:	4912      	ldr	r1, [pc, #72]	; (1a000e18 <Chip_Clock_FindBaseClock+0x8c>)
1a000dd0:	68ba      	ldr	r2, [r7, #8]
1a000dd2:	4613      	mov	r3, r2
1a000dd4:	005b      	lsls	r3, r3, #1
1a000dd6:	4413      	add	r3, r2
1a000dd8:	005b      	lsls	r3, r3, #1
1a000dda:	440b      	add	r3, r1
1a000ddc:	3304      	adds	r3, #4
1a000dde:	781b      	ldrb	r3, [r3, #0]
1a000de0:	73fb      	strb	r3, [r7, #15]
1a000de2:	e002      	b.n	1a000dea <Chip_Clock_FindBaseClock+0x5e>
       }
       else {
           i++;
1a000de4:	68bb      	ldr	r3, [r7, #8]
1a000de6:	3301      	adds	r3, #1
1a000de8:	60bb      	str	r3, [r7, #8]
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000dea:	7bfb      	ldrb	r3, [r7, #15]
1a000dec:	2b1c      	cmp	r3, #28
1a000dee:	d10b      	bne.n	1a000e08 <Chip_Clock_FindBaseClock+0x7c>
1a000df0:	4909      	ldr	r1, [pc, #36]	; (1a000e18 <Chip_Clock_FindBaseClock+0x8c>)
1a000df2:	68ba      	ldr	r2, [r7, #8]
1a000df4:	4613      	mov	r3, r2
1a000df6:	005b      	lsls	r3, r3, #1
1a000df8:	4413      	add	r3, r2
1a000dfa:	005b      	lsls	r3, r3, #1
1a000dfc:	440b      	add	r3, r1
1a000dfe:	3304      	adds	r3, #4
1a000e00:	781b      	ldrb	r3, [r3, #0]
1a000e02:	7bfa      	ldrb	r2, [r7, #15]
1a000e04:	429a      	cmp	r2, r3
1a000e06:	d1cb      	bne.n	1a000da0 <Chip_Clock_FindBaseClock+0x14>
       }
   }

   return baseclk;
1a000e08:	7bfb      	ldrb	r3, [r7, #15]
}
1a000e0a:	4618      	mov	r0, r3
1a000e0c:	3714      	adds	r7, #20
1a000e0e:	46bd      	mov	sp, r7
1a000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000e14:	4770      	bx	lr
1a000e16:	bf00      	nop
1a000e18:	1a001cb8 	.word	0x1a001cb8

1a000e1c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000e1c:	b480      	push	{r7}
1a000e1e:	b083      	sub	sp, #12
1a000e20:	af00      	add	r7, sp, #0
   volatile uint32_t delay = 1000;
1a000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000e26:	603b      	str	r3, [r7, #0]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000e28:	4b15      	ldr	r3, [pc, #84]	; (1a000e80 <Chip_Clock_EnableCrystal+0x64>)
1a000e2a:	699b      	ldr	r3, [r3, #24]
1a000e2c:	607b      	str	r3, [r7, #4]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000e2e:	687b      	ldr	r3, [r7, #4]
1a000e30:	f023 0302 	bic.w	r3, r3, #2
1a000e34:	607b      	str	r3, [r7, #4]
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000e36:	4b12      	ldr	r3, [pc, #72]	; (1a000e80 <Chip_Clock_EnableCrystal+0x64>)
1a000e38:	699b      	ldr	r3, [r3, #24]
1a000e3a:	687a      	ldr	r2, [r7, #4]
1a000e3c:	429a      	cmp	r2, r3
1a000e3e:	d002      	beq.n	1a000e46 <Chip_Clock_EnableCrystal+0x2a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000e40:	4a0f      	ldr	r2, [pc, #60]	; (1a000e80 <Chip_Clock_EnableCrystal+0x64>)
1a000e42:	687b      	ldr	r3, [r7, #4]
1a000e44:	6193      	str	r3, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a000e46:	687b      	ldr	r3, [r7, #4]
1a000e48:	f023 0301 	bic.w	r3, r3, #1
1a000e4c:	607b      	str	r3, [r7, #4]
   if (OscRateIn >= 20000000) {
1a000e4e:	4b0d      	ldr	r3, [pc, #52]	; (1a000e84 <Chip_Clock_EnableCrystal+0x68>)
1a000e50:	681b      	ldr	r3, [r3, #0]
1a000e52:	4a0d      	ldr	r2, [pc, #52]	; (1a000e88 <Chip_Clock_EnableCrystal+0x6c>)
1a000e54:	4293      	cmp	r3, r2
1a000e56:	d903      	bls.n	1a000e60 <Chip_Clock_EnableCrystal+0x44>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000e58:	687b      	ldr	r3, [r7, #4]
1a000e5a:	f043 0304 	orr.w	r3, r3, #4
1a000e5e:	607b      	str	r3, [r7, #4]

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000e60:	4a07      	ldr	r2, [pc, #28]	; (1a000e80 <Chip_Clock_EnableCrystal+0x64>)
1a000e62:	687b      	ldr	r3, [r7, #4]
1a000e64:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a000e66:	bf00      	nop
1a000e68:	683b      	ldr	r3, [r7, #0]
1a000e6a:	1e5a      	subs	r2, r3, #1
1a000e6c:	603a      	str	r2, [r7, #0]
1a000e6e:	2b00      	cmp	r3, #0
1a000e70:	d1fa      	bne.n	1a000e68 <Chip_Clock_EnableCrystal+0x4c>
}
1a000e72:	bf00      	nop
1a000e74:	370c      	adds	r7, #12
1a000e76:	46bd      	mov	sp, r7
1a000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000e7c:	4770      	bx	lr
1a000e7e:	bf00      	nop
1a000e80:	40050000 	.word	0x40050000
1a000e84:	1a001da0 	.word	0x1a001da0
1a000e88:	01312cff 	.word	0x01312cff

1a000e8c <Chip_Clock_CalcMainPLLValue>:

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000e8c:	b580      	push	{r7, lr}
1a000e8e:	b082      	sub	sp, #8
1a000e90:	af00      	add	r7, sp, #0
1a000e92:	6078      	str	r0, [r7, #4]
1a000e94:	6039      	str	r1, [r7, #0]
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000e96:	683b      	ldr	r3, [r7, #0]
1a000e98:	791b      	ldrb	r3, [r3, #4]
1a000e9a:	4618      	mov	r0, r3
1a000e9c:	f000 f8fe 	bl	1a00109c <Chip_Clock_GetClockInputHz>
1a000ea0:	4602      	mov	r2, r0
1a000ea2:	683b      	ldr	r3, [r7, #0]
1a000ea4:	615a      	str	r2, [r3, #20]

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000ea6:	687b      	ldr	r3, [r7, #4]
1a000ea8:	4a2b      	ldr	r2, [pc, #172]	; (1a000f58 <Chip_Clock_CalcMainPLLValue+0xcc>)
1a000eaa:	4293      	cmp	r3, r2
1a000eac:	d807      	bhi.n	1a000ebe <Chip_Clock_CalcMainPLLValue+0x32>
1a000eae:	687b      	ldr	r3, [r7, #4]
1a000eb0:	4a2a      	ldr	r2, [pc, #168]	; (1a000f5c <Chip_Clock_CalcMainPLLValue+0xd0>)
1a000eb2:	4293      	cmp	r3, r2
1a000eb4:	d903      	bls.n	1a000ebe <Chip_Clock_CalcMainPLLValue+0x32>
1a000eb6:	683b      	ldr	r3, [r7, #0]
1a000eb8:	695b      	ldr	r3, [r3, #20]
1a000eba:	2b00      	cmp	r3, #0
1a000ebc:	d102      	bne.n	1a000ec4 <Chip_Clock_CalcMainPLLValue+0x38>
       return -1;
1a000ebe:	f04f 33ff 	mov.w	r3, #4294967295
1a000ec2:	e044      	b.n	1a000f4e <Chip_Clock_CalcMainPLLValue+0xc2>
   }

   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000ec4:	683b      	ldr	r3, [r7, #0]
1a000ec6:	2280      	movs	r2, #128	; 0x80
1a000ec8:	601a      	str	r2, [r3, #0]
   ppll->nsel = 0;
1a000eca:	683b      	ldr	r3, [r7, #0]
1a000ecc:	2200      	movs	r2, #0
1a000ece:	609a      	str	r2, [r3, #8]
   ppll->psel = 0;
1a000ed0:	683b      	ldr	r3, [r7, #0]
1a000ed2:	2200      	movs	r2, #0
1a000ed4:	60da      	str	r2, [r3, #12]
   ppll->msel = freq / ppll->fin;
1a000ed6:	683b      	ldr	r3, [r7, #0]
1a000ed8:	695b      	ldr	r3, [r3, #20]
1a000eda:	687a      	ldr	r2, [r7, #4]
1a000edc:	fbb2 f3f3 	udiv	r3, r2, r3
1a000ee0:	461a      	mov	r2, r3
1a000ee2:	683b      	ldr	r3, [r7, #0]
1a000ee4:	611a      	str	r2, [r3, #16]

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000ee6:	687b      	ldr	r3, [r7, #4]
1a000ee8:	4a1d      	ldr	r2, [pc, #116]	; (1a000f60 <Chip_Clock_CalcMainPLLValue+0xd4>)
1a000eea:	4293      	cmp	r3, r2
1a000eec:	d909      	bls.n	1a000f02 <Chip_Clock_CalcMainPLLValue+0x76>
1a000eee:	683b      	ldr	r3, [r7, #0]
1a000ef0:	691b      	ldr	r3, [r3, #16]
1a000ef2:	461a      	mov	r2, r3
1a000ef4:	683b      	ldr	r3, [r7, #0]
1a000ef6:	695b      	ldr	r3, [r3, #20]
1a000ef8:	fb03 f302 	mul.w	r3, r3, r2
1a000efc:	687a      	ldr	r2, [r7, #4]
1a000efe:	429a      	cmp	r2, r3
1a000f00:	d00f      	beq.n	1a000f22 <Chip_Clock_CalcMainPLLValue+0x96>
       pll_get_frac(freq, ppll);
1a000f02:	6839      	ldr	r1, [r7, #0]
1a000f04:	6878      	ldr	r0, [r7, #4]
1a000f06:	f7ff fe65 	bl	1a000bd4 <pll_get_frac>
       if (!ppll->nsel) {
1a000f0a:	683b      	ldr	r3, [r7, #0]
1a000f0c:	689b      	ldr	r3, [r3, #8]
1a000f0e:	2b00      	cmp	r3, #0
1a000f10:	d102      	bne.n	1a000f18 <Chip_Clock_CalcMainPLLValue+0x8c>
           return -1;
1a000f12:	f04f 33ff 	mov.w	r3, #4294967295
1a000f16:	e01a      	b.n	1a000f4e <Chip_Clock_CalcMainPLLValue+0xc2>
       }
       ppll->nsel --;
1a000f18:	683b      	ldr	r3, [r7, #0]
1a000f1a:	689b      	ldr	r3, [r3, #8]
1a000f1c:	1e5a      	subs	r2, r3, #1
1a000f1e:	683b      	ldr	r3, [r7, #0]
1a000f20:	609a      	str	r2, [r3, #8]
   }

   if (ppll->msel == 0) {
1a000f22:	683b      	ldr	r3, [r7, #0]
1a000f24:	691b      	ldr	r3, [r3, #16]
1a000f26:	2b00      	cmp	r3, #0
1a000f28:	d102      	bne.n	1a000f30 <Chip_Clock_CalcMainPLLValue+0xa4>
       return - 1;
1a000f2a:	f04f 33ff 	mov.w	r3, #4294967295
1a000f2e:	e00e      	b.n	1a000f4e <Chip_Clock_CalcMainPLLValue+0xc2>
   }

   if (ppll->psel) {
1a000f30:	683b      	ldr	r3, [r7, #0]
1a000f32:	68db      	ldr	r3, [r3, #12]
1a000f34:	2b00      	cmp	r3, #0
1a000f36:	d004      	beq.n	1a000f42 <Chip_Clock_CalcMainPLLValue+0xb6>
       ppll->psel --;
1a000f38:	683b      	ldr	r3, [r7, #0]
1a000f3a:	68db      	ldr	r3, [r3, #12]
1a000f3c:	1e5a      	subs	r2, r3, #1
1a000f3e:	683b      	ldr	r3, [r7, #0]
1a000f40:	60da      	str	r2, [r3, #12]
   }

   ppll->msel --;
1a000f42:	683b      	ldr	r3, [r7, #0]
1a000f44:	691b      	ldr	r3, [r3, #16]
1a000f46:	1e5a      	subs	r2, r3, #1
1a000f48:	683b      	ldr	r3, [r7, #0]
1a000f4a:	611a      	str	r2, [r3, #16]

   return 0;
1a000f4c:	2300      	movs	r3, #0
}
1a000f4e:	4618      	mov	r0, r3
1a000f50:	3708      	adds	r7, #8
1a000f52:	46bd      	mov	sp, r7
1a000f54:	bd80      	pop	{r7, pc}
1a000f56:	bf00      	nop
1a000f58:	0c28cb00 	.word	0x0c28cb00
1a000f5c:	0094c5ef 	.word	0x0094c5ef
1a000f60:	094c5eff 	.word	0x094c5eff

1a000f64 <Chip_Clock_GetMainPLLHz>:
   return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a000f64:	b580      	push	{r7, lr}
1a000f66:	b08c      	sub	sp, #48	; 0x30
1a000f68:	af00      	add	r7, sp, #0
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000f6a:	4b2c      	ldr	r3, [pc, #176]	; (1a00101c <Chip_Clock_GetMainPLLHz+0xb8>)
1a000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000f72:	0e1b      	lsrs	r3, r3, #24
1a000f74:	b2db      	uxtb	r3, r3
1a000f76:	f003 030f 	and.w	r3, r3, #15
1a000f7a:	b2db      	uxtb	r3, r3
1a000f7c:	4618      	mov	r0, r3
1a000f7e:	f000 f88d 	bl	1a00109c <Chip_Clock_GetClockInputHz>
1a000f82:	62b8      	str	r0, [r7, #40]	; 0x28
   uint32_t msel, nsel, psel, direct, fbsel;
   uint32_t m, n, p;
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000f84:	4b26      	ldr	r3, [pc, #152]	; (1a001020 <Chip_Clock_GetMainPLLHz+0xbc>)
1a000f86:	681b      	ldr	r3, [r3, #0]
1a000f88:	607b      	str	r3, [r7, #4]

   /* No lock? */
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000f8a:	4b24      	ldr	r3, [pc, #144]	; (1a00101c <Chip_Clock_GetMainPLLHz+0xb8>)
1a000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a000f8e:	f003 0301 	and.w	r3, r3, #1
1a000f92:	2b00      	cmp	r3, #0
1a000f94:	d101      	bne.n	1a000f9a <Chip_Clock_GetMainPLLHz+0x36>
       return 0;
1a000f96:	2300      	movs	r3, #0
1a000f98:	e03b      	b.n	1a001012 <Chip_Clock_GetMainPLLHz+0xae>
   }

   msel = (PLLReg >> 16) & 0xFF;
1a000f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000f9c:	0c1b      	lsrs	r3, r3, #16
1a000f9e:	b2db      	uxtb	r3, r3
1a000fa0:	627b      	str	r3, [r7, #36]	; 0x24
   nsel = (PLLReg >> 12) & 0x3;
1a000fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000fa4:	0b1b      	lsrs	r3, r3, #12
1a000fa6:	f003 0303 	and.w	r3, r3, #3
1a000faa:	623b      	str	r3, [r7, #32]
   psel = (PLLReg >> 8) & 0x3;
1a000fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000fae:	0a1b      	lsrs	r3, r3, #8
1a000fb0:	f003 0303 	and.w	r3, r3, #3
1a000fb4:	61fb      	str	r3, [r7, #28]
   direct = (PLLReg >> 7) & 0x1;
1a000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000fb8:	09db      	lsrs	r3, r3, #7
1a000fba:	f003 0301 	and.w	r3, r3, #1
1a000fbe:	61bb      	str	r3, [r7, #24]
   fbsel = (PLLReg >> 6) & 0x1;
1a000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000fc2:	099b      	lsrs	r3, r3, #6
1a000fc4:	f003 0301 	and.w	r3, r3, #1
1a000fc8:	617b      	str	r3, [r7, #20]

   m = msel + 1;
1a000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000fcc:	3301      	adds	r3, #1
1a000fce:	613b      	str	r3, [r7, #16]
   n = nsel + 1;
1a000fd0:	6a3b      	ldr	r3, [r7, #32]
1a000fd2:	3301      	adds	r3, #1
1a000fd4:	60fb      	str	r3, [r7, #12]
   p = ptab[psel];
1a000fd6:	1d3a      	adds	r2, r7, #4
1a000fd8:	69fb      	ldr	r3, [r7, #28]
1a000fda:	4413      	add	r3, r2
1a000fdc:	781b      	ldrb	r3, [r3, #0]
1a000fde:	60bb      	str	r3, [r7, #8]

   if (direct || fbsel) {
1a000fe0:	69bb      	ldr	r3, [r7, #24]
1a000fe2:	2b00      	cmp	r3, #0
1a000fe4:	d102      	bne.n	1a000fec <Chip_Clock_GetMainPLLHz+0x88>
1a000fe6:	697b      	ldr	r3, [r7, #20]
1a000fe8:	2b00      	cmp	r3, #0
1a000fea:	d007      	beq.n	1a000ffc <Chip_Clock_GetMainPLLHz+0x98>
       return m * (freq / n);
1a000fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a000fee:	68fb      	ldr	r3, [r7, #12]
1a000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
1a000ff4:	693a      	ldr	r2, [r7, #16]
1a000ff6:	fb02 f303 	mul.w	r3, r2, r3
1a000ffa:	e00a      	b.n	1a001012 <Chip_Clock_GetMainPLLHz+0xae>
   }

   return (m / (2 * p)) * (freq / n);
1a000ffc:	68bb      	ldr	r3, [r7, #8]
1a000ffe:	005b      	lsls	r3, r3, #1
1a001000:	693a      	ldr	r2, [r7, #16]
1a001002:	fbb2 f3f3 	udiv	r3, r2, r3
1a001006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1a001008:	68fa      	ldr	r2, [r7, #12]
1a00100a:	fbb1 f2f2 	udiv	r2, r1, r2
1a00100e:	fb02 f303 	mul.w	r3, r2, r3
}
1a001012:	4618      	mov	r0, r3
1a001014:	3730      	adds	r7, #48	; 0x30
1a001016:	46bd      	mov	sp, r7
1a001018:	bd80      	pop	{r7, pc}
1a00101a:	bf00      	nop
1a00101c:	40050000 	.word	0x40050000
1a001020:	1a001d24 	.word	0x1a001d24

1a001024 <Chip_Clock_GetDividerSource>:
   }
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
1a001024:	b480      	push	{r7}
1a001026:	b085      	sub	sp, #20
1a001028:	af00      	add	r7, sp, #0
1a00102a:	4603      	mov	r3, r0
1a00102c:	71fb      	strb	r3, [r7, #7]
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00102e:	4a0c      	ldr	r2, [pc, #48]	; (1a001060 <Chip_Clock_GetDividerSource+0x3c>)
1a001030:	79fb      	ldrb	r3, [r7, #7]
1a001032:	3312      	adds	r3, #18
1a001034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001038:	60fb      	str	r3, [r7, #12]

   if (reg & 1) {  /* divider is powered down */
1a00103a:	68fb      	ldr	r3, [r7, #12]
1a00103c:	f003 0301 	and.w	r3, r3, #1
1a001040:	2b00      	cmp	r3, #0
1a001042:	d001      	beq.n	1a001048 <Chip_Clock_GetDividerSource+0x24>
       return CLKINPUT_PD;
1a001044:	2311      	movs	r3, #17
1a001046:	e005      	b.n	1a001054 <Chip_Clock_GetDividerSource+0x30>
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001048:	68fb      	ldr	r3, [r7, #12]
1a00104a:	0e1b      	lsrs	r3, r3, #24
1a00104c:	b2db      	uxtb	r3, r3
1a00104e:	f003 031f 	and.w	r3, r3, #31
1a001052:	b2db      	uxtb	r3, r3
}
1a001054:	4618      	mov	r0, r3
1a001056:	3714      	adds	r7, #20
1a001058:	46bd      	mov	sp, r7
1a00105a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00105e:	4770      	bx	lr
1a001060:	40050000 	.word	0x40050000

1a001064 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
1a001064:	b480      	push	{r7}
1a001066:	b083      	sub	sp, #12
1a001068:	af00      	add	r7, sp, #0
1a00106a:	4603      	mov	r3, r0
1a00106c:	71fb      	strb	r3, [r7, #7]
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00106e:	4a09      	ldr	r2, [pc, #36]	; (1a001094 <Chip_Clock_GetDividerDivisor+0x30>)
1a001070:	79fb      	ldrb	r3, [r7, #7]
1a001072:	3312      	adds	r3, #18
1a001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001078:	089b      	lsrs	r3, r3, #2
1a00107a:	b2da      	uxtb	r2, r3
1a00107c:	79fb      	ldrb	r3, [r7, #7]
1a00107e:	4906      	ldr	r1, [pc, #24]	; (1a001098 <Chip_Clock_GetDividerDivisor+0x34>)
1a001080:	5ccb      	ldrb	r3, [r1, r3]
1a001082:	4013      	ands	r3, r2
1a001084:	b2db      	uxtb	r3, r3
}
1a001086:	4618      	mov	r0, r3
1a001088:	370c      	adds	r7, #12
1a00108a:	46bd      	mov	sp, r7
1a00108c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001090:	4770      	bx	lr
1a001092:	bf00      	nop
1a001094:	40050000 	.word	0x40050000
1a001098:	1a001d28 	.word	0x1a001d28

1a00109c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00109c:	b580      	push	{r7, lr}
1a00109e:	b084      	sub	sp, #16
1a0010a0:	af00      	add	r7, sp, #0
1a0010a2:	4603      	mov	r3, r0
1a0010a4:	71fb      	strb	r3, [r7, #7]
   uint32_t rate = 0;
1a0010a6:	2300      	movs	r3, #0
1a0010a8:	60fb      	str	r3, [r7, #12]

   switch (input) {
1a0010aa:	79fb      	ldrb	r3, [r7, #7]
1a0010ac:	2b11      	cmp	r3, #17
1a0010ae:	d87f      	bhi.n	1a0011b0 <Chip_Clock_GetClockInputHz+0x114>
1a0010b0:	a201      	add	r2, pc, #4	; (adr r2, 1a0010b8 <Chip_Clock_GetClockInputHz+0x1c>)
1a0010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0010b6:	bf00      	nop
1a0010b8:	1a001101 	.word	0x1a001101
1a0010bc:	1a001109 	.word	0x1a001109
1a0010c0:	1a00110f 	.word	0x1a00110f
1a0010c4:	1a001123 	.word	0x1a001123
1a0010c8:	1a00113d 	.word	0x1a00113d
1a0010cc:	1a0011b1 	.word	0x1a0011b1
1a0010d0:	1a001145 	.word	0x1a001145
1a0010d4:	1a00114d 	.word	0x1a00114d
1a0010d8:	1a001155 	.word	0x1a001155
1a0010dc:	1a00115d 	.word	0x1a00115d
1a0010e0:	1a0011b1 	.word	0x1a0011b1
1a0010e4:	1a0011b1 	.word	0x1a0011b1
1a0010e8:	1a001165 	.word	0x1a001165
1a0010ec:	1a001173 	.word	0x1a001173
1a0010f0:	1a001181 	.word	0x1a001181
1a0010f4:	1a00118f 	.word	0x1a00118f
1a0010f8:	1a00119d 	.word	0x1a00119d
1a0010fc:	1a0011ab 	.word	0x1a0011ab
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
1a001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1a001104:	60fb      	str	r3, [r7, #12]
       break;
1a001106:	e056      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a001108:	4b2d      	ldr	r3, [pc, #180]	; (1a0011c0 <Chip_Clock_GetClockInputHz+0x124>)
1a00110a:	60fb      	str	r3, [r7, #12]
       break;
1a00110c:	e053      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00110e:	4b2d      	ldr	r3, [pc, #180]	; (1a0011c4 <Chip_Clock_GetClockInputHz+0x128>)
1a001110:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001114:	f003 0307 	and.w	r3, r3, #7
1a001118:	2b04      	cmp	r3, #4
1a00111a:	d04b      	beq.n	1a0011b4 <Chip_Clock_GetClockInputHz+0x118>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a00111c:	4b2a      	ldr	r3, [pc, #168]	; (1a0011c8 <Chip_Clock_GetClockInputHz+0x12c>)
1a00111e:	60fb      	str	r3, [r7, #12]
       }
       break;
1a001120:	e048      	b.n	1a0011b4 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001122:	4b28      	ldr	r3, [pc, #160]	; (1a0011c4 <Chip_Clock_GetClockInputHz+0x128>)
1a001124:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001128:	f003 0307 	and.w	r3, r3, #7
1a00112c:	2b04      	cmp	r3, #4
1a00112e:	d002      	beq.n	1a001136 <Chip_Clock_GetClockInputHz+0x9a>
           rate = 25000000; /* MII uses 25 MHz */
1a001130:	4b25      	ldr	r3, [pc, #148]	; (1a0011c8 <Chip_Clock_GetClockInputHz+0x12c>)
1a001132:	60fb      	str	r3, [r7, #12]
       } else {
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;
1a001134:	e03f      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>
           rate = 50000000; /* RMII uses 50 MHz */
1a001136:	4b25      	ldr	r3, [pc, #148]	; (1a0011cc <Chip_Clock_GetClockInputHz+0x130>)
1a001138:	60fb      	str	r3, [r7, #12]
       break;
1a00113a:	e03c      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a00113c:	4b24      	ldr	r3, [pc, #144]	; (1a0011d0 <Chip_Clock_GetClockInputHz+0x134>)
1a00113e:	681b      	ldr	r3, [r3, #0]
1a001140:	60fb      	str	r3, [r7, #12]
       break;
1a001142:	e038      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a001144:	4b23      	ldr	r3, [pc, #140]	; (1a0011d4 <Chip_Clock_GetClockInputHz+0x138>)
1a001146:	681b      	ldr	r3, [r3, #0]
1a001148:	60fb      	str	r3, [r7, #12]
       break;
1a00114a:	e034      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00114c:	4b22      	ldr	r3, [pc, #136]	; (1a0011d8 <Chip_Clock_GetClockInputHz+0x13c>)
1a00114e:	681b      	ldr	r3, [r3, #0]
1a001150:	60fb      	str	r3, [r7, #12]
       break;
1a001152:	e030      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001154:	4b20      	ldr	r3, [pc, #128]	; (1a0011d8 <Chip_Clock_GetClockInputHz+0x13c>)
1a001156:	685b      	ldr	r3, [r3, #4]
1a001158:	60fb      	str	r3, [r7, #12]
       break;
1a00115a:	e02c      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a00115c:	f7ff ff02 	bl	1a000f64 <Chip_Clock_GetMainPLLHz>
1a001160:	60f8      	str	r0, [r7, #12]
       break;
1a001162:	e028      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001164:	79fb      	ldrb	r3, [r7, #7]
1a001166:	2100      	movs	r1, #0
1a001168:	4618      	mov	r0, r3
1a00116a:	f7ff fdee 	bl	1a000d4a <Chip_Clock_GetDivRate>
1a00116e:	60f8      	str	r0, [r7, #12]
       break;
1a001170:	e021      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001172:	79fb      	ldrb	r3, [r7, #7]
1a001174:	2101      	movs	r1, #1
1a001176:	4618      	mov	r0, r3
1a001178:	f7ff fde7 	bl	1a000d4a <Chip_Clock_GetDivRate>
1a00117c:	60f8      	str	r0, [r7, #12]
       break;
1a00117e:	e01a      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001180:	79fb      	ldrb	r3, [r7, #7]
1a001182:	2102      	movs	r1, #2
1a001184:	4618      	mov	r0, r3
1a001186:	f7ff fde0 	bl	1a000d4a <Chip_Clock_GetDivRate>
1a00118a:	60f8      	str	r0, [r7, #12]
       break;
1a00118c:	e013      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00118e:	79fb      	ldrb	r3, [r7, #7]
1a001190:	2103      	movs	r1, #3
1a001192:	4618      	mov	r0, r3
1a001194:	f7ff fdd9 	bl	1a000d4a <Chip_Clock_GetDivRate>
1a001198:	60f8      	str	r0, [r7, #12]
       break;
1a00119a:	e00c      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00119c:	79fb      	ldrb	r3, [r7, #7]
1a00119e:	2104      	movs	r1, #4
1a0011a0:	4618      	mov	r0, r3
1a0011a2:	f7ff fdd2 	bl	1a000d4a <Chip_Clock_GetDivRate>
1a0011a6:	60f8      	str	r0, [r7, #12]
       break;
1a0011a8:	e005      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   case CLKINPUT_PD:
       rate = 0;
1a0011aa:	2300      	movs	r3, #0
1a0011ac:	60fb      	str	r3, [r7, #12]
       break;
1a0011ae:	e002      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>

   default:
       break;
1a0011b0:	bf00      	nop
1a0011b2:	e000      	b.n	1a0011b6 <Chip_Clock_GetClockInputHz+0x11a>
       break;
1a0011b4:	bf00      	nop
   }

   return rate;
1a0011b6:	68fb      	ldr	r3, [r7, #12]
}
1a0011b8:	4618      	mov	r0, r3
1a0011ba:	3710      	adds	r7, #16
1a0011bc:	46bd      	mov	sp, r7
1a0011be:	bd80      	pop	{r7, pc}
1a0011c0:	00b71b00 	.word	0x00b71b00
1a0011c4:	40043000 	.word	0x40043000
1a0011c8:	017d7840 	.word	0x017d7840
1a0011cc:	02faf080 	.word	0x02faf080
1a0011d0:	1a001d9c 	.word	0x1a001d9c
1a0011d4:	1a001da0 	.word	0x1a001da0
1a0011d8:	10000068 	.word	0x10000068

1a0011dc <Chip_Clock_GetBaseClocktHz>:

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a0011dc:	b580      	push	{r7, lr}
1a0011de:	b082      	sub	sp, #8
1a0011e0:	af00      	add	r7, sp, #0
1a0011e2:	4603      	mov	r3, r0
1a0011e4:	71fb      	strb	r3, [r7, #7]
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0011e6:	79fb      	ldrb	r3, [r7, #7]
1a0011e8:	4618      	mov	r0, r3
1a0011ea:	f000 f857 	bl	1a00129c <Chip_Clock_GetBaseClock>
1a0011ee:	4603      	mov	r3, r0
1a0011f0:	4618      	mov	r0, r3
1a0011f2:	f7ff ff53 	bl	1a00109c <Chip_Clock_GetClockInputHz>
1a0011f6:	4603      	mov	r3, r0
}
1a0011f8:	4618      	mov	r0, r3
1a0011fa:	3708      	adds	r7, #8
1a0011fc:	46bd      	mov	sp, r7
1a0011fe:	bd80      	pop	{r7, pc}

1a001200 <Chip_Clock_SetBaseClock>:

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001200:	b490      	push	{r4, r7}
1a001202:	b084      	sub	sp, #16
1a001204:	af00      	add	r7, sp, #0
1a001206:	4604      	mov	r4, r0
1a001208:	4608      	mov	r0, r1
1a00120a:	4611      	mov	r1, r2
1a00120c:	461a      	mov	r2, r3
1a00120e:	4623      	mov	r3, r4
1a001210:	71fb      	strb	r3, [r7, #7]
1a001212:	4603      	mov	r3, r0
1a001214:	71bb      	strb	r3, [r7, #6]
1a001216:	460b      	mov	r3, r1
1a001218:	717b      	strb	r3, [r7, #5]
1a00121a:	4613      	mov	r3, r2
1a00121c:	713b      	strb	r3, [r7, #4]
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00121e:	4a1d      	ldr	r2, [pc, #116]	; (1a001294 <Chip_Clock_SetBaseClock+0x94>)
1a001220:	79fb      	ldrb	r3, [r7, #7]
1a001222:	3316      	adds	r3, #22
1a001224:	009b      	lsls	r3, r3, #2
1a001226:	4413      	add	r3, r2
1a001228:	685b      	ldr	r3, [r3, #4]
1a00122a:	60fb      	str	r3, [r7, #12]

   if (BaseClock < CLK_BASE_NONE) {
1a00122c:	79fb      	ldrb	r3, [r7, #7]
1a00122e:	2b1b      	cmp	r3, #27
1a001230:	d822      	bhi.n	1a001278 <Chip_Clock_SetBaseClock+0x78>
       if (Input != CLKINPUT_PD) {
1a001232:	79bb      	ldrb	r3, [r7, #6]
1a001234:	2b11      	cmp	r3, #17
1a001236:	d028      	beq.n	1a00128a <Chip_Clock_SetBaseClock+0x8a>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001238:	68fa      	ldr	r2, [r7, #12]
1a00123a:	4b17      	ldr	r3, [pc, #92]	; (1a001298 <Chip_Clock_SetBaseClock+0x98>)
1a00123c:	4013      	ands	r3, r2
1a00123e:	60fb      	str	r3, [r7, #12]

           if (autoblocken) {
1a001240:	797b      	ldrb	r3, [r7, #5]
1a001242:	2b00      	cmp	r3, #0
1a001244:	d003      	beq.n	1a00124e <Chip_Clock_SetBaseClock+0x4e>
               reg |= (1 << 11);
1a001246:	68fb      	ldr	r3, [r7, #12]
1a001248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00124c:	60fb      	str	r3, [r7, #12]
           }
           if (powerdn) {
1a00124e:	793b      	ldrb	r3, [r7, #4]
1a001250:	2b00      	cmp	r3, #0
1a001252:	d003      	beq.n	1a00125c <Chip_Clock_SetBaseClock+0x5c>
               reg |= (1 << 0);
1a001254:	68fb      	ldr	r3, [r7, #12]
1a001256:	f043 0301 	orr.w	r3, r3, #1
1a00125a:	60fb      	str	r3, [r7, #12]
           }

           /* Set clock source */
           reg |= (Input << 24);
1a00125c:	79bb      	ldrb	r3, [r7, #6]
1a00125e:	061b      	lsls	r3, r3, #24
1a001260:	461a      	mov	r2, r3
1a001262:	68fb      	ldr	r3, [r7, #12]
1a001264:	4313      	orrs	r3, r2
1a001266:	60fb      	str	r3, [r7, #12]

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001268:	4a0a      	ldr	r2, [pc, #40]	; (1a001294 <Chip_Clock_SetBaseClock+0x94>)
1a00126a:	79fb      	ldrb	r3, [r7, #7]
1a00126c:	3316      	adds	r3, #22
1a00126e:	009b      	lsls	r3, r3, #2
1a001270:	4413      	add	r3, r2
1a001272:	68fa      	ldr	r2, [r7, #12]
1a001274:	605a      	str	r2, [r3, #4]
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
   }
}
1a001276:	e008      	b.n	1a00128a <Chip_Clock_SetBaseClock+0x8a>
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a001278:	4906      	ldr	r1, [pc, #24]	; (1a001294 <Chip_Clock_SetBaseClock+0x94>)
1a00127a:	79fb      	ldrb	r3, [r7, #7]
1a00127c:	68fa      	ldr	r2, [r7, #12]
1a00127e:	f042 0201 	orr.w	r2, r2, #1
1a001282:	3316      	adds	r3, #22
1a001284:	009b      	lsls	r3, r3, #2
1a001286:	440b      	add	r3, r1
1a001288:	605a      	str	r2, [r3, #4]
}
1a00128a:	bf00      	nop
1a00128c:	3710      	adds	r7, #16
1a00128e:	46bd      	mov	sp, r7
1a001290:	bc90      	pop	{r4, r7}
1a001292:	4770      	bx	lr
1a001294:	40050000 	.word	0x40050000
1a001298:	e0fff7fe 	.word	0xe0fff7fe

1a00129c <Chip_Clock_GetBaseClock>:
   return enabled;
}

/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a00129c:	b480      	push	{r7}
1a00129e:	b085      	sub	sp, #20
1a0012a0:	af00      	add	r7, sp, #0
1a0012a2:	4603      	mov	r3, r0
1a0012a4:	71fb      	strb	r3, [r7, #7]
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a0012a6:	79fb      	ldrb	r3, [r7, #7]
1a0012a8:	2b1b      	cmp	r3, #27
1a0012aa:	d901      	bls.n	1a0012b0 <Chip_Clock_GetBaseClock+0x14>
       return CLKINPUT_PD;
1a0012ac:	2311      	movs	r3, #17
1a0012ae:	e013      	b.n	1a0012d8 <Chip_Clock_GetBaseClock+0x3c>
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a0012b0:	4a0c      	ldr	r2, [pc, #48]	; (1a0012e4 <Chip_Clock_GetBaseClock+0x48>)
1a0012b2:	79fb      	ldrb	r3, [r7, #7]
1a0012b4:	3316      	adds	r3, #22
1a0012b6:	009b      	lsls	r3, r3, #2
1a0012b8:	4413      	add	r3, r2
1a0012ba:	685b      	ldr	r3, [r3, #4]
1a0012bc:	60fb      	str	r3, [r7, #12]

   /* base clock is powered down? */
   if (reg & 1) {
1a0012be:	68fb      	ldr	r3, [r7, #12]
1a0012c0:	f003 0301 	and.w	r3, r3, #1
1a0012c4:	2b00      	cmp	r3, #0
1a0012c6:	d001      	beq.n	1a0012cc <Chip_Clock_GetBaseClock+0x30>
       return CLKINPUT_PD;
1a0012c8:	2311      	movs	r3, #17
1a0012ca:	e005      	b.n	1a0012d8 <Chip_Clock_GetBaseClock+0x3c>
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0012cc:	68fb      	ldr	r3, [r7, #12]
1a0012ce:	0e1b      	lsrs	r3, r3, #24
1a0012d0:	b2db      	uxtb	r3, r3
1a0012d2:	f003 031f 	and.w	r3, r3, #31
1a0012d6:	b2db      	uxtb	r3, r3
}
1a0012d8:	4618      	mov	r0, r3
1a0012da:	3714      	adds	r7, #20
1a0012dc:	46bd      	mov	sp, r7
1a0012de:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0012e2:	4770      	bx	lr
1a0012e4:	40050000 	.word	0x40050000

1a0012e8 <Chip_Clock_EnableOpts>:

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
1a0012e8:	b480      	push	{r7}
1a0012ea:	b085      	sub	sp, #20
1a0012ec:	af00      	add	r7, sp, #0
1a0012ee:	603b      	str	r3, [r7, #0]
1a0012f0:	4603      	mov	r3, r0
1a0012f2:	80fb      	strh	r3, [r7, #6]
1a0012f4:	460b      	mov	r3, r1
1a0012f6:	717b      	strb	r3, [r7, #5]
1a0012f8:	4613      	mov	r3, r2
1a0012fa:	713b      	strb	r3, [r7, #4]
   uint32_t reg = 1;
1a0012fc:	2301      	movs	r3, #1
1a0012fe:	60fb      	str	r3, [r7, #12]

   if (autoen) {
1a001300:	797b      	ldrb	r3, [r7, #5]
1a001302:	2b00      	cmp	r3, #0
1a001304:	d003      	beq.n	1a00130e <Chip_Clock_EnableOpts+0x26>
       reg |= (1 << 1);
1a001306:	68fb      	ldr	r3, [r7, #12]
1a001308:	f043 0302 	orr.w	r3, r3, #2
1a00130c:	60fb      	str	r3, [r7, #12]
   }
   if (wakeupen) {
1a00130e:	793b      	ldrb	r3, [r7, #4]
1a001310:	2b00      	cmp	r3, #0
1a001312:	d003      	beq.n	1a00131c <Chip_Clock_EnableOpts+0x34>
       reg |= (1 << 2);
1a001314:	68fb      	ldr	r3, [r7, #12]
1a001316:	f043 0304 	orr.w	r3, r3, #4
1a00131a:	60fb      	str	r3, [r7, #12]
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a00131c:	683b      	ldr	r3, [r7, #0]
1a00131e:	2b02      	cmp	r3, #2
1a001320:	d103      	bne.n	1a00132a <Chip_Clock_EnableOpts+0x42>
       reg |= (1 << 5);
1a001322:	68fb      	ldr	r3, [r7, #12]
1a001324:	f043 0320 	orr.w	r3, r3, #32
1a001328:	60fb      	str	r3, [r7, #12]
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a00132a:	88fb      	ldrh	r3, [r7, #6]
1a00132c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a001330:	d308      	bcc.n	1a001344 <Chip_Clock_EnableOpts+0x5c>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001332:	490a      	ldr	r1, [pc, #40]	; (1a00135c <Chip_Clock_EnableOpts+0x74>)
1a001334:	88fb      	ldrh	r3, [r7, #6]
1a001336:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a00133a:	3320      	adds	r3, #32
1a00133c:	68fa      	ldr	r2, [r7, #12]
1a00133e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
   }
}
1a001342:	e005      	b.n	1a001350 <Chip_Clock_EnableOpts+0x68>
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001344:	4906      	ldr	r1, [pc, #24]	; (1a001360 <Chip_Clock_EnableOpts+0x78>)
1a001346:	88fb      	ldrh	r3, [r7, #6]
1a001348:	3320      	adds	r3, #32
1a00134a:	68fa      	ldr	r2, [r7, #12]
1a00134c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
1a001350:	bf00      	nop
1a001352:	3714      	adds	r7, #20
1a001354:	46bd      	mov	sp, r7
1a001356:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00135a:	4770      	bx	lr
1a00135c:	40052000 	.word	0x40052000
1a001360:	40051000 	.word	0x40051000

1a001364 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001364:	b580      	push	{r7, lr}
1a001366:	b086      	sub	sp, #24
1a001368:	af00      	add	r7, sp, #0
1a00136a:	4603      	mov	r3, r0
1a00136c:	80fb      	strh	r3, [r7, #6]
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a00136e:	88fb      	ldrh	r3, [r7, #6]
1a001370:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a001374:	d308      	bcc.n	1a001388 <Chip_Clock_GetRate+0x24>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001376:	4a1b      	ldr	r2, [pc, #108]	; (1a0013e4 <Chip_Clock_GetRate+0x80>)
1a001378:	88fb      	ldrh	r3, [r7, #6]
1a00137a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a00137e:	3320      	adds	r3, #32
1a001380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a001384:	617b      	str	r3, [r7, #20]
1a001386:	e005      	b.n	1a001394 <Chip_Clock_GetRate+0x30>
   }
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001388:	4a17      	ldr	r2, [pc, #92]	; (1a0013e8 <Chip_Clock_GetRate+0x84>)
1a00138a:	88fb      	ldrh	r3, [r7, #6]
1a00138c:	3320      	adds	r3, #32
1a00138e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a001392:	617b      	str	r3, [r7, #20]
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a001394:	697b      	ldr	r3, [r7, #20]
1a001396:	f003 0301 	and.w	r3, r3, #1
1a00139a:	2b00      	cmp	r3, #0
1a00139c:	d01b      	beq.n	1a0013d6 <Chip_Clock_GetRate+0x72>
       /* Get base clock for this peripheral clock */
       baseclk = Chip_Clock_FindBaseClock(clk);
1a00139e:	88fb      	ldrh	r3, [r7, #6]
1a0013a0:	4618      	mov	r0, r3
1a0013a2:	f7ff fcf3 	bl	1a000d8c <Chip_Clock_FindBaseClock>
1a0013a6:	4603      	mov	r3, r0
1a0013a8:	72fb      	strb	r3, [r7, #11]

       /* Get base clock rate */
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0013aa:	7afb      	ldrb	r3, [r7, #11]
1a0013ac:	4618      	mov	r0, r3
1a0013ae:	f7ff ff15 	bl	1a0011dc <Chip_Clock_GetBaseClocktHz>
1a0013b2:	60f8      	str	r0, [r7, #12]

       /* Get divider for this clock */
       if (((reg >> 5) & 0x7) == 0) {
1a0013b4:	697b      	ldr	r3, [r7, #20]
1a0013b6:	095b      	lsrs	r3, r3, #5
1a0013b8:	f003 0307 	and.w	r3, r3, #7
1a0013bc:	2b00      	cmp	r3, #0
1a0013be:	d102      	bne.n	1a0013c6 <Chip_Clock_GetRate+0x62>
           div = 1;
1a0013c0:	2301      	movs	r3, #1
1a0013c2:	613b      	str	r3, [r7, #16]
1a0013c4:	e001      	b.n	1a0013ca <Chip_Clock_GetRate+0x66>
       }
       else {
           div = 2;/* No other dividers supported */
1a0013c6:	2302      	movs	r3, #2
1a0013c8:	613b      	str	r3, [r7, #16]

       }
       rate = rate / div;
1a0013ca:	68fa      	ldr	r2, [r7, #12]
1a0013cc:	693b      	ldr	r3, [r7, #16]
1a0013ce:	fbb2 f3f3 	udiv	r3, r2, r3
1a0013d2:	60fb      	str	r3, [r7, #12]
1a0013d4:	e001      	b.n	1a0013da <Chip_Clock_GetRate+0x76>
   }
   else {
       rate = 0;
1a0013d6:	2300      	movs	r3, #0
1a0013d8:	60fb      	str	r3, [r7, #12]
   }

   return rate;
1a0013da:	68fb      	ldr	r3, [r7, #12]
}
1a0013dc:	4618      	mov	r0, r3
1a0013de:	3718      	adds	r7, #24
1a0013e0:	46bd      	mov	sp, r7
1a0013e2:	bd80      	pop	{r7, pc}
1a0013e4:	40052000 	.word	0x40052000
1a0013e8:	40051000 	.word	0x40051000

1a0013ec <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0013ec:	b580      	push	{r7, lr}
1a0013ee:	b082      	sub	sp, #8
1a0013f0:	af00      	add	r7, sp, #0
#if defined(CORE_M3) || defined(CORE_M4)
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;
1a0013f2:	4b05      	ldr	r3, [pc, #20]	; (1a001408 <SystemInit+0x1c>)
1a0013f4:	607b      	str	r3, [r7, #4]

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0013f6:	f7ff f96f 	bl	1a0006d8 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a0013fa:	f000 f8db 	bl	1a0015b4 <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a0013fe:	bf00      	nop
1a001400:	3708      	adds	r7, #8
1a001402:	46bd      	mov	sp, r7
1a001404:	bd80      	pop	{r7, pc}
1a001406:	bf00      	nop
1a001408:	e000ed08 	.word	0xe000ed08

1a00140c <_sbrk_r>:
   UNUSED(oldf, newf);
   SET_ERR(ENOSYS);
   return -1;
}

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
1a00140c:	b480      	push	{r7}
1a00140e:	b085      	sub	sp, #20
1a001410:	af00      	add	r7, sp, #0
1a001412:	6078      	str	r0, [r7, #4]
1a001414:	6039      	str	r1, [r7, #0]
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001416:	4b0b      	ldr	r3, [pc, #44]	; (1a001444 <_sbrk_r+0x38>)
1a001418:	681b      	ldr	r3, [r3, #0]
1a00141a:	2b00      	cmp	r3, #0
1a00141c:	d102      	bne.n	1a001424 <_sbrk_r+0x18>
       heap_end = &_pvHeapStart;
1a00141e:	4b09      	ldr	r3, [pc, #36]	; (1a001444 <_sbrk_r+0x38>)
1a001420:	4a09      	ldr	r2, [pc, #36]	; (1a001448 <_sbrk_r+0x3c>)
1a001422:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a001424:	4b07      	ldr	r3, [pc, #28]	; (1a001444 <_sbrk_r+0x38>)
1a001426:	681b      	ldr	r3, [r3, #0]
1a001428:	60fb      	str	r3, [r7, #12]
   heap_end += incr;
1a00142a:	4b06      	ldr	r3, [pc, #24]	; (1a001444 <_sbrk_r+0x38>)
1a00142c:	681a      	ldr	r2, [r3, #0]
1a00142e:	683b      	ldr	r3, [r7, #0]
1a001430:	4413      	add	r3, r2
1a001432:	4a04      	ldr	r2, [pc, #16]	; (1a001444 <_sbrk_r+0x38>)
1a001434:	6013      	str	r3, [r2, #0]
   return prev_heap_end;
1a001436:	68fb      	ldr	r3, [r7, #12]
}
1a001438:	4618      	mov	r0, r3
1a00143a:	3714      	adds	r7, #20
1a00143c:	46bd      	mov	sp, r7
1a00143e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001442:	4770      	bx	lr
1a001444:	10000070 	.word	0x10000070
1a001448:	1000008c 	.word	0x1000008c

1a00144c <Chip_SCU_PinMuxSet>:
 * @return Nothing
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a00144c:	b480      	push	{r7}
1a00144e:	b083      	sub	sp, #12
1a001450:	af00      	add	r7, sp, #0
1a001452:	4603      	mov	r3, r0
1a001454:	71fb      	strb	r3, [r7, #7]
1a001456:	460b      	mov	r3, r1
1a001458:	71bb      	strb	r3, [r7, #6]
1a00145a:	4613      	mov	r3, r2
1a00145c:	80bb      	strh	r3, [r7, #4]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00145e:	4807      	ldr	r0, [pc, #28]	; (1a00147c <Chip_SCU_PinMuxSet+0x30>)
1a001460:	79f9      	ldrb	r1, [r7, #7]
1a001462:	79bb      	ldrb	r3, [r7, #6]
1a001464:	88ba      	ldrh	r2, [r7, #4]
1a001466:	0149      	lsls	r1, r1, #5
1a001468:	440b      	add	r3, r1
1a00146a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a00146e:	bf00      	nop
1a001470:	370c      	adds	r7, #12
1a001472:	46bd      	mov	sp, r7
1a001474:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001478:	4770      	bx	lr
1a00147a:	bf00      	nop
1a00147c:	40086000 	.word	0x40086000

1a001480 <Chip_SCU_SetPinMuxing>:
 * @param  pinArray    : Pointer to array of pin mux selections
 * @param  arrayLength : Number of entries in pinArray
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
1a001480:	b580      	push	{r7, lr}
1a001482:	b084      	sub	sp, #16
1a001484:	af00      	add	r7, sp, #0
1a001486:	6078      	str	r0, [r7, #4]
1a001488:	6039      	str	r1, [r7, #0]
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a00148a:	2300      	movs	r3, #0
1a00148c:	60fb      	str	r3, [r7, #12]
1a00148e:	e014      	b.n	1a0014ba <Chip_SCU_SetPinMuxing+0x3a>
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001490:	68fb      	ldr	r3, [r7, #12]
1a001492:	009b      	lsls	r3, r3, #2
1a001494:	687a      	ldr	r2, [r7, #4]
1a001496:	4413      	add	r3, r2
1a001498:	7818      	ldrb	r0, [r3, #0]
1a00149a:	68fb      	ldr	r3, [r7, #12]
1a00149c:	009b      	lsls	r3, r3, #2
1a00149e:	687a      	ldr	r2, [r7, #4]
1a0014a0:	4413      	add	r3, r2
1a0014a2:	7859      	ldrb	r1, [r3, #1]
1a0014a4:	68fb      	ldr	r3, [r7, #12]
1a0014a6:	009b      	lsls	r3, r3, #2
1a0014a8:	687a      	ldr	r2, [r7, #4]
1a0014aa:	4413      	add	r3, r2
1a0014ac:	885b      	ldrh	r3, [r3, #2]
1a0014ae:	461a      	mov	r2, r3
1a0014b0:	f7ff ffcc 	bl	1a00144c <Chip_SCU_PinMuxSet>
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0014b4:	68fb      	ldr	r3, [r7, #12]
1a0014b6:	3301      	adds	r3, #1
1a0014b8:	60fb      	str	r3, [r7, #12]
1a0014ba:	68fa      	ldr	r2, [r7, #12]
1a0014bc:	683b      	ldr	r3, [r7, #0]
1a0014be:	429a      	cmp	r2, r3
1a0014c0:	d3e6      	bcc.n	1a001490 <Chip_SCU_SetPinMuxing+0x10>
   }
}
1a0014c2:	bf00      	nop
1a0014c4:	3710      	adds	r7, #16
1a0014c6:	46bd      	mov	sp, r7
1a0014c8:	bd80      	pop	{r7, pc}
1a0014ca:	Address 0x1a0014ca is out of bounds.


1a0014cc <Chip_CREG_SetFlashAcceleration>:
 * This function should be called with the higher frequency before the clock frequency is
 * increased and it should be called with the new lower value after the clock frequency is
 * decreased.
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
1a0014cc:	b480      	push	{r7}
1a0014ce:	b085      	sub	sp, #20
1a0014d0:	af00      	add	r7, sp, #0
1a0014d2:	6078      	str	r0, [r7, #4]
   uint32_t FAValue = Hz / 21510000;
1a0014d4:	687b      	ldr	r3, [r7, #4]
1a0014d6:	4a10      	ldr	r2, [pc, #64]	; (1a001518 <Chip_CREG_SetFlashAcceleration+0x4c>)
1a0014d8:	fba2 2303 	umull	r2, r3, r2, r3
1a0014dc:	0ddb      	lsrs	r3, r3, #23
1a0014de:	60fb      	str	r3, [r7, #12]

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0014e0:	4b0e      	ldr	r3, [pc, #56]	; (1a00151c <Chip_CREG_SetFlashAcceleration+0x50>)
1a0014e2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a0014e6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a0014ea:	68fb      	ldr	r3, [r7, #12]
1a0014ec:	031b      	lsls	r3, r3, #12
1a0014ee:	490b      	ldr	r1, [pc, #44]	; (1a00151c <Chip_CREG_SetFlashAcceleration+0x50>)
1a0014f0:	4313      	orrs	r3, r2
1a0014f2:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0014f6:	4b09      	ldr	r3, [pc, #36]	; (1a00151c <Chip_CREG_SetFlashAcceleration+0x50>)
1a0014f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a0014fc:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a001500:	68fb      	ldr	r3, [r7, #12]
1a001502:	031b      	lsls	r3, r3, #12
1a001504:	4905      	ldr	r1, [pc, #20]	; (1a00151c <Chip_CREG_SetFlashAcceleration+0x50>)
1a001506:	4313      	orrs	r3, r2
1a001508:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
}
1a00150c:	bf00      	nop
1a00150e:	3714      	adds	r7, #20
1a001510:	46bd      	mov	sp, r7
1a001512:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001516:	4770      	bx	lr
1a001518:	63d6267d 	.word	0x63d6267d
1a00151c:	40043000 	.word	0x40043000

1a001520 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a001520:	b580      	push	{r7, lr}
1a001522:	af00      	add	r7, sp, #0
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
1a001524:	2118      	movs	r1, #24
1a001526:	4802      	ldr	r0, [pc, #8]	; (1a001530 <Board_SetupMuxing+0x10>)
1a001528:	f7ff ffaa 	bl	1a001480 <Chip_SCU_SetPinMuxing>
}
1a00152c:	bf00      	nop
1a00152e:	bd80      	pop	{r7, pc}
1a001530:	1a001d3c 	.word	0x1a001d3c

1a001534 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001534:	b590      	push	{r4, r7, lr}
1a001536:	b083      	sub	sp, #12
1a001538:	af00      	add	r7, sp, #0
   int i;

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
1a00153a:	481b      	ldr	r0, [pc, #108]	; (1a0015a8 <Board_SetupClocking+0x74>)
1a00153c:	f7ff ffc6 	bl	1a0014cc <Chip_CREG_SetFlashAcceleration>

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001540:	2201      	movs	r2, #1
1a001542:	4919      	ldr	r1, [pc, #100]	; (1a0015a8 <Board_SetupClocking+0x74>)
1a001544:	2006      	movs	r0, #6
1a001546:	f7ff f819 	bl	1a00057c <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00154a:	2300      	movs	r3, #0
1a00154c:	607b      	str	r3, [r7, #4]
1a00154e:	e018      	b.n	1a001582 <Board_SetupClocking+0x4e>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001550:	4a16      	ldr	r2, [pc, #88]	; (1a0015ac <Board_SetupClocking+0x78>)
1a001552:	687b      	ldr	r3, [r7, #4]
1a001554:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a001558:	4a14      	ldr	r2, [pc, #80]	; (1a0015ac <Board_SetupClocking+0x78>)
1a00155a:	687b      	ldr	r3, [r7, #4]
1a00155c:	009b      	lsls	r3, r3, #2
1a00155e:	4413      	add	r3, r2
1a001560:	7859      	ldrb	r1, [r3, #1]
1a001562:	4a12      	ldr	r2, [pc, #72]	; (1a0015ac <Board_SetupClocking+0x78>)
1a001564:	687b      	ldr	r3, [r7, #4]
1a001566:	009b      	lsls	r3, r3, #2
1a001568:	4413      	add	r3, r2
1a00156a:	789c      	ldrb	r4, [r3, #2]
1a00156c:	4a0f      	ldr	r2, [pc, #60]	; (1a0015ac <Board_SetupClocking+0x78>)
1a00156e:	687b      	ldr	r3, [r7, #4]
1a001570:	009b      	lsls	r3, r3, #2
1a001572:	4413      	add	r3, r2
1a001574:	78db      	ldrb	r3, [r3, #3]
1a001576:	4622      	mov	r2, r4
1a001578:	f7ff fe42 	bl	1a001200 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00157c:	687b      	ldr	r3, [r7, #4]
1a00157e:	3301      	adds	r3, #1
1a001580:	607b      	str	r3, [r7, #4]
1a001582:	687b      	ldr	r3, [r7, #4]
1a001584:	2b02      	cmp	r3, #2
1a001586:	d9e3      	bls.n	1a001550 <Board_SetupClocking+0x1c>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001588:	4b09      	ldr	r3, [pc, #36]	; (1a0015b0 <Board_SetupClocking+0x7c>)
1a00158a:	685b      	ldr	r3, [r3, #4]
1a00158c:	4a08      	ldr	r2, [pc, #32]	; (1a0015b0 <Board_SetupClocking+0x7c>)
1a00158e:	f023 030c 	bic.w	r3, r3, #12
1a001592:	6053      	str	r3, [r2, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001594:	4b06      	ldr	r3, [pc, #24]	; (1a0015b0 <Board_SetupClocking+0x7c>)
1a001596:	685b      	ldr	r3, [r3, #4]
1a001598:	4a05      	ldr	r2, [pc, #20]	; (1a0015b0 <Board_SetupClocking+0x7c>)
1a00159a:	f043 0303 	orr.w	r3, r3, #3
1a00159e:	6053      	str	r3, [r2, #4]
}
1a0015a0:	bf00      	nop
1a0015a2:	370c      	adds	r7, #12
1a0015a4:	46bd      	mov	sp, r7
1a0015a6:	bd90      	pop	{r4, r7, pc}
1a0015a8:	0c28cb00 	.word	0x0c28cb00
1a0015ac:	1a001d30 	.word	0x1a001d30
1a0015b0:	40043000 	.word	0x40043000

1a0015b4 <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0015b4:	b580      	push	{r7, lr}
1a0015b6:	af00      	add	r7, sp, #0
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a0015b8:	f7ff ffb2 	bl	1a001520 <Board_SetupMuxing>
   Board_SetupClocking();
1a0015bc:	f7ff ffba 	bl	1a001534 <Board_SetupClocking>
}
1a0015c0:	bf00      	nop
1a0015c2:	bd80      	pop	{r7, pc}

1a0015c4 <ResetISR>:
void ResetISR(void) {
1a0015c4:	b580      	push	{r7, lr}
1a0015c6:	b088      	sub	sp, #32
1a0015c8:	af00      	add	r7, sp, #0
    __asm volatile ("cpsid i");
1a0015ca:	b672      	cpsid	i
    unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
1a0015cc:	4b27      	ldr	r3, [pc, #156]	; (1a00166c <ResetISR+0xa8>)
1a0015ce:	617b      	str	r3, [r7, #20]
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0015d0:	697b      	ldr	r3, [r7, #20]
1a0015d2:	4a27      	ldr	r2, [pc, #156]	; (1a001670 <ResetISR+0xac>)
1a0015d4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0015d6:	697b      	ldr	r3, [r7, #20]
1a0015d8:	3304      	adds	r3, #4
1a0015da:	4a26      	ldr	r2, [pc, #152]	; (1a001674 <ResetISR+0xb0>)
1a0015dc:	601a      	str	r2, [r3, #0]
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
1a0015de:	4b26      	ldr	r3, [pc, #152]	; (1a001678 <ResetISR+0xb4>)
1a0015e0:	613b      	str	r3, [r7, #16]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0015e2:	2300      	movs	r3, #0
1a0015e4:	61fb      	str	r3, [r7, #28]
1a0015e6:	e009      	b.n	1a0015fc <ResetISR+0x38>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0015e8:	69fb      	ldr	r3, [r7, #28]
1a0015ea:	009b      	lsls	r3, r3, #2
1a0015ec:	693a      	ldr	r2, [r7, #16]
1a0015ee:	4413      	add	r3, r2
1a0015f0:	f04f 32ff 	mov.w	r2, #4294967295
1a0015f4:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0015f6:	69fb      	ldr	r3, [r7, #28]
1a0015f8:	3301      	adds	r3, #1
1a0015fa:	61fb      	str	r3, [r7, #28]
1a0015fc:	69fb      	ldr	r3, [r7, #28]
1a0015fe:	2b07      	cmp	r3, #7
1a001600:	d9f2      	bls.n	1a0015e8 <ResetISR+0x24>
    __asm volatile ("cpsie i");
1a001602:	b662      	cpsie	i
    SystemInit();
1a001604:	f7ff fef2 	bl	1a0013ec <SystemInit>
    SectionTableAddr = &__data_section_table;
1a001608:	4b1c      	ldr	r3, [pc, #112]	; (1a00167c <ResetISR+0xb8>)
1a00160a:	61bb      	str	r3, [r7, #24]
    while (SectionTableAddr < &__data_section_table_end) {
1a00160c:	e013      	b.n	1a001636 <ResetISR+0x72>
        LoadAddr = *SectionTableAddr++;
1a00160e:	69bb      	ldr	r3, [r7, #24]
1a001610:	1d1a      	adds	r2, r3, #4
1a001612:	61ba      	str	r2, [r7, #24]
1a001614:	681b      	ldr	r3, [r3, #0]
1a001616:	60fb      	str	r3, [r7, #12]
        ExeAddr = *SectionTableAddr++;
1a001618:	69bb      	ldr	r3, [r7, #24]
1a00161a:	1d1a      	adds	r2, r3, #4
1a00161c:	61ba      	str	r2, [r7, #24]
1a00161e:	681b      	ldr	r3, [r3, #0]
1a001620:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a001622:	69bb      	ldr	r3, [r7, #24]
1a001624:	1d1a      	adds	r2, r3, #4
1a001626:	61ba      	str	r2, [r7, #24]
1a001628:	681b      	ldr	r3, [r3, #0]
1a00162a:	607b      	str	r3, [r7, #4]
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00162c:	687a      	ldr	r2, [r7, #4]
1a00162e:	68b9      	ldr	r1, [r7, #8]
1a001630:	68f8      	ldr	r0, [r7, #12]
1a001632:	f7fe fda1 	bl	1a000178 <data_init>
    while (SectionTableAddr < &__data_section_table_end) {
1a001636:	69bb      	ldr	r3, [r7, #24]
1a001638:	4a11      	ldr	r2, [pc, #68]	; (1a001680 <ResetISR+0xbc>)
1a00163a:	4293      	cmp	r3, r2
1a00163c:	d3e7      	bcc.n	1a00160e <ResetISR+0x4a>
    while (SectionTableAddr < &__bss_section_table_end) {
1a00163e:	e00d      	b.n	1a00165c <ResetISR+0x98>
        ExeAddr = *SectionTableAddr++;
1a001640:	69bb      	ldr	r3, [r7, #24]
1a001642:	1d1a      	adds	r2, r3, #4
1a001644:	61ba      	str	r2, [r7, #24]
1a001646:	681b      	ldr	r3, [r3, #0]
1a001648:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a00164a:	69bb      	ldr	r3, [r7, #24]
1a00164c:	1d1a      	adds	r2, r3, #4
1a00164e:	61ba      	str	r2, [r7, #24]
1a001650:	681b      	ldr	r3, [r3, #0]
1a001652:	607b      	str	r3, [r7, #4]
        bss_init(ExeAddr, SectionLen);
1a001654:	6879      	ldr	r1, [r7, #4]
1a001656:	68b8      	ldr	r0, [r7, #8]
1a001658:	f7fe fdb0 	bl	1a0001bc <bss_init>
    while (SectionTableAddr < &__bss_section_table_end) {
1a00165c:	69bb      	ldr	r3, [r7, #24]
1a00165e:	4a09      	ldr	r2, [pc, #36]	; (1a001684 <ResetISR+0xc0>)
1a001660:	4293      	cmp	r3, r2
1a001662:	d3ed      	bcc.n	1a001640 <ResetISR+0x7c>
    main();
1a001664:	f7fe ff2c 	bl	1a0004c0 <main>
    while (1) {
1a001668:	e7fe      	b.n	1a001668 <ResetISR+0xa4>
1a00166a:	bf00      	nop
1a00166c:	40053100 	.word	0x40053100
1a001670:	10df1000 	.word	0x10df1000
1a001674:	01dff7ff 	.word	0x01dff7ff
1a001678:	e000e280 	.word	0xe000e280
1a00167c:	1a000114 	.word	0x1a000114
1a001680:	1a000150 	.word	0x1a000150
1a001684:	1a000178 	.word	0x1a000178

1a001688 <Chip_SCU_PinMuxSet>:
{
1a001688:	b480      	push	{r7}
1a00168a:	b083      	sub	sp, #12
1a00168c:	af00      	add	r7, sp, #0
1a00168e:	4603      	mov	r3, r0
1a001690:	71fb      	strb	r3, [r7, #7]
1a001692:	460b      	mov	r3, r1
1a001694:	71bb      	strb	r3, [r7, #6]
1a001696:	4613      	mov	r3, r2
1a001698:	80bb      	strh	r3, [r7, #4]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00169a:	4807      	ldr	r0, [pc, #28]	; (1a0016b8 <Chip_SCU_PinMuxSet+0x30>)
1a00169c:	79f9      	ldrb	r1, [r7, #7]
1a00169e:	79bb      	ldrb	r3, [r7, #6]
1a0016a0:	88ba      	ldrh	r2, [r7, #4]
1a0016a2:	0149      	lsls	r1, r1, #5
1a0016a4:	440b      	add	r3, r1
1a0016a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a0016aa:	bf00      	nop
1a0016ac:	370c      	adds	r7, #12
1a0016ae:	46bd      	mov	sp, r7
1a0016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0016b4:	4770      	bx	lr
1a0016b6:	bf00      	nop
1a0016b8:	40086000 	.word	0x40086000

1a0016bc <Chip_ENET_RMIIEnable>:
 * @note   This function must be called to enable the internal
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
1a0016bc:	b480      	push	{r7}
1a0016be:	b083      	sub	sp, #12
1a0016c0:	af00      	add	r7, sp, #0
1a0016c2:	6078      	str	r0, [r7, #4]
   LPC_CREG->CREG6 |= 0x4;
1a0016c4:	4b06      	ldr	r3, [pc, #24]	; (1a0016e0 <Chip_ENET_RMIIEnable+0x24>)
1a0016c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0016ca:	4a05      	ldr	r2, [pc, #20]	; (1a0016e0 <Chip_ENET_RMIIEnable+0x24>)
1a0016cc:	f043 0304 	orr.w	r3, r3, #4
1a0016d0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
}
1a0016d4:	bf00      	nop
1a0016d6:	370c      	adds	r7, #12
1a0016d8:	46bd      	mov	sp, r7
1a0016da:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0016de:	4770      	bx	lr
1a0016e0:	40043000 	.word	0x40043000

1a0016e4 <Chip_GPIO_SetPinState>:
 * @param  setting : true for high, false for low
 * @return Nothing
 * @note   This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
1a0016e4:	b480      	push	{r7}
1a0016e6:	b083      	sub	sp, #12
1a0016e8:	af00      	add	r7, sp, #0
1a0016ea:	6078      	str	r0, [r7, #4]
1a0016ec:	4608      	mov	r0, r1
1a0016ee:	4611      	mov	r1, r2
1a0016f0:	461a      	mov	r2, r3
1a0016f2:	4603      	mov	r3, r0
1a0016f4:	70fb      	strb	r3, [r7, #3]
1a0016f6:	460b      	mov	r3, r1
1a0016f8:	70bb      	strb	r3, [r7, #2]
1a0016fa:	4613      	mov	r3, r2
1a0016fc:	707b      	strb	r3, [r7, #1]
   pGPIO->B[port][pin] = setting;
1a0016fe:	78fa      	ldrb	r2, [r7, #3]
1a001700:	78bb      	ldrb	r3, [r7, #2]
1a001702:	7878      	ldrb	r0, [r7, #1]
1a001704:	6879      	ldr	r1, [r7, #4]
1a001706:	0152      	lsls	r2, r2, #5
1a001708:	440a      	add	r2, r1
1a00170a:	4413      	add	r3, r2
1a00170c:	4602      	mov	r2, r0
1a00170e:	701a      	strb	r2, [r3, #0]
}
1a001710:	bf00      	nop
1a001712:	370c      	adds	r7, #12
1a001714:	46bd      	mov	sp, r7
1a001716:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00171a:	4770      	bx	lr

1a00171c <Chip_GPIO_SetPinDIROutput>:
 * @param  port    : GPIO Port number where @a pin is located
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a00171c:	b480      	push	{r7}
1a00171e:	b083      	sub	sp, #12
1a001720:	af00      	add	r7, sp, #0
1a001722:	6078      	str	r0, [r7, #4]
1a001724:	460b      	mov	r3, r1
1a001726:	70fb      	strb	r3, [r7, #3]
1a001728:	4613      	mov	r3, r2
1a00172a:	70bb      	strb	r3, [r7, #2]
   pGPIO->DIR[port] |= 1UL << pin;
1a00172c:	78fa      	ldrb	r2, [r7, #3]
1a00172e:	687b      	ldr	r3, [r7, #4]
1a001730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a001738:	78bb      	ldrb	r3, [r7, #2]
1a00173a:	2201      	movs	r2, #1
1a00173c:	fa02 f303 	lsl.w	r3, r2, r3
1a001740:	78fa      	ldrb	r2, [r7, #3]
1a001742:	4319      	orrs	r1, r3
1a001744:	687b      	ldr	r3, [r7, #4]
1a001746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00174a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00174e:	bf00      	nop
1a001750:	370c      	adds	r7, #12
1a001752:	46bd      	mov	sp, r7
1a001754:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001758:	4770      	bx	lr

1a00175a <Chip_UART_TXEnable>:
{
1a00175a:	b480      	push	{r7}
1a00175c:	b083      	sub	sp, #12
1a00175e:	af00      	add	r7, sp, #0
1a001760:	6078      	str	r0, [r7, #4]
    pUART->TER2 = UART_TER2_TXEN;
1a001762:	687b      	ldr	r3, [r7, #4]
1a001764:	2201      	movs	r2, #1
1a001766:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a001768:	bf00      	nop
1a00176a:	370c      	adds	r7, #12
1a00176c:	46bd      	mov	sp, r7
1a00176e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001772:	4770      	bx	lr

1a001774 <Chip_UART_ConfigData>:
{
1a001774:	b480      	push	{r7}
1a001776:	b083      	sub	sp, #12
1a001778:	af00      	add	r7, sp, #0
1a00177a:	6078      	str	r0, [r7, #4]
1a00177c:	6039      	str	r1, [r7, #0]
   pUART->LCR = config;
1a00177e:	687b      	ldr	r3, [r7, #4]
1a001780:	683a      	ldr	r2, [r7, #0]
1a001782:	60da      	str	r2, [r3, #12]
}
1a001784:	bf00      	nop
1a001786:	370c      	adds	r7, #12
1a001788:	46bd      	mov	sp, r7
1a00178a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00178e:	4770      	bx	lr

1a001790 <Board_UART_Init>:

static const io_port_t gpioLEDBits[] = {{0, 14}, {1, 11}, {1, 12}, {5, 0}, {5, 1}, {5, 2}};
static uint32_t lcd_cfg_val;

void Board_UART_Init(LPC_USART_T *pUART)
{
1a001790:	b580      	push	{r7, lr}
1a001792:	b082      	sub	sp, #8
1a001794:	af00      	add	r7, sp, #0
1a001796:	6078      	str	r0, [r7, #4]
   Chip_SCU_PinMuxSet(0x6, 4, (SCU_MODE_INACT | SCU_MODE_FUNC2));                  /* P6,4 : UART0_TXD */
1a001798:	2212      	movs	r2, #18
1a00179a:	2104      	movs	r1, #4
1a00179c:	2006      	movs	r0, #6
1a00179e:	f7ff ff73 	bl	1a001688 <Chip_SCU_PinMuxSet>
   Chip_SCU_PinMuxSet(0x2, 1, (SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC1));/* P2.1 : UART0_RXD */
1a0017a2:	22d1      	movs	r2, #209	; 0xd1
1a0017a4:	2101      	movs	r1, #1
1a0017a6:	2002      	movs	r0, #2
1a0017a8:	f7ff ff6e 	bl	1a001688 <Chip_SCU_PinMuxSet>
}
1a0017ac:	bf00      	nop
1a0017ae:	3708      	adds	r7, #8
1a0017b0:	46bd      	mov	sp, r7
1a0017b2:	bd80      	pop	{r7, pc}

1a0017b4 <Board_Debug_Init>:

/* Initialize debug output via UART for board */
void Board_Debug_Init(void)
{
1a0017b4:	b580      	push	{r7, lr}
1a0017b6:	af00      	add	r7, sp, #0
#if defined(DEBUG_UART)
   Board_UART_Init(DEBUG_UART);
1a0017b8:	4809      	ldr	r0, [pc, #36]	; (1a0017e0 <Board_Debug_Init+0x2c>)
1a0017ba:	f7ff ffe9 	bl	1a001790 <Board_UART_Init>

   Chip_UART_Init(DEBUG_UART);
1a0017be:	4808      	ldr	r0, [pc, #32]	; (1a0017e0 <Board_Debug_Init+0x2c>)
1a0017c0:	f7ff f862 	bl	1a000888 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a0017c4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0017c8:	4805      	ldr	r0, [pc, #20]	; (1a0017e0 <Board_Debug_Init+0x2c>)
1a0017ca:	f7ff f89f 	bl	1a00090c <Chip_UART_SetBaudFDR>
   Chip_UART_ConfigData(DEBUG_UART, UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS);
1a0017ce:	2103      	movs	r1, #3
1a0017d0:	4803      	ldr	r0, [pc, #12]	; (1a0017e0 <Board_Debug_Init+0x2c>)
1a0017d2:	f7ff ffcf 	bl	1a001774 <Chip_UART_ConfigData>

   /* Enable UART Transmit */
   Chip_UART_TXEnable(DEBUG_UART);
1a0017d6:	4802      	ldr	r0, [pc, #8]	; (1a0017e0 <Board_Debug_Init+0x2c>)
1a0017d8:	f7ff ffbf 	bl	1a00175a <Chip_UART_TXEnable>
#endif
}
1a0017dc:	bf00      	nop
1a0017de:	bd80      	pop	{r7, pc}
1a0017e0:	400c1000 	.word	0x400c1000

1a0017e4 <Board_LED_Init>:
   }
#endif
}

static void Board_LED_Init()
{
1a0017e4:	b580      	push	{r7, lr}
1a0017e6:	b082      	sub	sp, #8
1a0017e8:	af00      	add	r7, sp, #0
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a0017ea:	2300      	movs	r3, #0
1a0017ec:	607b      	str	r3, [r7, #4]
1a0017ee:	e01c      	b.n	1a00182a <Board_LED_Init+0x46>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a0017f0:	4a11      	ldr	r2, [pc, #68]	; (1a001838 <Board_LED_Init+0x54>)
1a0017f2:	687b      	ldr	r3, [r7, #4]
1a0017f4:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
1a0017f8:	4a0f      	ldr	r2, [pc, #60]	; (1a001838 <Board_LED_Init+0x54>)
1a0017fa:	687b      	ldr	r3, [r7, #4]
1a0017fc:	005b      	lsls	r3, r3, #1
1a0017fe:	4413      	add	r3, r2
1a001800:	785b      	ldrb	r3, [r3, #1]
1a001802:	461a      	mov	r2, r3
1a001804:	480d      	ldr	r0, [pc, #52]	; (1a00183c <Board_LED_Init+0x58>)
1a001806:	f7ff ff89 	bl	1a00171c <Chip_GPIO_SetPinDIROutput>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
1a00180a:	4a0b      	ldr	r2, [pc, #44]	; (1a001838 <Board_LED_Init+0x54>)
1a00180c:	687b      	ldr	r3, [r7, #4]
1a00180e:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
1a001812:	4a09      	ldr	r2, [pc, #36]	; (1a001838 <Board_LED_Init+0x54>)
1a001814:	687b      	ldr	r3, [r7, #4]
1a001816:	005b      	lsls	r3, r3, #1
1a001818:	4413      	add	r3, r2
1a00181a:	785a      	ldrb	r2, [r3, #1]
1a00181c:	2300      	movs	r3, #0
1a00181e:	4807      	ldr	r0, [pc, #28]	; (1a00183c <Board_LED_Init+0x58>)
1a001820:	f7ff ff60 	bl	1a0016e4 <Chip_GPIO_SetPinState>
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001824:	687b      	ldr	r3, [r7, #4]
1a001826:	3301      	adds	r3, #1
1a001828:	607b      	str	r3, [r7, #4]
1a00182a:	687b      	ldr	r3, [r7, #4]
1a00182c:	2b05      	cmp	r3, #5
1a00182e:	d9df      	bls.n	1a0017f0 <Board_LED_Init+0xc>
   }
}
1a001830:	bf00      	nop
1a001832:	3708      	adds	r7, #8
1a001834:	46bd      	mov	sp, r7
1a001836:	bd80      	pop	{r7, pc}
1a001838:	1a001da4 	.word	0x1a001da4
1a00183c:	400f4000 	.word	0x400f4000

1a001840 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a001840:	b580      	push	{r7, lr}
1a001842:	af00      	add	r7, sp, #0
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a001844:	f7ff ffb6 	bl	1a0017b4 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001848:	4804      	ldr	r0, [pc, #16]	; (1a00185c <Board_Init+0x1c>)
1a00184a:	f7ff f915 	bl	1a000a78 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a00184e:	f7ff ffc9 	bl	1a0017e4 <Board_LED_Init>
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
1a001852:	4803      	ldr	r0, [pc, #12]	; (1a001860 <Board_Init+0x20>)
1a001854:	f7ff ff32 	bl	1a0016bc <Chip_ENET_RMIIEnable>
}
1a001858:	bf00      	nop
1a00185a:	bd80      	pop	{r7, pc}
1a00185c:	400f4000 	.word	0x400f4000
1a001860:	40010000 	.word	0x40010000

1a001864 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
1a001864:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
1a001866:	4770      	bx	lr

1a001868 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
1a001868:	df00      	svc	0
        bx lr
1a00186a:	4770      	bx	lr

1a00186c <__aeabi_uldivmod>:
1a00186c:	b953      	cbnz	r3, 1a001884 <__aeabi_uldivmod+0x18>
1a00186e:	b94a      	cbnz	r2, 1a001884 <__aeabi_uldivmod+0x18>
1a001870:	2900      	cmp	r1, #0
1a001872:	bf08      	it	eq
1a001874:	2800      	cmpeq	r0, #0
1a001876:	bf1c      	itt	ne
1a001878:	f04f 31ff 	movne.w	r1, #4294967295
1a00187c:	f04f 30ff 	movne.w	r0, #4294967295
1a001880:	f000 b974 	b.w	1a001b6c <__aeabi_idiv0>
1a001884:	f1ad 0c08 	sub.w	ip, sp, #8
1a001888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00188c:	f000 f806 	bl	1a00189c <__udivmoddi4>
1a001890:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001898:	b004      	add	sp, #16
1a00189a:	4770      	bx	lr

1a00189c <__udivmoddi4>:
1a00189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0018a0:	9e08      	ldr	r6, [sp, #32]
1a0018a2:	4604      	mov	r4, r0
1a0018a4:	4688      	mov	r8, r1
1a0018a6:	2b00      	cmp	r3, #0
1a0018a8:	f040 8085 	bne.w	1a0019b6 <__udivmoddi4+0x11a>
1a0018ac:	428a      	cmp	r2, r1
1a0018ae:	4615      	mov	r5, r2
1a0018b0:	d948      	bls.n	1a001944 <__udivmoddi4+0xa8>
1a0018b2:	fab2 f282 	clz	r2, r2
1a0018b6:	b14a      	cbz	r2, 1a0018cc <__udivmoddi4+0x30>
1a0018b8:	f1c2 0720 	rsb	r7, r2, #32
1a0018bc:	fa01 f302 	lsl.w	r3, r1, r2
1a0018c0:	fa20 f707 	lsr.w	r7, r0, r7
1a0018c4:	4095      	lsls	r5, r2
1a0018c6:	ea47 0803 	orr.w	r8, r7, r3
1a0018ca:	4094      	lsls	r4, r2
1a0018cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0018d0:	0c23      	lsrs	r3, r4, #16
1a0018d2:	fbb8 f7fe 	udiv	r7, r8, lr
1a0018d6:	fa1f fc85 	uxth.w	ip, r5
1a0018da:	fb0e 8817 	mls	r8, lr, r7, r8
1a0018de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0018e2:	fb07 f10c 	mul.w	r1, r7, ip
1a0018e6:	4299      	cmp	r1, r3
1a0018e8:	d909      	bls.n	1a0018fe <__udivmoddi4+0x62>
1a0018ea:	18eb      	adds	r3, r5, r3
1a0018ec:	f107 30ff 	add.w	r0, r7, #4294967295
1a0018f0:	f080 80e3 	bcs.w	1a001aba <__udivmoddi4+0x21e>
1a0018f4:	4299      	cmp	r1, r3
1a0018f6:	f240 80e0 	bls.w	1a001aba <__udivmoddi4+0x21e>
1a0018fa:	3f02      	subs	r7, #2
1a0018fc:	442b      	add	r3, r5
1a0018fe:	1a5b      	subs	r3, r3, r1
1a001900:	b2a4      	uxth	r4, r4
1a001902:	fbb3 f0fe 	udiv	r0, r3, lr
1a001906:	fb0e 3310 	mls	r3, lr, r0, r3
1a00190a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00190e:	fb00 fc0c 	mul.w	ip, r0, ip
1a001912:	45a4      	cmp	ip, r4
1a001914:	d909      	bls.n	1a00192a <__udivmoddi4+0x8e>
1a001916:	192c      	adds	r4, r5, r4
1a001918:	f100 33ff 	add.w	r3, r0, #4294967295
1a00191c:	f080 80cb 	bcs.w	1a001ab6 <__udivmoddi4+0x21a>
1a001920:	45a4      	cmp	ip, r4
1a001922:	f240 80c8 	bls.w	1a001ab6 <__udivmoddi4+0x21a>
1a001926:	3802      	subs	r0, #2
1a001928:	442c      	add	r4, r5
1a00192a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00192e:	eba4 040c 	sub.w	r4, r4, ip
1a001932:	2700      	movs	r7, #0
1a001934:	b11e      	cbz	r6, 1a00193e <__udivmoddi4+0xa2>
1a001936:	40d4      	lsrs	r4, r2
1a001938:	2300      	movs	r3, #0
1a00193a:	e9c6 4300 	strd	r4, r3, [r6]
1a00193e:	4639      	mov	r1, r7
1a001940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001944:	2a00      	cmp	r2, #0
1a001946:	d053      	beq.n	1a0019f0 <__udivmoddi4+0x154>
1a001948:	fab2 f282 	clz	r2, r2
1a00194c:	2a00      	cmp	r2, #0
1a00194e:	f040 80b6 	bne.w	1a001abe <__udivmoddi4+0x222>
1a001952:	1b49      	subs	r1, r1, r5
1a001954:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001958:	fa1f f885 	uxth.w	r8, r5
1a00195c:	2701      	movs	r7, #1
1a00195e:	fbb1 fcfe 	udiv	ip, r1, lr
1a001962:	0c23      	lsrs	r3, r4, #16
1a001964:	fb0e 111c 	mls	r1, lr, ip, r1
1a001968:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00196c:	fb08 f10c 	mul.w	r1, r8, ip
1a001970:	4299      	cmp	r1, r3
1a001972:	d907      	bls.n	1a001984 <__udivmoddi4+0xe8>
1a001974:	18eb      	adds	r3, r5, r3
1a001976:	f10c 30ff 	add.w	r0, ip, #4294967295
1a00197a:	d202      	bcs.n	1a001982 <__udivmoddi4+0xe6>
1a00197c:	4299      	cmp	r1, r3
1a00197e:	f200 80ec 	bhi.w	1a001b5a <__udivmoddi4+0x2be>
1a001982:	4684      	mov	ip, r0
1a001984:	1a59      	subs	r1, r3, r1
1a001986:	b2a3      	uxth	r3, r4
1a001988:	fbb1 f0fe 	udiv	r0, r1, lr
1a00198c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001990:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001994:	fb08 f800 	mul.w	r8, r8, r0
1a001998:	45a0      	cmp	r8, r4
1a00199a:	d907      	bls.n	1a0019ac <__udivmoddi4+0x110>
1a00199c:	192c      	adds	r4, r5, r4
1a00199e:	f100 33ff 	add.w	r3, r0, #4294967295
1a0019a2:	d202      	bcs.n	1a0019aa <__udivmoddi4+0x10e>
1a0019a4:	45a0      	cmp	r8, r4
1a0019a6:	f200 80dc 	bhi.w	1a001b62 <__udivmoddi4+0x2c6>
1a0019aa:	4618      	mov	r0, r3
1a0019ac:	eba4 0408 	sub.w	r4, r4, r8
1a0019b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0019b4:	e7be      	b.n	1a001934 <__udivmoddi4+0x98>
1a0019b6:	428b      	cmp	r3, r1
1a0019b8:	d908      	bls.n	1a0019cc <__udivmoddi4+0x130>
1a0019ba:	2e00      	cmp	r6, #0
1a0019bc:	d078      	beq.n	1a001ab0 <__udivmoddi4+0x214>
1a0019be:	2700      	movs	r7, #0
1a0019c0:	e9c6 0100 	strd	r0, r1, [r6]
1a0019c4:	4638      	mov	r0, r7
1a0019c6:	4639      	mov	r1, r7
1a0019c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0019cc:	fab3 f783 	clz	r7, r3
1a0019d0:	b97f      	cbnz	r7, 1a0019f2 <__udivmoddi4+0x156>
1a0019d2:	428b      	cmp	r3, r1
1a0019d4:	d302      	bcc.n	1a0019dc <__udivmoddi4+0x140>
1a0019d6:	4282      	cmp	r2, r0
1a0019d8:	f200 80bd 	bhi.w	1a001b56 <__udivmoddi4+0x2ba>
1a0019dc:	1a84      	subs	r4, r0, r2
1a0019de:	eb61 0303 	sbc.w	r3, r1, r3
1a0019e2:	2001      	movs	r0, #1
1a0019e4:	4698      	mov	r8, r3
1a0019e6:	2e00      	cmp	r6, #0
1a0019e8:	d0a9      	beq.n	1a00193e <__udivmoddi4+0xa2>
1a0019ea:	e9c6 4800 	strd	r4, r8, [r6]
1a0019ee:	e7a6      	b.n	1a00193e <__udivmoddi4+0xa2>
1a0019f0:	deff      	udf	#255	; 0xff
1a0019f2:	f1c7 0520 	rsb	r5, r7, #32
1a0019f6:	40bb      	lsls	r3, r7
1a0019f8:	fa22 fc05 	lsr.w	ip, r2, r5
1a0019fc:	ea4c 0c03 	orr.w	ip, ip, r3
1a001a00:	fa01 f407 	lsl.w	r4, r1, r7
1a001a04:	fa20 f805 	lsr.w	r8, r0, r5
1a001a08:	fa21 f305 	lsr.w	r3, r1, r5
1a001a0c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001a10:	ea48 0404 	orr.w	r4, r8, r4
1a001a14:	fbb3 f9fe 	udiv	r9, r3, lr
1a001a18:	0c21      	lsrs	r1, r4, #16
1a001a1a:	fb0e 3319 	mls	r3, lr, r9, r3
1a001a1e:	fa1f f88c 	uxth.w	r8, ip
1a001a22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001a26:	fb09 fa08 	mul.w	sl, r9, r8
1a001a2a:	459a      	cmp	sl, r3
1a001a2c:	fa02 f207 	lsl.w	r2, r2, r7
1a001a30:	fa00 f107 	lsl.w	r1, r0, r7
1a001a34:	d90b      	bls.n	1a001a4e <__udivmoddi4+0x1b2>
1a001a36:	eb1c 0303 	adds.w	r3, ip, r3
1a001a3a:	f109 30ff 	add.w	r0, r9, #4294967295
1a001a3e:	f080 8088 	bcs.w	1a001b52 <__udivmoddi4+0x2b6>
1a001a42:	459a      	cmp	sl, r3
1a001a44:	f240 8085 	bls.w	1a001b52 <__udivmoddi4+0x2b6>
1a001a48:	f1a9 0902 	sub.w	r9, r9, #2
1a001a4c:	4463      	add	r3, ip
1a001a4e:	eba3 030a 	sub.w	r3, r3, sl
1a001a52:	b2a4      	uxth	r4, r4
1a001a54:	fbb3 f0fe 	udiv	r0, r3, lr
1a001a58:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001a60:	fb00 f808 	mul.w	r8, r0, r8
1a001a64:	45a0      	cmp	r8, r4
1a001a66:	d908      	bls.n	1a001a7a <__udivmoddi4+0x1de>
1a001a68:	eb1c 0404 	adds.w	r4, ip, r4
1a001a6c:	f100 33ff 	add.w	r3, r0, #4294967295
1a001a70:	d26b      	bcs.n	1a001b4a <__udivmoddi4+0x2ae>
1a001a72:	45a0      	cmp	r8, r4
1a001a74:	d969      	bls.n	1a001b4a <__udivmoddi4+0x2ae>
1a001a76:	3802      	subs	r0, #2
1a001a78:	4464      	add	r4, ip
1a001a7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001a7e:	eba4 0408 	sub.w	r4, r4, r8
1a001a82:	fba0 8902 	umull	r8, r9, r0, r2
1a001a86:	454c      	cmp	r4, r9
1a001a88:	46c6      	mov	lr, r8
1a001a8a:	464b      	mov	r3, r9
1a001a8c:	d354      	bcc.n	1a001b38 <__udivmoddi4+0x29c>
1a001a8e:	d051      	beq.n	1a001b34 <__udivmoddi4+0x298>
1a001a90:	2e00      	cmp	r6, #0
1a001a92:	d069      	beq.n	1a001b68 <__udivmoddi4+0x2cc>
1a001a94:	ebb1 020e 	subs.w	r2, r1, lr
1a001a98:	eb64 0403 	sbc.w	r4, r4, r3
1a001a9c:	fa04 f505 	lsl.w	r5, r4, r5
1a001aa0:	fa22 f307 	lsr.w	r3, r2, r7
1a001aa4:	40fc      	lsrs	r4, r7
1a001aa6:	431d      	orrs	r5, r3
1a001aa8:	e9c6 5400 	strd	r5, r4, [r6]
1a001aac:	2700      	movs	r7, #0
1a001aae:	e746      	b.n	1a00193e <__udivmoddi4+0xa2>
1a001ab0:	4637      	mov	r7, r6
1a001ab2:	4630      	mov	r0, r6
1a001ab4:	e743      	b.n	1a00193e <__udivmoddi4+0xa2>
1a001ab6:	4618      	mov	r0, r3
1a001ab8:	e737      	b.n	1a00192a <__udivmoddi4+0x8e>
1a001aba:	4607      	mov	r7, r0
1a001abc:	e71f      	b.n	1a0018fe <__udivmoddi4+0x62>
1a001abe:	f1c2 0320 	rsb	r3, r2, #32
1a001ac2:	fa20 f703 	lsr.w	r7, r0, r3
1a001ac6:	4095      	lsls	r5, r2
1a001ac8:	fa01 f002 	lsl.w	r0, r1, r2
1a001acc:	fa21 f303 	lsr.w	r3, r1, r3
1a001ad0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ad4:	4338      	orrs	r0, r7
1a001ad6:	0c01      	lsrs	r1, r0, #16
1a001ad8:	fbb3 f7fe 	udiv	r7, r3, lr
1a001adc:	fa1f f885 	uxth.w	r8, r5
1a001ae0:	fb0e 3317 	mls	r3, lr, r7, r3
1a001ae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001ae8:	fb07 f308 	mul.w	r3, r7, r8
1a001aec:	428b      	cmp	r3, r1
1a001aee:	fa04 f402 	lsl.w	r4, r4, r2
1a001af2:	d907      	bls.n	1a001b04 <__udivmoddi4+0x268>
1a001af4:	1869      	adds	r1, r5, r1
1a001af6:	f107 3cff 	add.w	ip, r7, #4294967295
1a001afa:	d228      	bcs.n	1a001b4e <__udivmoddi4+0x2b2>
1a001afc:	428b      	cmp	r3, r1
1a001afe:	d926      	bls.n	1a001b4e <__udivmoddi4+0x2b2>
1a001b00:	3f02      	subs	r7, #2
1a001b02:	4429      	add	r1, r5
1a001b04:	1acb      	subs	r3, r1, r3
1a001b06:	b281      	uxth	r1, r0
1a001b08:	fbb3 f0fe 	udiv	r0, r3, lr
1a001b0c:	fb0e 3310 	mls	r3, lr, r0, r3
1a001b10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001b14:	fb00 f308 	mul.w	r3, r0, r8
1a001b18:	428b      	cmp	r3, r1
1a001b1a:	d907      	bls.n	1a001b2c <__udivmoddi4+0x290>
1a001b1c:	1869      	adds	r1, r5, r1
1a001b1e:	f100 3cff 	add.w	ip, r0, #4294967295
1a001b22:	d210      	bcs.n	1a001b46 <__udivmoddi4+0x2aa>
1a001b24:	428b      	cmp	r3, r1
1a001b26:	d90e      	bls.n	1a001b46 <__udivmoddi4+0x2aa>
1a001b28:	3802      	subs	r0, #2
1a001b2a:	4429      	add	r1, r5
1a001b2c:	1ac9      	subs	r1, r1, r3
1a001b2e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001b32:	e714      	b.n	1a00195e <__udivmoddi4+0xc2>
1a001b34:	4541      	cmp	r1, r8
1a001b36:	d2ab      	bcs.n	1a001a90 <__udivmoddi4+0x1f4>
1a001b38:	ebb8 0e02 	subs.w	lr, r8, r2
1a001b3c:	eb69 020c 	sbc.w	r2, r9, ip
1a001b40:	3801      	subs	r0, #1
1a001b42:	4613      	mov	r3, r2
1a001b44:	e7a4      	b.n	1a001a90 <__udivmoddi4+0x1f4>
1a001b46:	4660      	mov	r0, ip
1a001b48:	e7f0      	b.n	1a001b2c <__udivmoddi4+0x290>
1a001b4a:	4618      	mov	r0, r3
1a001b4c:	e795      	b.n	1a001a7a <__udivmoddi4+0x1de>
1a001b4e:	4667      	mov	r7, ip
1a001b50:	e7d8      	b.n	1a001b04 <__udivmoddi4+0x268>
1a001b52:	4681      	mov	r9, r0
1a001b54:	e77b      	b.n	1a001a4e <__udivmoddi4+0x1b2>
1a001b56:	4638      	mov	r0, r7
1a001b58:	e745      	b.n	1a0019e6 <__udivmoddi4+0x14a>
1a001b5a:	f1ac 0c02 	sub.w	ip, ip, #2
1a001b5e:	442b      	add	r3, r5
1a001b60:	e710      	b.n	1a001984 <__udivmoddi4+0xe8>
1a001b62:	3802      	subs	r0, #2
1a001b64:	442c      	add	r4, r5
1a001b66:	e721      	b.n	1a0019ac <__udivmoddi4+0x110>
1a001b68:	4637      	mov	r7, r6
1a001b6a:	e6e8      	b.n	1a00193e <__udivmoddi4+0xa2>

1a001b6c <__aeabi_idiv0>:
1a001b6c:	4770      	bx	lr
1a001b6e:	bf00      	nop

1a001b70 <malloc>:
1a001b70:	4b02      	ldr	r3, [pc, #8]	; (1a001b7c <malloc+0xc>)
1a001b72:	4601      	mov	r1, r0
1a001b74:	6818      	ldr	r0, [r3, #0]
1a001b76:	f000 b80b 	b.w	1a001b90 <_malloc_r>
1a001b7a:	bf00      	nop
1a001b7c:	10000000 	.word	0x10000000

1a001b80 <memset>:
1a001b80:	4402      	add	r2, r0
1a001b82:	4603      	mov	r3, r0
1a001b84:	4293      	cmp	r3, r2
1a001b86:	d100      	bne.n	1a001b8a <memset+0xa>
1a001b88:	4770      	bx	lr
1a001b8a:	f803 1b01 	strb.w	r1, [r3], #1
1a001b8e:	e7f9      	b.n	1a001b84 <memset+0x4>

1a001b90 <_malloc_r>:
1a001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001b92:	1ccd      	adds	r5, r1, #3
1a001b94:	f025 0503 	bic.w	r5, r5, #3
1a001b98:	3508      	adds	r5, #8
1a001b9a:	2d0c      	cmp	r5, #12
1a001b9c:	bf38      	it	cc
1a001b9e:	250c      	movcc	r5, #12
1a001ba0:	2d00      	cmp	r5, #0
1a001ba2:	4606      	mov	r6, r0
1a001ba4:	db01      	blt.n	1a001baa <_malloc_r+0x1a>
1a001ba6:	42a9      	cmp	r1, r5
1a001ba8:	d903      	bls.n	1a001bb2 <_malloc_r+0x22>
1a001baa:	230c      	movs	r3, #12
1a001bac:	6033      	str	r3, [r6, #0]
1a001bae:	2000      	movs	r0, #0
1a001bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001bb2:	f000 f847 	bl	1a001c44 <__malloc_lock>
1a001bb6:	4921      	ldr	r1, [pc, #132]	; (1a001c3c <_malloc_r+0xac>)
1a001bb8:	680a      	ldr	r2, [r1, #0]
1a001bba:	4614      	mov	r4, r2
1a001bbc:	b99c      	cbnz	r4, 1a001be6 <_malloc_r+0x56>
1a001bbe:	4f20      	ldr	r7, [pc, #128]	; (1a001c40 <_malloc_r+0xb0>)
1a001bc0:	683b      	ldr	r3, [r7, #0]
1a001bc2:	b923      	cbnz	r3, 1a001bce <_malloc_r+0x3e>
1a001bc4:	4621      	mov	r1, r4
1a001bc6:	4630      	mov	r0, r6
1a001bc8:	f7ff fc20 	bl	1a00140c <_sbrk_r>
1a001bcc:	6038      	str	r0, [r7, #0]
1a001bce:	4629      	mov	r1, r5
1a001bd0:	4630      	mov	r0, r6
1a001bd2:	f7ff fc1b 	bl	1a00140c <_sbrk_r>
1a001bd6:	1c43      	adds	r3, r0, #1
1a001bd8:	d123      	bne.n	1a001c22 <_malloc_r+0x92>
1a001bda:	230c      	movs	r3, #12
1a001bdc:	6033      	str	r3, [r6, #0]
1a001bde:	4630      	mov	r0, r6
1a001be0:	f000 f836 	bl	1a001c50 <__malloc_unlock>
1a001be4:	e7e3      	b.n	1a001bae <_malloc_r+0x1e>
1a001be6:	6823      	ldr	r3, [r4, #0]
1a001be8:	1b5b      	subs	r3, r3, r5
1a001bea:	d417      	bmi.n	1a001c1c <_malloc_r+0x8c>
1a001bec:	2b0b      	cmp	r3, #11
1a001bee:	d903      	bls.n	1a001bf8 <_malloc_r+0x68>
1a001bf0:	6023      	str	r3, [r4, #0]
1a001bf2:	441c      	add	r4, r3
1a001bf4:	6025      	str	r5, [r4, #0]
1a001bf6:	e004      	b.n	1a001c02 <_malloc_r+0x72>
1a001bf8:	6863      	ldr	r3, [r4, #4]
1a001bfa:	42a2      	cmp	r2, r4
1a001bfc:	bf0c      	ite	eq
1a001bfe:	600b      	streq	r3, [r1, #0]
1a001c00:	6053      	strne	r3, [r2, #4]
1a001c02:	4630      	mov	r0, r6
1a001c04:	f000 f824 	bl	1a001c50 <__malloc_unlock>
1a001c08:	f104 000b 	add.w	r0, r4, #11
1a001c0c:	1d23      	adds	r3, r4, #4
1a001c0e:	f020 0007 	bic.w	r0, r0, #7
1a001c12:	1ac2      	subs	r2, r0, r3
1a001c14:	d0cc      	beq.n	1a001bb0 <_malloc_r+0x20>
1a001c16:	1a1b      	subs	r3, r3, r0
1a001c18:	50a3      	str	r3, [r4, r2]
1a001c1a:	e7c9      	b.n	1a001bb0 <_malloc_r+0x20>
1a001c1c:	4622      	mov	r2, r4
1a001c1e:	6864      	ldr	r4, [r4, #4]
1a001c20:	e7cc      	b.n	1a001bbc <_malloc_r+0x2c>
1a001c22:	1cc4      	adds	r4, r0, #3
1a001c24:	f024 0403 	bic.w	r4, r4, #3
1a001c28:	42a0      	cmp	r0, r4
1a001c2a:	d0e3      	beq.n	1a001bf4 <_malloc_r+0x64>
1a001c2c:	1a21      	subs	r1, r4, r0
1a001c2e:	4630      	mov	r0, r6
1a001c30:	f7ff fbec 	bl	1a00140c <_sbrk_r>
1a001c34:	3001      	adds	r0, #1
1a001c36:	d1dd      	bne.n	1a001bf4 <_malloc_r+0x64>
1a001c38:	e7cf      	b.n	1a001bda <_malloc_r+0x4a>
1a001c3a:	bf00      	nop
1a001c3c:	10000074 	.word	0x10000074
1a001c40:	10000078 	.word	0x10000078

1a001c44 <__malloc_lock>:
1a001c44:	4801      	ldr	r0, [pc, #4]	; (1a001c4c <__malloc_lock+0x8>)
1a001c46:	f000 b809 	b.w	1a001c5c <__retarget_lock_acquire_recursive>
1a001c4a:	bf00      	nop
1a001c4c:	10000084 	.word	0x10000084

1a001c50 <__malloc_unlock>:
1a001c50:	4801      	ldr	r0, [pc, #4]	; (1a001c58 <__malloc_unlock+0x8>)
1a001c52:	f000 b804 	b.w	1a001c5e <__retarget_lock_release_recursive>
1a001c56:	bf00      	nop
1a001c58:	10000084 	.word	0x10000084

1a001c5c <__retarget_lock_acquire_recursive>:
1a001c5c:	4770      	bx	lr

1a001c5e <__retarget_lock_release_recursive>:
1a001c5e:	4770      	bx	lr

1a001c60 <InitClkStates>:
1a001c60:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001c70:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001c80:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001c90:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001ca0:	111a 0001 111b 0001                         ........

1a001ca8 <UART_PClock>:
1a001ca8:	0081 0082 00a1 00a2                         ........

1a001cb0 <UART_BClock>:
1a001cb0:	01c2 01a2 0182 0162                         ......b.

1a001cb8 <periph_to_base>:
1a001cb8:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001cc8:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001cd8:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001ce8:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001cf8:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001d08:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001d18:	0222 0222 000d 0223 0223 001c 0201 0804     "."...#.#.......
1a001d28:	0f03 0f0f 00ff ffff                         ........

1a001d30 <InitClkStates>:
1a001d30:	0308 0001 0307 0001 0f01 0101               ............

1a001d3c <pinmuxing>:
1a001d3c:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a001d4c:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a001d5c:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a001d6c:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a001d7c:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a001d8c:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a001d9c <ExtRateIn>:
1a001d9c:	0000 0000                                   ....

1a001da0 <OscRateIn>:
1a001da0:	1b00 00b7                                   ....

1a001da4 <gpioLEDBits>:
1a001da4:	0e00 0b01 0c01 0005 0105 0205               ............
